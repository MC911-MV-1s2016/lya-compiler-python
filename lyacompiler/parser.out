Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    THEN
    ARRAY
    TRUE
    RESULT
    PROC
    SCONST
    ARROW
    FI
    RCURL
    DBLSLASH
    CONCATASSIGN
    ELSE
    READ
    END
    LBRACK
    DBLQUO
    BY
    FALSE
    PLUSASSIGN
    ELSIF
    PRINT
    NUM
    SINGQUO
    LENGTH
    TO
    UPPER
    OD
    SUCC
    LCURL
    CONCAT
    REF
    DOWN
    LOC
    FOR
    CHARS
    DIVIDEASSIGN
    MINUSASSIGN
    RBRACK
    LOWER
    EXIT
    RETURN
    WHILE
    PRED
    TIMESASSIGN
    PERCASSIGN
    RETURNS
    NULL
    DO
    CCONST
    CIRCUMF
    IF

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     declaration_statement -> DCL declaration_list SEMICOL
Rule 8     synonym_statement -> SYN synonym_list SEMICOL
Rule 9     newmode_statement -> TYPE newmode_list SEMICOL
Rule 10    declaration_list -> declaration_list COMMA declaration
Rule 11    declaration_list -> declaration
Rule 12    declaration -> identifier_list mode initialization
Rule 13    declaration -> identifier_list mode
Rule 14    initialization -> ASSIGN expression
Rule 15    synonym_list -> synonym_list COMMA synonym_definition
Rule 16    synonym_list -> synonym_definition
Rule 17    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 18    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 19    constant_expression -> expression
Rule 20    newmode_list -> newmode_list COMMA mode_definition
Rule 21    newmode_list -> mode_definition
Rule 22    mode_definition -> identifier_list ASSIGN mode
Rule 23    mode -> mode_name
Rule 24    mode -> discrete_mode
Rule 25    discrete_mode -> integer_mode
Rule 26    discrete_mode -> boolean_mode
Rule 27    discrete_mode -> character_mode
Rule 28    discrete_mode -> discrete_range_mode
Rule 29    integer_mode -> INT
Rule 30    boolean_mode -> BOOL
Rule 31    character_mode -> CHAR
Rule 32    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 33    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 34    mode_name -> identifier
Rule 35    discrete_mode_name -> identifier
Rule 36    literal_range -> lower_bound COLON upper_bound
Rule 37    lower_bound -> expression
Rule 38    upper_bound -> expression
Rule 39    identifier_list -> identifier
Rule 40    identifier_list -> identifier_list COMMA identifier
Rule 41    identifier -> ID
Rule 42    expression -> operand0
Rule 43    operand0 -> operand1
Rule 44    operand0 -> operand0 operator1 operand1
Rule 45    operator1 -> relational_operator
Rule 46    operator1 -> membership_operator
Rule 47    relational_operator -> AND
Rule 48    relational_operator -> OR
Rule 49    relational_operator -> EQUALS
Rule 50    relational_operator -> DIF
Rule 51    relational_operator -> GTR
Rule 52    relational_operator -> GEQ
Rule 53    relational_operator -> LSS
Rule 54    relational_operator -> LEQ
Rule 55    membership_operator -> IN
Rule 56    operand1 -> operand2
Rule 57    operand1 -> operand1 operator2 operand2
Rule 58    operator2 -> arithmetic_additive_operator
Rule 59    arithmetic_additive_operator -> PLUS
Rule 60    arithmetic_additive_operator -> MINUS
Rule 61    operand2 -> operand3
Rule 62    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 63    arithmetic_multiplicative_operator -> TIMES
Rule 64    arithmetic_multiplicative_operator -> DIVIDE
Rule 65    arithmetic_multiplicative_operator -> PERC
Rule 66    operand3 -> monadic_operator operand4
Rule 67    operand3 -> operand4
Rule 68    monadic_operator -> MINUS
Rule 69    monadic_operator -> NOT
Rule 70    operand4 -> ICONST

Terminals, with rules where they appear

AND                  : 47
ARRAY                : 
ARROW                : 
ASSIGN               : 14 17 18 22
BOOL                 : 30
BY                   : 
CCONST               : 
CHAR                 : 31
CHARS                : 
CIRCUMF              : 
COLON                : 36
COMMA                : 10 15 20 40
CONCAT               : 
CONCATASSIGN         : 
DBLQUO               : 
DBLSLASH             : 
DCL                  : 7
DIF                  : 50
DIVIDE               : 64
DIVIDEASSIGN         : 
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUALS               : 49
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GEQ                  : 52
GTR                  : 51
ICONST               : 70
ID                   : 41
IF                   : 
IN                   : 55
INT                  : 29
LBRACK               : 
LCURL                : 
LENGTH               : 
LEQ                  : 54
LOC                  : 
LOWER                : 
LPAREN               : 32 33
LSS                  : 53
MINUS                : 60 68
MINUSASSIGN          : 
NOT                  : 69
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 48
PERC                 : 65
PERCASSIGN           : 
PLUS                 : 59
PLUSASSIGN           : 
PRED                 : 
PRINT                : 
PROC                 : 
RBRACK               : 
RCURL                : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 32 33
SCONST               : 
SEMICOL              : 7 8 9
SINGQUO              : 
SUCC                 : 
SYN                  : 8
THEN                 : 
TIMES                : 63
TIMESASSIGN          : 
TO                   : 
TRUE                 : 
TYPE                 : 9
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_additive_operator : 58
arithmetic_multiplicative_operator : 62
boolean_mode         : 26
character_mode       : 27
constant_expression  : 17 18
declaration          : 10 11
declaration_list     : 7 10
declaration_statement : 4
discrete_mode        : 24 33
discrete_mode_name   : 32
discrete_range_mode  : 28
expression           : 14 19 37 38
identifier           : 34 35 39 40
identifier_list      : 12 13 17 18 22 40
initialization       : 12
integer_mode         : 25
literal_range        : 32 33
lower_bound          : 36
membership_operator  : 46
mode                 : 12 13 17 22
mode_definition      : 20 21
mode_name            : 23
monadic_operator     : 66
newmode_list         : 9 20
newmode_statement    : 6
operand0             : 42 44
operand1             : 43 44 57
operand2             : 56 57 62
operand3             : 61 62
operand4             : 66 67
operator1            : 44
operator2            : 57
program              : 0
relational_operator  : 45
statement            : 2 3
statement_list       : 1 2
synonym_definition   : 15 16
synonym_list         : 8 15
synonym_statement    : 5
upper_bound          : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) declaration_statement -> . DCL declaration_list SEMICOL
    (8) synonym_statement -> . SYN synonym_list SEMICOL
    (9) newmode_statement -> . TYPE newmode_list SEMICOL

    DCL             shift and go to state 5
    SYN             shift and go to state 8
    TYPE            shift and go to state 3

    program                        shift and go to state 7
    statement                      shift and go to state 2
    newmode_statement              shift and go to state 6
    synonym_statement              shift and go to state 1
    declaration_statement          shift and go to state 9
    statement_list                 shift and go to state 4

state 1

    (5) statement -> synonym_statement .

    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 2

    (3) statement_list -> statement .

    DCL             reduce using rule 3 (statement_list -> statement .)
    SYN             reduce using rule 3 (statement_list -> statement .)
    TYPE            reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 3

    (9) newmode_statement -> TYPE . newmode_list SEMICOL
    (20) newmode_list -> . newmode_list COMMA mode_definition
    (21) newmode_list -> . mode_definition
    (22) mode_definition -> . identifier_list ASSIGN mode
    (39) identifier_list -> . identifier
    (40) identifier_list -> . identifier_list COMMA identifier
    (41) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 10
    identifier_list                shift and go to state 14
    newmode_list                   shift and go to state 11
    mode_definition                shift and go to state 13

state 4

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) declaration_statement -> . DCL declaration_list SEMICOL
    (8) synonym_statement -> . SYN synonym_list SEMICOL
    (9) newmode_statement -> . TYPE newmode_list SEMICOL

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 5
    SYN             shift and go to state 8
    TYPE            shift and go to state 3

    statement                      shift and go to state 15
    newmode_statement              shift and go to state 6
    synonym_statement              shift and go to state 1
    declaration_statement          shift and go to state 9

state 5

    (7) declaration_statement -> DCL . declaration_list SEMICOL
    (10) declaration_list -> . declaration_list COMMA declaration
    (11) declaration_list -> . declaration
    (12) declaration -> . identifier_list mode initialization
    (13) declaration -> . identifier_list mode
    (39) identifier_list -> . identifier
    (40) identifier_list -> . identifier_list COMMA identifier
    (41) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 10
    declaration_list               shift and go to state 16
    declaration                    shift and go to state 17
    identifier_list                shift and go to state 18

state 6

    (6) statement -> newmode_statement .

    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)


state 7

    (0) S' -> program .



state 8

    (8) synonym_statement -> SYN . synonym_list SEMICOL
    (15) synonym_list -> . synonym_list COMMA synonym_definition
    (16) synonym_list -> . synonym_definition
    (17) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (18) synonym_definition -> . identifier_list ASSIGN constant_expression
    (39) identifier_list -> . identifier
    (40) identifier_list -> . identifier_list COMMA identifier
    (41) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 10
    synonym_list                   shift and go to state 19
    identifier_list                shift and go to state 20
    synonym_definition             shift and go to state 21

state 9

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 10

    (39) identifier_list -> identifier .

    ASSIGN          reduce using rule 39 (identifier_list -> identifier .)
    COMMA           reduce using rule 39 (identifier_list -> identifier .)
    ID              reduce using rule 39 (identifier_list -> identifier .)
    INT             reduce using rule 39 (identifier_list -> identifier .)
    BOOL            reduce using rule 39 (identifier_list -> identifier .)
    CHAR            reduce using rule 39 (identifier_list -> identifier .)


state 11

    (9) newmode_statement -> TYPE newmode_list . SEMICOL
    (20) newmode_list -> newmode_list . COMMA mode_definition

    SEMICOL         shift and go to state 22
    COMMA           shift and go to state 23


state 12

    (41) identifier -> ID .

    ASSIGN          reduce using rule 41 (identifier -> ID .)
    COMMA           reduce using rule 41 (identifier -> ID .)
    ID              reduce using rule 41 (identifier -> ID .)
    INT             reduce using rule 41 (identifier -> ID .)
    BOOL            reduce using rule 41 (identifier -> ID .)
    CHAR            reduce using rule 41 (identifier -> ID .)
    SEMICOL         reduce using rule 41 (identifier -> ID .)
    LPAREN          reduce using rule 41 (identifier -> ID .)


state 13

    (21) newmode_list -> mode_definition .

    SEMICOL         reduce using rule 21 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 21 (newmode_list -> mode_definition .)


state 14

    (22) mode_definition -> identifier_list . ASSIGN mode
    (40) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 25
    COMMA           shift and go to state 24


state 15

    (2) statement_list -> statement_list statement .

    DCL             reduce using rule 2 (statement_list -> statement_list statement .)
    SYN             reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 16

    (7) declaration_statement -> DCL declaration_list . SEMICOL
    (10) declaration_list -> declaration_list . COMMA declaration

    SEMICOL         shift and go to state 26
    COMMA           shift and go to state 27


state 17

    (11) declaration_list -> declaration .

    SEMICOL         reduce using rule 11 (declaration_list -> declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration .)


state 18

    (12) declaration -> identifier_list . mode initialization
    (13) declaration -> identifier_list . mode
    (40) identifier_list -> identifier_list . COMMA identifier
    (23) mode -> . mode_name
    (24) mode -> . discrete_mode
    (34) mode_name -> . identifier
    (25) discrete_mode -> . integer_mode
    (26) discrete_mode -> . boolean_mode
    (27) discrete_mode -> . character_mode
    (28) discrete_mode -> . discrete_range_mode
    (41) identifier -> . ID
    (29) integer_mode -> . INT
    (30) boolean_mode -> . BOOL
    (31) character_mode -> . CHAR
    (32) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (33) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (35) discrete_mode_name -> . identifier

    COMMA           shift and go to state 24
    ID              shift and go to state 12
    INT             shift and go to state 39
    BOOL            shift and go to state 30
    CHAR            shift and go to state 37

    boolean_mode                   shift and go to state 28
    discrete_mode                  shift and go to state 29
    discrete_range_mode            shift and go to state 31
    character_mode                 shift and go to state 32
    integer_mode                   shift and go to state 34
    mode                           shift and go to state 35
    identifier                     shift and go to state 36
    discrete_mode_name             shift and go to state 33
    mode_name                      shift and go to state 38

state 19

    (8) synonym_statement -> SYN synonym_list . SEMICOL
    (15) synonym_list -> synonym_list . COMMA synonym_definition

    SEMICOL         shift and go to state 40
    COMMA           shift and go to state 41


state 20

    (17) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (18) synonym_definition -> identifier_list . ASSIGN constant_expression
    (40) identifier_list -> identifier_list . COMMA identifier
    (23) mode -> . mode_name
    (24) mode -> . discrete_mode
    (34) mode_name -> . identifier
    (25) discrete_mode -> . integer_mode
    (26) discrete_mode -> . boolean_mode
    (27) discrete_mode -> . character_mode
    (28) discrete_mode -> . discrete_range_mode
    (41) identifier -> . ID
    (29) integer_mode -> . INT
    (30) boolean_mode -> . BOOL
    (31) character_mode -> . CHAR
    (32) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (33) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (35) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 43
    COMMA           shift and go to state 24
    ID              shift and go to state 12
    INT             shift and go to state 39
    BOOL            shift and go to state 30
    CHAR            shift and go to state 37

    boolean_mode                   shift and go to state 28
    identifier                     shift and go to state 36
    discrete_mode                  shift and go to state 29
    discrete_range_mode            shift and go to state 31
    character_mode                 shift and go to state 32
    integer_mode                   shift and go to state 34
    mode                           shift and go to state 42
    discrete_mode_name             shift and go to state 33
    mode_name                      shift and go to state 38

state 21

    (16) synonym_list -> synonym_definition .

    SEMICOL         reduce using rule 16 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 16 (synonym_list -> synonym_definition .)


state 22

    (9) newmode_statement -> TYPE newmode_list SEMICOL .

    DCL             reduce using rule 9 (newmode_statement -> TYPE newmode_list SEMICOL .)
    SYN             reduce using rule 9 (newmode_statement -> TYPE newmode_list SEMICOL .)
    TYPE            reduce using rule 9 (newmode_statement -> TYPE newmode_list SEMICOL .)
    $end            reduce using rule 9 (newmode_statement -> TYPE newmode_list SEMICOL .)


state 23

    (20) newmode_list -> newmode_list COMMA . mode_definition
    (22) mode_definition -> . identifier_list ASSIGN mode
    (39) identifier_list -> . identifier
    (40) identifier_list -> . identifier_list COMMA identifier
    (41) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 10
    identifier_list                shift and go to state 14
    mode_definition                shift and go to state 44

state 24

    (40) identifier_list -> identifier_list COMMA . identifier
    (41) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 45

state 25

    (22) mode_definition -> identifier_list ASSIGN . mode
    (23) mode -> . mode_name
    (24) mode -> . discrete_mode
    (34) mode_name -> . identifier
    (25) discrete_mode -> . integer_mode
    (26) discrete_mode -> . boolean_mode
    (27) discrete_mode -> . character_mode
    (28) discrete_mode -> . discrete_range_mode
    (41) identifier -> . ID
    (29) integer_mode -> . INT
    (30) boolean_mode -> . BOOL
    (31) character_mode -> . CHAR
    (32) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (33) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (35) discrete_mode_name -> . identifier

    ID              shift and go to state 12
    INT             shift and go to state 39
    BOOL            shift and go to state 30
    CHAR            shift and go to state 37

    identifier                     shift and go to state 36
    discrete_mode                  shift and go to state 29
    discrete_mode_name             shift and go to state 33
    mode_name                      shift and go to state 38
    discrete_range_mode            shift and go to state 31
    character_mode                 shift and go to state 32
    boolean_mode                   shift and go to state 28
    integer_mode                   shift and go to state 34
    mode                           shift and go to state 46

state 26

    (7) declaration_statement -> DCL declaration_list SEMICOL .

    DCL             reduce using rule 7 (declaration_statement -> DCL declaration_list SEMICOL .)
    SYN             reduce using rule 7 (declaration_statement -> DCL declaration_list SEMICOL .)
    TYPE            reduce using rule 7 (declaration_statement -> DCL declaration_list SEMICOL .)
    $end            reduce using rule 7 (declaration_statement -> DCL declaration_list SEMICOL .)


state 27

    (10) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode initialization
    (13) declaration -> . identifier_list mode
    (39) identifier_list -> . identifier
    (40) identifier_list -> . identifier_list COMMA identifier
    (41) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 10
    declaration                    shift and go to state 47
    identifier_list                shift and go to state 18

state 28

    (26) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 26 (discrete_mode -> boolean_mode .)
    SEMICOL         reduce using rule 26 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 26 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 26 (discrete_mode -> boolean_mode .)


state 29

    (24) mode -> discrete_mode .
    (33) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 24 (mode -> discrete_mode .)
    SEMICOL         reduce using rule 24 (mode -> discrete_mode .)
    COMMA           reduce using rule 24 (mode -> discrete_mode .)
    LPAREN          shift and go to state 48


state 30

    (30) boolean_mode -> BOOL .

    LPAREN          reduce using rule 30 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 30 (boolean_mode -> BOOL .)
    SEMICOL         reduce using rule 30 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 30 (boolean_mode -> BOOL .)


state 31

    (28) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 28 (discrete_mode -> discrete_range_mode .)
    SEMICOL         reduce using rule 28 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 28 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 28 (discrete_mode -> discrete_range_mode .)


state 32

    (27) discrete_mode -> character_mode .

    LPAREN          reduce using rule 27 (discrete_mode -> character_mode .)
    SEMICOL         reduce using rule 27 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 27 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 27 (discrete_mode -> character_mode .)


state 33

    (32) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 49


state 34

    (25) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 25 (discrete_mode -> integer_mode .)
    SEMICOL         reduce using rule 25 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 25 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 25 (discrete_mode -> integer_mode .)


state 35

    (12) declaration -> identifier_list mode . initialization
    (13) declaration -> identifier_list mode .
    (14) initialization -> . ASSIGN expression

    SEMICOL         reduce using rule 13 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 51

    initialization                 shift and go to state 50

state 36

    (34) mode_name -> identifier .
    (35) discrete_mode_name -> identifier .

    SEMICOL         reduce using rule 34 (mode_name -> identifier .)
    COMMA           reduce using rule 34 (mode_name -> identifier .)
    ASSIGN          reduce using rule 34 (mode_name -> identifier .)
    LPAREN          reduce using rule 35 (discrete_mode_name -> identifier .)


state 37

    (31) character_mode -> CHAR .

    LPAREN          reduce using rule 31 (character_mode -> CHAR .)
    SEMICOL         reduce using rule 31 (character_mode -> CHAR .)
    COMMA           reduce using rule 31 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 31 (character_mode -> CHAR .)


state 38

    (23) mode -> mode_name .

    ASSIGN          reduce using rule 23 (mode -> mode_name .)
    SEMICOL         reduce using rule 23 (mode -> mode_name .)
    COMMA           reduce using rule 23 (mode -> mode_name .)


state 39

    (29) integer_mode -> INT .

    LPAREN          reduce using rule 29 (integer_mode -> INT .)
    ASSIGN          reduce using rule 29 (integer_mode -> INT .)
    SEMICOL         reduce using rule 29 (integer_mode -> INT .)
    COMMA           reduce using rule 29 (integer_mode -> INT .)


state 40

    (8) synonym_statement -> SYN synonym_list SEMICOL .

    DCL             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMICOL .)
    SYN             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMICOL .)
    TYPE            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMICOL .)
    $end            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMICOL .)


state 41

    (15) synonym_list -> synonym_list COMMA . synonym_definition
    (17) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (18) synonym_definition -> . identifier_list ASSIGN constant_expression
    (39) identifier_list -> . identifier
    (40) identifier_list -> . identifier_list COMMA identifier
    (41) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 10
    identifier_list                shift and go to state 20
    synonym_definition             shift and go to state 52

state 42

    (17) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 53


state 43

    (18) synonym_definition -> identifier_list ASSIGN . constant_expression
    (19) constant_expression -> . expression
    (42) expression -> . operand0
    (43) operand0 -> . operand1
    (44) operand0 -> . operand0 operator1 operand1
    (56) operand1 -> . operand2
    (57) operand1 -> . operand1 operator2 operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    operand2                       shift and go to state 54
    monadic_operator               shift and go to state 56
    constant_expression            shift and go to state 59
    operand1                       shift and go to state 63
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    expression                     shift and go to state 55
    operand0                       shift and go to state 64

state 44

    (20) newmode_list -> newmode_list COMMA mode_definition .

    SEMICOL         reduce using rule 20 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 20 (newmode_list -> newmode_list COMMA mode_definition .)


state 45

    (40) identifier_list -> identifier_list COMMA identifier .

    ASSIGN          reduce using rule 40 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 40 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 40 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 40 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 40 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 40 (identifier_list -> identifier_list COMMA identifier .)


state 46

    (22) mode_definition -> identifier_list ASSIGN mode .

    SEMICOL         reduce using rule 22 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 22 (mode_definition -> identifier_list ASSIGN mode .)


state 47

    (10) declaration_list -> declaration_list COMMA declaration .

    SEMICOL         reduce using rule 10 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration_list COMMA declaration .)


state 48

    (33) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (36) literal_range -> . lower_bound COLON upper_bound
    (37) lower_bound -> . expression
    (42) expression -> . operand0
    (43) operand0 -> . operand1
    (44) operand0 -> . operand0 operator1 operand1
    (56) operand1 -> . operand2
    (57) operand1 -> . operand1 operator2 operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    lower_bound                    shift and go to state 66
    literal_range                  shift and go to state 65
    monadic_operator               shift and go to state 56
    operand2                       shift and go to state 54
    expression                     shift and go to state 67
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    operand1                       shift and go to state 63
    operand0                       shift and go to state 64

state 49

    (32) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (36) literal_range -> . lower_bound COLON upper_bound
    (37) lower_bound -> . expression
    (42) expression -> . operand0
    (43) operand0 -> . operand1
    (44) operand0 -> . operand0 operator1 operand1
    (56) operand1 -> . operand2
    (57) operand1 -> . operand1 operator2 operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    lower_bound                    shift and go to state 66
    literal_range                  shift and go to state 68
    monadic_operator               shift and go to state 56
    operand2                       shift and go to state 54
    operand1                       shift and go to state 63
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    expression                     shift and go to state 67
    operand0                       shift and go to state 64

state 50

    (12) declaration -> identifier_list mode initialization .

    SEMICOL         reduce using rule 12 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode initialization .)


state 51

    (14) initialization -> ASSIGN . expression
    (42) expression -> . operand0
    (43) operand0 -> . operand1
    (44) operand0 -> . operand0 operator1 operand1
    (56) operand1 -> . operand2
    (57) operand1 -> . operand1 operator2 operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    operand2                       shift and go to state 54
    operand1                       shift and go to state 63
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    expression                     shift and go to state 69
    operand0                       shift and go to state 64
    monadic_operator               shift and go to state 56

state 52

    (15) synonym_list -> synonym_list COMMA synonym_definition .

    SEMICOL         reduce using rule 15 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 15 (synonym_list -> synonym_list COMMA synonym_definition .)


state 53

    (17) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (19) constant_expression -> . expression
    (42) expression -> . operand0
    (43) operand0 -> . operand1
    (44) operand0 -> . operand0 operator1 operand1
    (56) operand1 -> . operand2
    (57) operand1 -> . operand1 operator2 operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    operand2                       shift and go to state 54
    monadic_operator               shift and go to state 56
    constant_expression            shift and go to state 70
    expression                     shift and go to state 55
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    operand1                       shift and go to state 63
    operand0                       shift and go to state 64

state 54

    (56) operand1 -> operand2 .
    (62) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (63) arithmetic_multiplicative_operator -> . TIMES
    (64) arithmetic_multiplicative_operator -> . DIVIDE
    (65) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 56 (operand1 -> operand2 .)
    MINUS           reduce using rule 56 (operand1 -> operand2 .)
    AND             reduce using rule 56 (operand1 -> operand2 .)
    OR              reduce using rule 56 (operand1 -> operand2 .)
    EQUALS          reduce using rule 56 (operand1 -> operand2 .)
    DIF             reduce using rule 56 (operand1 -> operand2 .)
    GTR             reduce using rule 56 (operand1 -> operand2 .)
    GEQ             reduce using rule 56 (operand1 -> operand2 .)
    LSS             reduce using rule 56 (operand1 -> operand2 .)
    LEQ             reduce using rule 56 (operand1 -> operand2 .)
    IN              reduce using rule 56 (operand1 -> operand2 .)
    RPAREN          reduce using rule 56 (operand1 -> operand2 .)
    SEMICOL         reduce using rule 56 (operand1 -> operand2 .)
    COMMA           reduce using rule 56 (operand1 -> operand2 .)
    COLON           reduce using rule 56 (operand1 -> operand2 .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 73
    PERC            shift and go to state 74

    arithmetic_multiplicative_operator shift and go to state 72

state 55

    (19) constant_expression -> expression .

    SEMICOL         reduce using rule 19 (constant_expression -> expression .)
    COMMA           reduce using rule 19 (constant_expression -> expression .)


state 56

    (66) operand3 -> monadic_operator . operand4
    (70) operand4 -> . ICONST

    ICONST          shift and go to state 58

    operand4                       shift and go to state 75

state 57

    (69) monadic_operator -> NOT .

    ICONST          reduce using rule 69 (monadic_operator -> NOT .)


state 58

    (70) operand4 -> ICONST .

    TIMES           reduce using rule 70 (operand4 -> ICONST .)
    DIVIDE          reduce using rule 70 (operand4 -> ICONST .)
    PERC            reduce using rule 70 (operand4 -> ICONST .)
    PLUS            reduce using rule 70 (operand4 -> ICONST .)
    MINUS           reduce using rule 70 (operand4 -> ICONST .)
    AND             reduce using rule 70 (operand4 -> ICONST .)
    OR              reduce using rule 70 (operand4 -> ICONST .)
    EQUALS          reduce using rule 70 (operand4 -> ICONST .)
    DIF             reduce using rule 70 (operand4 -> ICONST .)
    GTR             reduce using rule 70 (operand4 -> ICONST .)
    GEQ             reduce using rule 70 (operand4 -> ICONST .)
    LSS             reduce using rule 70 (operand4 -> ICONST .)
    LEQ             reduce using rule 70 (operand4 -> ICONST .)
    IN              reduce using rule 70 (operand4 -> ICONST .)
    SEMICOL         reduce using rule 70 (operand4 -> ICONST .)
    COMMA           reduce using rule 70 (operand4 -> ICONST .)
    COLON           reduce using rule 70 (operand4 -> ICONST .)
    RPAREN          reduce using rule 70 (operand4 -> ICONST .)


state 59

    (18) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMICOL         reduce using rule 18 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    COMMA           reduce using rule 18 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 60

    (67) operand3 -> operand4 .

    TIMES           reduce using rule 67 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 67 (operand3 -> operand4 .)
    PERC            reduce using rule 67 (operand3 -> operand4 .)
    PLUS            reduce using rule 67 (operand3 -> operand4 .)
    MINUS           reduce using rule 67 (operand3 -> operand4 .)
    AND             reduce using rule 67 (operand3 -> operand4 .)
    OR              reduce using rule 67 (operand3 -> operand4 .)
    EQUALS          reduce using rule 67 (operand3 -> operand4 .)
    DIF             reduce using rule 67 (operand3 -> operand4 .)
    GTR             reduce using rule 67 (operand3 -> operand4 .)
    GEQ             reduce using rule 67 (operand3 -> operand4 .)
    LSS             reduce using rule 67 (operand3 -> operand4 .)
    LEQ             reduce using rule 67 (operand3 -> operand4 .)
    IN              reduce using rule 67 (operand3 -> operand4 .)
    SEMICOL         reduce using rule 67 (operand3 -> operand4 .)
    COMMA           reduce using rule 67 (operand3 -> operand4 .)
    COLON           reduce using rule 67 (operand3 -> operand4 .)
    RPAREN          reduce using rule 67 (operand3 -> operand4 .)


state 61

    (68) monadic_operator -> MINUS .

    ICONST          reduce using rule 68 (monadic_operator -> MINUS .)


state 62

    (61) operand2 -> operand3 .

    TIMES           reduce using rule 61 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 61 (operand2 -> operand3 .)
    PERC            reduce using rule 61 (operand2 -> operand3 .)
    PLUS            reduce using rule 61 (operand2 -> operand3 .)
    MINUS           reduce using rule 61 (operand2 -> operand3 .)
    AND             reduce using rule 61 (operand2 -> operand3 .)
    OR              reduce using rule 61 (operand2 -> operand3 .)
    EQUALS          reduce using rule 61 (operand2 -> operand3 .)
    DIF             reduce using rule 61 (operand2 -> operand3 .)
    GTR             reduce using rule 61 (operand2 -> operand3 .)
    GEQ             reduce using rule 61 (operand2 -> operand3 .)
    LSS             reduce using rule 61 (operand2 -> operand3 .)
    LEQ             reduce using rule 61 (operand2 -> operand3 .)
    IN              reduce using rule 61 (operand2 -> operand3 .)
    SEMICOL         reduce using rule 61 (operand2 -> operand3 .)
    COMMA           reduce using rule 61 (operand2 -> operand3 .)
    RPAREN          reduce using rule 61 (operand2 -> operand3 .)
    COLON           reduce using rule 61 (operand2 -> operand3 .)


state 63

    (43) operand0 -> operand1 .
    (57) operand1 -> operand1 . operator2 operand2
    (58) operator2 -> . arithmetic_additive_operator
    (59) arithmetic_additive_operator -> . PLUS
    (60) arithmetic_additive_operator -> . MINUS

    AND             reduce using rule 43 (operand0 -> operand1 .)
    OR              reduce using rule 43 (operand0 -> operand1 .)
    EQUALS          reduce using rule 43 (operand0 -> operand1 .)
    DIF             reduce using rule 43 (operand0 -> operand1 .)
    GTR             reduce using rule 43 (operand0 -> operand1 .)
    GEQ             reduce using rule 43 (operand0 -> operand1 .)
    LSS             reduce using rule 43 (operand0 -> operand1 .)
    LEQ             reduce using rule 43 (operand0 -> operand1 .)
    IN              reduce using rule 43 (operand0 -> operand1 .)
    SEMICOL         reduce using rule 43 (operand0 -> operand1 .)
    COMMA           reduce using rule 43 (operand0 -> operand1 .)
    RPAREN          reduce using rule 43 (operand0 -> operand1 .)
    COLON           reduce using rule 43 (operand0 -> operand1 .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78

    operator2                      shift and go to state 79
    arithmetic_additive_operator   shift and go to state 76

state 64

    (42) expression -> operand0 .
    (44) operand0 -> operand0 . operator1 operand1
    (45) operator1 -> . relational_operator
    (46) operator1 -> . membership_operator
    (47) relational_operator -> . AND
    (48) relational_operator -> . OR
    (49) relational_operator -> . EQUALS
    (50) relational_operator -> . DIF
    (51) relational_operator -> . GTR
    (52) relational_operator -> . GEQ
    (53) relational_operator -> . LSS
    (54) relational_operator -> . LEQ
    (55) membership_operator -> . IN

    SEMICOL         reduce using rule 42 (expression -> operand0 .)
    COMMA           reduce using rule 42 (expression -> operand0 .)
    COLON           reduce using rule 42 (expression -> operand0 .)
    RPAREN          reduce using rule 42 (expression -> operand0 .)
    AND             shift and go to state 84
    OR              shift and go to state 90
    EQUALS          shift and go to state 80
    DIF             shift and go to state 89
    GTR             shift and go to state 88
    GEQ             shift and go to state 87
    LSS             shift and go to state 82
    LEQ             shift and go to state 86
    IN              shift and go to state 83

    operator1                      shift and go to state 85
    membership_operator            shift and go to state 81
    relational_operator            shift and go to state 91

state 65

    (33) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 92


state 66

    (36) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 93


state 67

    (37) lower_bound -> expression .

    COLON           reduce using rule 37 (lower_bound -> expression .)


state 68

    (32) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 94


state 69

    (14) initialization -> ASSIGN expression .

    SEMICOL         reduce using rule 14 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 14 (initialization -> ASSIGN expression .)


state 70

    (17) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMICOL         reduce using rule 17 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    COMMA           reduce using rule 17 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 71

    (63) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 63 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 63 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 63 (arithmetic_multiplicative_operator -> TIMES .)


state 72

    (62) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    operand4                       shift and go to state 60
    monadic_operator               shift and go to state 56
    operand3                       shift and go to state 95

state 73

    (64) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 64 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 64 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 64 (arithmetic_multiplicative_operator -> DIVIDE .)


state 74

    (65) arithmetic_multiplicative_operator -> PERC .

    MINUS           reduce using rule 65 (arithmetic_multiplicative_operator -> PERC .)
    NOT             reduce using rule 65 (arithmetic_multiplicative_operator -> PERC .)
    ICONST          reduce using rule 65 (arithmetic_multiplicative_operator -> PERC .)


state 75

    (66) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    PERC            reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    EQUALS          reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    DIF             reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    GTR             reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    GEQ             reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    LSS             reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    LEQ             reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    SEMICOL         reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 66 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 66 (operand3 -> monadic_operator operand4 .)


state 76

    (58) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 58 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 58 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 58 (operator2 -> arithmetic_additive_operator .)


state 77

    (59) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 59 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 59 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 59 (arithmetic_additive_operator -> PLUS .)


state 78

    (60) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 60 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 60 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 60 (arithmetic_additive_operator -> MINUS .)


state 79

    (57) operand1 -> operand1 operator2 . operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    operand2                       shift and go to state 96
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    monadic_operator               shift and go to state 56

state 80

    (49) relational_operator -> EQUALS .

    MINUS           reduce using rule 49 (relational_operator -> EQUALS .)
    NOT             reduce using rule 49 (relational_operator -> EQUALS .)
    ICONST          reduce using rule 49 (relational_operator -> EQUALS .)


state 81

    (46) operator1 -> membership_operator .

    MINUS           reduce using rule 46 (operator1 -> membership_operator .)
    NOT             reduce using rule 46 (operator1 -> membership_operator .)
    ICONST          reduce using rule 46 (operator1 -> membership_operator .)


state 82

    (53) relational_operator -> LSS .

    MINUS           reduce using rule 53 (relational_operator -> LSS .)
    NOT             reduce using rule 53 (relational_operator -> LSS .)
    ICONST          reduce using rule 53 (relational_operator -> LSS .)


state 83

    (55) membership_operator -> IN .

    MINUS           reduce using rule 55 (membership_operator -> IN .)
    NOT             reduce using rule 55 (membership_operator -> IN .)
    ICONST          reduce using rule 55 (membership_operator -> IN .)


state 84

    (47) relational_operator -> AND .

    MINUS           reduce using rule 47 (relational_operator -> AND .)
    NOT             reduce using rule 47 (relational_operator -> AND .)
    ICONST          reduce using rule 47 (relational_operator -> AND .)


state 85

    (44) operand0 -> operand0 operator1 . operand1
    (56) operand1 -> . operand2
    (57) operand1 -> . operand1 operator2 operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    operand2                       shift and go to state 54
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    operand1                       shift and go to state 97
    monadic_operator               shift and go to state 56

state 86

    (54) relational_operator -> LEQ .

    MINUS           reduce using rule 54 (relational_operator -> LEQ .)
    NOT             reduce using rule 54 (relational_operator -> LEQ .)
    ICONST          reduce using rule 54 (relational_operator -> LEQ .)


state 87

    (52) relational_operator -> GEQ .

    MINUS           reduce using rule 52 (relational_operator -> GEQ .)
    NOT             reduce using rule 52 (relational_operator -> GEQ .)
    ICONST          reduce using rule 52 (relational_operator -> GEQ .)


state 88

    (51) relational_operator -> GTR .

    MINUS           reduce using rule 51 (relational_operator -> GTR .)
    NOT             reduce using rule 51 (relational_operator -> GTR .)
    ICONST          reduce using rule 51 (relational_operator -> GTR .)


state 89

    (50) relational_operator -> DIF .

    MINUS           reduce using rule 50 (relational_operator -> DIF .)
    NOT             reduce using rule 50 (relational_operator -> DIF .)
    ICONST          reduce using rule 50 (relational_operator -> DIF .)


state 90

    (48) relational_operator -> OR .

    MINUS           reduce using rule 48 (relational_operator -> OR .)
    NOT             reduce using rule 48 (relational_operator -> OR .)
    ICONST          reduce using rule 48 (relational_operator -> OR .)


state 91

    (45) operator1 -> relational_operator .

    MINUS           reduce using rule 45 (operator1 -> relational_operator .)
    NOT             reduce using rule 45 (operator1 -> relational_operator .)
    ICONST          reduce using rule 45 (operator1 -> relational_operator .)


state 92

    (33) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 33 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 33 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 33 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 33 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 93

    (36) literal_range -> lower_bound COLON . upper_bound
    (38) upper_bound -> . expression
    (42) expression -> . operand0
    (43) operand0 -> . operand1
    (44) operand0 -> . operand0 operator1 operand1
    (56) operand1 -> . operand2
    (57) operand1 -> . operand1 operator2 operand2
    (61) operand2 -> . operand3
    (62) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (66) operand3 -> . monadic_operator operand4
    (67) operand3 -> . operand4
    (68) monadic_operator -> . MINUS
    (69) monadic_operator -> . NOT
    (70) operand4 -> . ICONST

    MINUS           shift and go to state 61
    NOT             shift and go to state 57
    ICONST          shift and go to state 58

    monadic_operator               shift and go to state 56
    operand2                       shift and go to state 54
    expression                     shift and go to state 98
    operand4                       shift and go to state 60
    operand3                       shift and go to state 62
    operand1                       shift and go to state 63
    upper_bound                    shift and go to state 99
    operand0                       shift and go to state 64

state 94

    (32) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 32 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 32 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 32 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 32 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 95

    (62) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PERC            reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUALS          reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIF             reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTR             reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GEQ             reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LSS             reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LEQ             reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMICOL         reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 62 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 96

    (57) operand1 -> operand1 operator2 operand2 .
    (62) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (63) arithmetic_multiplicative_operator -> . TIMES
    (64) arithmetic_multiplicative_operator -> . DIVIDE
    (65) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    EQUALS          reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    DIF             reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    GTR             reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    GEQ             reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    LSS             reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    LEQ             reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    SEMICOL         reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 57 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 73
    PERC            shift and go to state 74

    arithmetic_multiplicative_operator shift and go to state 72

state 97

    (44) operand0 -> operand0 operator1 operand1 .
    (57) operand1 -> operand1 . operator2 operand2
    (58) operator2 -> . arithmetic_additive_operator
    (59) arithmetic_additive_operator -> . PLUS
    (60) arithmetic_additive_operator -> . MINUS

    AND             reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    EQUALS          reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    DIF             reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    GTR             reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    GEQ             reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    LSS             reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    LEQ             reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    SEMICOL         reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 44 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78

    arithmetic_additive_operator   shift and go to state 76
    operator2                      shift and go to state 79

state 98

    (38) upper_bound -> expression .

    RPAREN          reduce using rule 38 (upper_bound -> expression .)


state 99

    (36) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 36 (literal_range -> lower_bound COLON upper_bound .)

