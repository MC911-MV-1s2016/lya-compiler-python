Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    NOT
    PRINT
    SYS
    WHILE
    LCURL
    PERCASSIGN
    CONCATASSIGN
    THEN
    DCL
    ARROW
    CONCAT
    CHAR
    ELSE
    RBRACK
    OR
    AND
    CCONST
    LBRACK
    LSS
    BOOL
    TIMESASSIGN
    TYPE
    RCURL
    CIRCUMF
    SEMICOL
    ELSIF
    END
    READ
    REF
    LENGTH
    TRUE
    DIVIDEASSIGN
    EQUALS
    NULL
    ID
    DBLSLASH
    PROC
    LOWER
    LEQ
    EXIT
    DIF
    OD
    PRED
    ARRAY
    COMMA
    FALSE
    CHARS
    MINUSASSIGN
    PLUSASSIGN
    ASSIGN
    RESULT
    FOR
    SINGQUO
    GEQ
    INT
    UPPER
    DBLQUO
    SUCC
    DOWN
    PERC
    FI
    TO
    RETURNS
    RETURN
    IF
    BY
    DO
    SCONST
    LOC
    GTR
    IN
    COLON
    NUM

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     term -> term TIMES factor
Rule 5     term -> term DIVIDE factor
Rule 6     term -> factor
Rule 7     factor -> ICONST
Rule 8     factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 
ARRAY                : 
ARROW                : 
ASSIGN               : 
BOOL                 : 
BY                   : 
CCONST               : 
CHAR                 : 
CHARS                : 
CIRCUMF              : 
COLON                : 
COMMA                : 
CONCAT               : 
CONCATASSIGN         : 
DBLQUO               : 
DBLSLASH             : 
DCL                  : 
DIF                  : 
DIVIDE               : 5
DIVIDEASSIGN         : 
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUALS               : 
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GEQ                  : 
GTR                  : 
ICONST               : 7
ID                   : 
IF                   : 
IN                   : 
INT                  : 
LBRACK               : 
LCURL                : 
LENGTH               : 
LEQ                  : 
LOC                  : 
LOWER                : 
LPAREN               : 8
LSS                  : 
MINUS                : 2
MINUSASSIGN          : 
NOT                  : 
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 
PERC                 : 
PERCASSIGN           : 
PLUS                 : 1
PLUSASSIGN           : 
PRED                 : 
PRINT                : 
PROC                 : 
RBRACK               : 
RCURL                : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 8
SCONST               : 
SEMICOL              : 
SINGQUO              : 
SUCC                 : 
SYS                  : 
THEN                 : 
TIMES                : 4
TIMESASSIGN          : 
TO                   : 
TRUE                 : 
TYPE                 : 
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 8 0
factor               : 4 5 6
term                 : 1 2 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . ICONST
    (8) factor -> . LPAREN expression RPAREN

    ICONST          shift and go to state 1
    LPAREN          shift and go to state 4

    expression                     shift and go to state 5
    factor                         shift and go to state 2
    term                           shift and go to state 3

state 1

    (7) factor -> ICONST .

    TIMES           reduce using rule 7 (factor -> ICONST .)
    DIVIDE          reduce using rule 7 (factor -> ICONST .)
    PLUS            reduce using rule 7 (factor -> ICONST .)
    MINUS           reduce using rule 7 (factor -> ICONST .)
    $end            reduce using rule 7 (factor -> ICONST .)
    RPAREN          reduce using rule 7 (factor -> ICONST .)


state 2

    (6) term -> factor .

    TIMES           reduce using rule 6 (term -> factor .)
    DIVIDE          reduce using rule 6 (term -> factor .)
    PLUS            reduce using rule 6 (term -> factor .)
    MINUS           reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    RPAREN          reduce using rule 6 (term -> factor .)


state 3

    (3) expression -> term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 6


state 4

    (8) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . ICONST
    (8) factor -> . LPAREN expression RPAREN

    ICONST          shift and go to state 1
    LPAREN          shift and go to state 4

    expression                     shift and go to state 8
    factor                         shift and go to state 2
    term                           shift and go to state 3

state 5

    (0) S' -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    PLUS            shift and go to state 10
    MINUS           shift and go to state 9


state 6

    (5) term -> term DIVIDE . factor
    (7) factor -> . ICONST
    (8) factor -> . LPAREN expression RPAREN

    ICONST          shift and go to state 1
    LPAREN          shift and go to state 4

    factor                         shift and go to state 11

state 7

    (4) term -> term TIMES . factor
    (7) factor -> . ICONST
    (8) factor -> . LPAREN expression RPAREN

    ICONST          shift and go to state 1
    LPAREN          shift and go to state 4

    factor                         shift and go to state 12

state 8

    (8) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 13
    PLUS            shift and go to state 10
    MINUS           shift and go to state 9


state 9

    (2) expression -> expression MINUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . ICONST
    (8) factor -> . LPAREN expression RPAREN

    ICONST          shift and go to state 1
    LPAREN          shift and go to state 4

    factor                         shift and go to state 2
    term                           shift and go to state 14

state 10

    (1) expression -> expression PLUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . ICONST
    (8) factor -> . LPAREN expression RPAREN

    ICONST          shift and go to state 1
    LPAREN          shift and go to state 4

    factor                         shift and go to state 2
    term                           shift and go to state 15

state 11

    (5) term -> term DIVIDE factor .

    TIMES           reduce using rule 5 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 5 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 5 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 5 (term -> term DIVIDE factor .)
    $end            reduce using rule 5 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 5 (term -> term DIVIDE factor .)


state 12

    (4) term -> term TIMES factor .

    TIMES           reduce using rule 4 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 4 (term -> term TIMES factor .)
    PLUS            reduce using rule 4 (term -> term TIMES factor .)
    MINUS           reduce using rule 4 (term -> term TIMES factor .)
    $end            reduce using rule 4 (term -> term TIMES factor .)
    RPAREN          reduce using rule 4 (term -> term TIMES factor .)


state 13

    (8) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (factor -> LPAREN expression RPAREN .)


state 14

    (2) expression -> expression MINUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 6


state 15

    (1) expression -> expression PLUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 6

