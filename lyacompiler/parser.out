Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    READ
    LOWER
    RCURL
    FOR
    MINUSASSIGN
    TIMESASSIGN
    CIRCUMF
    DBLSLASH
    NULL
    TRUE
    ARROW
    WHILE
    RESULT
    SUCC
    DIVIDEASSIGN
    DO
    UPPER
    PERCASSIGN
    PRINT
    SINGQUO
    NUM
    FALSE
    PLUSASSIGN
    CCONST
    SCONST
    RETURN
    DBLQUO
    DOWN
    LENGTH
    CONCATASSIGN
    TO
    OD
    LCURL
    PRED
    BY

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMICOL
Rule 10    synonym_statement -> SYN synonym_list SEMICOL
Rule 11    newmode_statement -> TYPE newmode_list SEMICOL
Rule 12    procedure_statement -> label_id COLON procedure_definition SEMICOL
Rule 13    action_statement -> label_id COLON action SEMICOL
Rule 14    action_statement -> action SEMICOL
Rule 15    declaration_list -> declaration_list COMMA declaration
Rule 16    declaration_list -> declaration
Rule 17    declaration -> identifier_list mode initialization
Rule 18    declaration -> identifier_list mode
Rule 19    initialization -> ASSIGN expression
Rule 20    synonym_list -> synonym_list COMMA synonym_definition
Rule 21    synonym_list -> synonym_definition
Rule 22    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 23    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 24    constant_expression -> expression
Rule 25    newmode_list -> newmode_list COMMA mode_definition
Rule 26    newmode_list -> mode_definition
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    mode -> mode_name
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    mode_name -> identifier
Rule 42    discrete_mode_name -> identifier
Rule 43    literal_range -> lower_bound COLON upper_bound
Rule 44    lower_bound -> expression
Rule 45    upper_bound -> expression
Rule 46    reference_mode -> REF mode
Rule 47    composite_mode -> string_mode
Rule 48    composite_mode -> array_mode
Rule 49    string_mode -> CHARS LBRACK string_length RBRACK
Rule 50    string_length -> integer_literal
Rule 51    array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode
Rule 52    index_mode_list -> index_mode_list COMMA index_mode
Rule 53    index_mode_list -> index_mode
Rule 54    index_mode -> discrete_mode
Rule 55    index_mode -> literal_range
Rule 56    element_mode -> mode
Rule 57    identifier_list -> identifier
Rule 58    identifier_list -> identifier_list COMMA identifier
Rule 59    identifier -> ID
Rule 60    integer_literal -> ICONST
Rule 61    expression -> operand0
Rule 62    boolean_expression -> expression
Rule 63    operand0 -> operand1
Rule 64    operand0 -> operand0 operator1 operand1
Rule 65    operator1 -> relational_operator
Rule 66    operator1 -> membership_operator
Rule 67    relational_operator -> AND
Rule 68    relational_operator -> OR
Rule 69    relational_operator -> EQUALS
Rule 70    relational_operator -> DIF
Rule 71    relational_operator -> GTR
Rule 72    relational_operator -> GEQ
Rule 73    relational_operator -> LSS
Rule 74    relational_operator -> LEQ
Rule 75    membership_operator -> IN
Rule 76    operand1 -> operand2
Rule 77    operand1 -> operand1 operator2 operand2
Rule 78    operator2 -> arithmetic_additive_operator
Rule 79    operator2 -> string_concatenation_operator
Rule 80    arithmetic_additive_operator -> PLUS
Rule 81    arithmetic_additive_operator -> MINUS
Rule 82    string_concatenation_operator -> CONCAT
Rule 83    operand2 -> operand3
Rule 84    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 85    arithmetic_multiplicative_operator -> TIMES
Rule 86    arithmetic_multiplicative_operator -> DIVIDE
Rule 87    arithmetic_multiplicative_operator -> PERC
Rule 88    operand3 -> monadic_operator operand4
Rule 89    operand3 -> operand4
Rule 90    monadic_operator -> MINUS
Rule 91    monadic_operator -> NOT
Rule 92    operand4 -> ICONST
Rule 93    action_statement_list -> action_statement_list action_statement
Rule 94    action_statement_list -> action_statement
Rule 95    label_id -> identifier
Rule 96    action -> bracketed_action
Rule 97    action -> exit_action
Rule 98    bracketed_action -> if_action
Rule 99    if_action -> IF boolean_expression then_clause else_clause FI
Rule 100   if_action -> IF boolean_expression then_clause FI
Rule 101   then_clause -> THEN action_statement_list
Rule 102   then_clause -> THEN empty
Rule 103   else_clause -> ELSE action_statement_list
Rule 104   else_clause -> ELSE empty
Rule 105   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 106   else_clause -> ELSIF boolean_expression then_clause
Rule 107   exit_action -> EXIT label_id
Rule 108   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
Rule 109   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
Rule 110   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
Rule 111   procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END
Rule 112   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END
Rule 113   procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END
Rule 114   procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END
Rule 115   procedure_definition -> PROC LPAREN RPAREN SEMICOL END
Rule 116   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 117   formal_parameter_list -> formal_parameter
Rule 118   formal_parameter -> identifier_list parameter_spec
Rule 119   parameter_spec -> mode parameter_attribute
Rule 120   parameter_spec -> mode
Rule 121   parameter_attribute -> LOC
Rule 122   result_spec -> RETURNS LPAREN mode result_attribute RPAREN
Rule 123   result_spec -> RETURNS LPAREN mode RPAREN
Rule 124   result_attribute -> LOC
Rule 125   empty -> <empty>

Terminals, with rules where they appear

AND                  : 67
ARRAY                : 51
ARROW                : 
ASSIGN               : 19 22 23 27
BOOL                 : 37
BY                   : 
CCONST               : 
CHAR                 : 38
CHARS                : 49
CIRCUMF              : 
COLON                : 12 13 43
COMMA                : 15 20 25 52 58 116
CONCAT               : 82
CONCATASSIGN         : 
DBLQUO               : 
DBLSLASH             : 
DCL                  : 9
DIF                  : 70
DIVIDE               : 86
DIVIDEASSIGN         : 
DO                   : 
DOWN                 : 
ELSE                 : 103 104
ELSIF                : 105 106
END                  : 108 109 110 111 112 113 114 115
EQUALS               : 69
EXIT                 : 107
FALSE                : 
FI                   : 99 100
FOR                  : 
GEQ                  : 72
GTR                  : 71
ICONST               : 60 92
ID                   : 59
IF                   : 99 100
IN                   : 75
INT                  : 36
LBRACK               : 49 51
LCURL                : 
LENGTH               : 
LEQ                  : 74
LOC                  : 121 124
LOWER                : 
LPAREN               : 39 40 108 109 110 111 112 113 114 115 122 123
LSS                  : 73
MINUS                : 81 90
MINUSASSIGN          : 
NOT                  : 91
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 68
PERC                 : 87
PERCASSIGN           : 
PLUS                 : 80
PLUSASSIGN           : 
PRED                 : 
PRINT                : 
PROC                 : 108 109 110 111 112 113 114 115
RBRACK               : 49 51
RCURL                : 
READ                 : 
REF                  : 46
RESULT               : 
RETURN               : 
RETURNS              : 122 123
RPAREN               : 39 40 108 109 110 111 112 113 114 115 122 123
SCONST               : 
SEMICOL              : 9 10 11 12 13 14 108 109 110 111 112 113 114 115
SINGQUO              : 
SUCC                 : 
SYN                  : 10
THEN                 : 101 102
TIMES                : 85
TIMESASSIGN          : 
TO                   : 
TRUE                 : 
TYPE                 : 11
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

action               : 13 14
action_statement     : 8 93 94
action_statement_list : 93 101 103
arithmetic_additive_operator : 78
arithmetic_multiplicative_operator : 84
array_mode           : 48
boolean_expression   : 99 100 105 106
boolean_mode         : 33
bracketed_action     : 96
character_mode       : 34
composite_mode       : 31
constant_expression  : 22 23
declaration          : 15 16
declaration_list     : 9 15
declaration_statement : 4
discrete_mode        : 29 40 54
discrete_mode_name   : 39
discrete_range_mode  : 35
element_mode         : 51
else_clause          : 99 105
empty                : 102 104
exit_action          : 97
expression           : 19 24 44 45 62
formal_parameter     : 116 117
formal_parameter_list : 108 109 110 112 116
identifier           : 41 42 57 58 95
identifier_list      : 17 18 22 23 27 58 118
if_action            : 98
index_mode           : 52 53
index_mode_list      : 51 52
initialization       : 17
integer_literal      : 50
integer_mode         : 32
label_id             : 12 13 107
literal_range        : 39 40 55
lower_bound          : 43
membership_operator  : 66
mode                 : 17 18 22 27 46 56 119 120 122 123
mode_definition      : 25 26
mode_name            : 28
monadic_operator     : 88
newmode_list         : 11 25
newmode_statement    : 6
operand0             : 61 64
operand1             : 63 64 77
operand2             : 76 77 84
operand3             : 83 84
operand4             : 88 89
operator1            : 64
operator2            : 77
parameter_attribute  : 119
parameter_spec       : 118
procedure_definition : 12
procedure_statement  : 7
program              : 0
reference_mode       : 30
relational_operator  : 65
result_attribute     : 122
result_spec          : 108 109 111 113
statement            : 2 3
statement_list       : 1 2 108 110 111 114
string_concatenation_operator : 79
string_length        : 49
string_mode          : 47
synonym_definition   : 20 21
synonym_list         : 10 20
synonym_statement    : 5
then_clause          : 99 100 105 106
upper_bound          : 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    program                        shift and go to state 17
    synonym_statement              shift and go to state 6
    exit_action                    shift and go to state 15
    identifier                     shift and go to state 7
    statement_list                 shift and go to state 19
    statement                      shift and go to state 20

state 1

    (10) synonym_statement -> SYN . synonym_list SEMICOL
    (20) synonym_list -> . synonym_list COMMA synonym_definition
    (21) synonym_list -> . synonym_definition
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (23) synonym_definition -> . identifier_list ASSIGN constant_expression
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    synonym_definition             shift and go to state 21
    synonym_list                   shift and go to state 22
    identifier                     shift and go to state 23
    identifier_list                shift and go to state 24

state 2

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)
    END             reduce using rule 4 (statement -> declaration_statement .)


state 3

    (98) bracketed_action -> if_action .

    SEMICOL         reduce using rule 98 (bracketed_action -> if_action .)


state 4

    (14) action_statement -> action . SEMICOL

    SEMICOL         shift and go to state 25


state 5

    (96) action -> bracketed_action .

    SEMICOL         reduce using rule 96 (action -> bracketed_action .)


state 6

    (5) statement -> synonym_statement .

    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)
    END             reduce using rule 5 (statement -> synonym_statement .)


state 7

    (95) label_id -> identifier .

    COLON           reduce using rule 95 (label_id -> identifier .)
    SEMICOL         reduce using rule 95 (label_id -> identifier .)


state 8

    (59) identifier -> ID .

    COMMA           reduce using rule 59 (identifier -> ID .)
    REF             reduce using rule 59 (identifier -> ID .)
    ID              reduce using rule 59 (identifier -> ID .)
    INT             reduce using rule 59 (identifier -> ID .)
    BOOL            reduce using rule 59 (identifier -> ID .)
    CHAR            reduce using rule 59 (identifier -> ID .)
    CHARS           reduce using rule 59 (identifier -> ID .)
    ARRAY           reduce using rule 59 (identifier -> ID .)
    COLON           reduce using rule 59 (identifier -> ID .)
    ASSIGN          reduce using rule 59 (identifier -> ID .)
    SEMICOL         reduce using rule 59 (identifier -> ID .)
    LOC             reduce using rule 59 (identifier -> ID .)
    RPAREN          reduce using rule 59 (identifier -> ID .)
    LPAREN          reduce using rule 59 (identifier -> ID .)


state 9

    (12) procedure_statement -> label_id . COLON procedure_definition SEMICOL
    (13) action_statement -> label_id . COLON action SEMICOL

    COLON           shift and go to state 26


state 10

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)


state 11

    (99) if_action -> IF . boolean_expression then_clause else_clause FI
    (100) if_action -> IF . boolean_expression then_clause FI
    (62) boolean_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    operand4                       shift and go to state 29
    operand2                       shift and go to state 30
    boolean_expression             shift and go to state 31
    operand0                       shift and go to state 32
    expression                     shift and go to state 34
    monadic_operator               shift and go to state 37

state 12

    (9) declaration_statement -> DCL . declaration_list SEMICOL
    (15) declaration_list -> . declaration_list COMMA declaration
    (16) declaration_list -> . declaration
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 23
    declaration                    shift and go to state 38
    declaration_list               shift and go to state 39
    identifier_list                shift and go to state 40

state 13

    (107) exit_action -> EXIT . label_id
    (95) label_id -> . identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    label_id                       shift and go to state 41
    identifier                     shift and go to state 7

state 14

    (6) statement -> newmode_statement .

    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)
    END             reduce using rule 6 (statement -> newmode_statement .)


state 15

    (97) action -> exit_action .

    SEMICOL         reduce using rule 97 (action -> exit_action .)


state 16

    (7) statement -> procedure_statement .

    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)
    END             reduce using rule 7 (statement -> procedure_statement .)


state 17

    (0) S' -> program .



state 18

    (11) newmode_statement -> TYPE . newmode_list SEMICOL
    (25) newmode_list -> . newmode_list COMMA mode_definition
    (26) newmode_list -> . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    newmode_list                   shift and go to state 42
    mode_definition                shift and go to state 43
    identifier                     shift and go to state 23
    identifier_list                shift and go to state 44

state 19

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    identifier                     shift and go to state 7
    exit_action                    shift and go to state 15
    statement                      shift and go to state 45

state 20

    (3) statement_list -> statement .

    END             reduce using rule 3 (statement_list -> statement .)
    DCL             reduce using rule 3 (statement_list -> statement .)
    SYN             reduce using rule 3 (statement_list -> statement .)
    TYPE            reduce using rule 3 (statement_list -> statement .)
    ID              reduce using rule 3 (statement_list -> statement .)
    EXIT            reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 21

    (21) synonym_list -> synonym_definition .

    SEMICOL         reduce using rule 21 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 21 (synonym_list -> synonym_definition .)


state 22

    (10) synonym_statement -> SYN synonym_list . SEMICOL
    (20) synonym_list -> synonym_list . COMMA synonym_definition

    SEMICOL         shift and go to state 46
    COMMA           shift and go to state 47


state 23

    (57) identifier_list -> identifier .

    ASSIGN          reduce using rule 57 (identifier_list -> identifier .)
    COMMA           reduce using rule 57 (identifier_list -> identifier .)
    REF             reduce using rule 57 (identifier_list -> identifier .)
    ID              reduce using rule 57 (identifier_list -> identifier .)
    INT             reduce using rule 57 (identifier_list -> identifier .)
    BOOL            reduce using rule 57 (identifier_list -> identifier .)
    CHAR            reduce using rule 57 (identifier_list -> identifier .)
    CHARS           reduce using rule 57 (identifier_list -> identifier .)
    ARRAY           reduce using rule 57 (identifier_list -> identifier .)


state 24

    (22) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (23) synonym_definition -> identifier_list . ASSIGN constant_expression
    (58) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 56
    COMMA           shift and go to state 49
    REF             shift and go to state 52
    ID              shift and go to state 8
    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    CHARS           shift and go to state 57
    ARRAY           shift and go to state 50

    string_mode                    shift and go to state 48
    discrete_mode                  shift and go to state 60
    integer_mode                   shift and go to state 61
    reference_mode                 shift and go to state 51
    composite_mode                 shift and go to state 62
    array_mode                     shift and go to state 53
    identifier                     shift and go to state 63
    mode_name                      shift and go to state 65
    discrete_range_mode            shift and go to state 55
    boolean_mode                   shift and go to state 66
    mode                           shift and go to state 68
    discrete_mode_name             shift and go to state 58
    character_mode                 shift and go to state 59

state 25

    (14) action_statement -> action SEMICOL .

    END             reduce using rule 14 (action_statement -> action SEMICOL .)
    DCL             reduce using rule 14 (action_statement -> action SEMICOL .)
    SYN             reduce using rule 14 (action_statement -> action SEMICOL .)
    TYPE            reduce using rule 14 (action_statement -> action SEMICOL .)
    ID              reduce using rule 14 (action_statement -> action SEMICOL .)
    EXIT            reduce using rule 14 (action_statement -> action SEMICOL .)
    IF              reduce using rule 14 (action_statement -> action SEMICOL .)
    FI              reduce using rule 14 (action_statement -> action SEMICOL .)
    $end            reduce using rule 14 (action_statement -> action SEMICOL .)
    ELSE            reduce using rule 14 (action_statement -> action SEMICOL .)
    ELSIF           reduce using rule 14 (action_statement -> action SEMICOL .)


state 26

    (12) procedure_statement -> label_id COLON . procedure_definition SEMICOL
    (13) action_statement -> label_id COLON . action SEMICOL
    (108) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (109) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
    (110) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
    (111) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMICOL statement_list END
    (112) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMICOL END
    (113) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMICOL END
    (114) procedure_definition -> . PROC LPAREN RPAREN SEMICOL statement_list END
    (115) procedure_definition -> . PROC LPAREN RPAREN SEMICOL END
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    PROC            shift and go to state 71
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    procedure_definition           shift and go to state 69
    exit_action                    shift and go to state 15
    bracketed_action               shift and go to state 5
    if_action                      shift and go to state 3
    action                         shift and go to state 70

state 27

    (83) operand2 -> operand3 .

    TIMES           reduce using rule 83 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 83 (operand2 -> operand3 .)
    PERC            reduce using rule 83 (operand2 -> operand3 .)
    PLUS            reduce using rule 83 (operand2 -> operand3 .)
    MINUS           reduce using rule 83 (operand2 -> operand3 .)
    CONCAT          reduce using rule 83 (operand2 -> operand3 .)
    AND             reduce using rule 83 (operand2 -> operand3 .)
    OR              reduce using rule 83 (operand2 -> operand3 .)
    EQUALS          reduce using rule 83 (operand2 -> operand3 .)
    DIF             reduce using rule 83 (operand2 -> operand3 .)
    GTR             reduce using rule 83 (operand2 -> operand3 .)
    GEQ             reduce using rule 83 (operand2 -> operand3 .)
    LSS             reduce using rule 83 (operand2 -> operand3 .)
    LEQ             reduce using rule 83 (operand2 -> operand3 .)
    IN              reduce using rule 83 (operand2 -> operand3 .)
    COLON           reduce using rule 83 (operand2 -> operand3 .)
    SEMICOL         reduce using rule 83 (operand2 -> operand3 .)
    COMMA           reduce using rule 83 (operand2 -> operand3 .)
    THEN            reduce using rule 83 (operand2 -> operand3 .)
    RBRACK          reduce using rule 83 (operand2 -> operand3 .)
    RPAREN          reduce using rule 83 (operand2 -> operand3 .)


state 28

    (63) operand0 -> operand1 .
    (77) operand1 -> operand1 . operator2 operand2
    (78) operator2 -> . arithmetic_additive_operator
    (79) operator2 -> . string_concatenation_operator
    (80) arithmetic_additive_operator -> . PLUS
    (81) arithmetic_additive_operator -> . MINUS
    (82) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 63 (operand0 -> operand1 .)
    OR              reduce using rule 63 (operand0 -> operand1 .)
    EQUALS          reduce using rule 63 (operand0 -> operand1 .)
    DIF             reduce using rule 63 (operand0 -> operand1 .)
    GTR             reduce using rule 63 (operand0 -> operand1 .)
    GEQ             reduce using rule 63 (operand0 -> operand1 .)
    LSS             reduce using rule 63 (operand0 -> operand1 .)
    LEQ             reduce using rule 63 (operand0 -> operand1 .)
    IN              reduce using rule 63 (operand0 -> operand1 .)
    THEN            reduce using rule 63 (operand0 -> operand1 .)
    RBRACK          reduce using rule 63 (operand0 -> operand1 .)
    COMMA           reduce using rule 63 (operand0 -> operand1 .)
    RPAREN          reduce using rule 63 (operand0 -> operand1 .)
    COLON           reduce using rule 63 (operand0 -> operand1 .)
    SEMICOL         reduce using rule 63 (operand0 -> operand1 .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    CONCAT          shift and go to state 77

    operator2                      shift and go to state 75
    string_concatenation_operator  shift and go to state 76
    arithmetic_additive_operator   shift and go to state 74

state 29

    (89) operand3 -> operand4 .

    TIMES           reduce using rule 89 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 89 (operand3 -> operand4 .)
    PERC            reduce using rule 89 (operand3 -> operand4 .)
    PLUS            reduce using rule 89 (operand3 -> operand4 .)
    MINUS           reduce using rule 89 (operand3 -> operand4 .)
    CONCAT          reduce using rule 89 (operand3 -> operand4 .)
    AND             reduce using rule 89 (operand3 -> operand4 .)
    OR              reduce using rule 89 (operand3 -> operand4 .)
    EQUALS          reduce using rule 89 (operand3 -> operand4 .)
    DIF             reduce using rule 89 (operand3 -> operand4 .)
    GTR             reduce using rule 89 (operand3 -> operand4 .)
    GEQ             reduce using rule 89 (operand3 -> operand4 .)
    LSS             reduce using rule 89 (operand3 -> operand4 .)
    LEQ             reduce using rule 89 (operand3 -> operand4 .)
    IN              reduce using rule 89 (operand3 -> operand4 .)
    COLON           reduce using rule 89 (operand3 -> operand4 .)
    SEMICOL         reduce using rule 89 (operand3 -> operand4 .)
    COMMA           reduce using rule 89 (operand3 -> operand4 .)
    THEN            reduce using rule 89 (operand3 -> operand4 .)
    RBRACK          reduce using rule 89 (operand3 -> operand4 .)
    RPAREN          reduce using rule 89 (operand3 -> operand4 .)


state 30

    (76) operand1 -> operand2 .
    (84) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (85) arithmetic_multiplicative_operator -> . TIMES
    (86) arithmetic_multiplicative_operator -> . DIVIDE
    (87) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 76 (operand1 -> operand2 .)
    MINUS           reduce using rule 76 (operand1 -> operand2 .)
    CONCAT          reduce using rule 76 (operand1 -> operand2 .)
    AND             reduce using rule 76 (operand1 -> operand2 .)
    OR              reduce using rule 76 (operand1 -> operand2 .)
    EQUALS          reduce using rule 76 (operand1 -> operand2 .)
    DIF             reduce using rule 76 (operand1 -> operand2 .)
    GTR             reduce using rule 76 (operand1 -> operand2 .)
    GEQ             reduce using rule 76 (operand1 -> operand2 .)
    LSS             reduce using rule 76 (operand1 -> operand2 .)
    LEQ             reduce using rule 76 (operand1 -> operand2 .)
    IN              reduce using rule 76 (operand1 -> operand2 .)
    THEN            reduce using rule 76 (operand1 -> operand2 .)
    COLON           reduce using rule 76 (operand1 -> operand2 .)
    SEMICOL         reduce using rule 76 (operand1 -> operand2 .)
    COMMA           reduce using rule 76 (operand1 -> operand2 .)
    RBRACK          reduce using rule 76 (operand1 -> operand2 .)
    RPAREN          reduce using rule 76 (operand1 -> operand2 .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 80
    PERC            shift and go to state 79

    arithmetic_multiplicative_operator shift and go to state 81

state 31

    (99) if_action -> IF boolean_expression . then_clause else_clause FI
    (100) if_action -> IF boolean_expression . then_clause FI
    (101) then_clause -> . THEN action_statement_list
    (102) then_clause -> . THEN empty

    THEN            shift and go to state 83

    then_clause                    shift and go to state 82

state 32

    (61) expression -> operand0 .
    (64) operand0 -> operand0 . operator1 operand1
    (65) operator1 -> . relational_operator
    (66) operator1 -> . membership_operator
    (67) relational_operator -> . AND
    (68) relational_operator -> . OR
    (69) relational_operator -> . EQUALS
    (70) relational_operator -> . DIF
    (71) relational_operator -> . GTR
    (72) relational_operator -> . GEQ
    (73) relational_operator -> . LSS
    (74) relational_operator -> . LEQ
    (75) membership_operator -> . IN

    THEN            reduce using rule 61 (expression -> operand0 .)
    COLON           reduce using rule 61 (expression -> operand0 .)
    SEMICOL         reduce using rule 61 (expression -> operand0 .)
    COMMA           reduce using rule 61 (expression -> operand0 .)
    RBRACK          reduce using rule 61 (expression -> operand0 .)
    RPAREN          reduce using rule 61 (expression -> operand0 .)
    AND             shift and go to state 87
    OR              shift and go to state 86
    EQUALS          shift and go to state 94
    DIF             shift and go to state 85
    GTR             shift and go to state 91
    GEQ             shift and go to state 93
    LSS             shift and go to state 84
    LEQ             shift and go to state 92
    IN              shift and go to state 90

    operator1                      shift and go to state 88
    relational_operator            shift and go to state 89
    membership_operator            shift and go to state 95

state 33

    (90) monadic_operator -> MINUS .

    ICONST          reduce using rule 90 (monadic_operator -> MINUS .)


state 34

    (62) boolean_expression -> expression .

    THEN            reduce using rule 62 (boolean_expression -> expression .)


state 35

    (92) operand4 -> ICONST .

    TIMES           reduce using rule 92 (operand4 -> ICONST .)
    DIVIDE          reduce using rule 92 (operand4 -> ICONST .)
    PERC            reduce using rule 92 (operand4 -> ICONST .)
    PLUS            reduce using rule 92 (operand4 -> ICONST .)
    MINUS           reduce using rule 92 (operand4 -> ICONST .)
    CONCAT          reduce using rule 92 (operand4 -> ICONST .)
    AND             reduce using rule 92 (operand4 -> ICONST .)
    OR              reduce using rule 92 (operand4 -> ICONST .)
    EQUALS          reduce using rule 92 (operand4 -> ICONST .)
    DIF             reduce using rule 92 (operand4 -> ICONST .)
    GTR             reduce using rule 92 (operand4 -> ICONST .)
    GEQ             reduce using rule 92 (operand4 -> ICONST .)
    LSS             reduce using rule 92 (operand4 -> ICONST .)
    LEQ             reduce using rule 92 (operand4 -> ICONST .)
    IN              reduce using rule 92 (operand4 -> ICONST .)
    RBRACK          reduce using rule 92 (operand4 -> ICONST .)
    COMMA           reduce using rule 92 (operand4 -> ICONST .)
    RPAREN          reduce using rule 92 (operand4 -> ICONST .)
    THEN            reduce using rule 92 (operand4 -> ICONST .)
    SEMICOL         reduce using rule 92 (operand4 -> ICONST .)
    COLON           reduce using rule 92 (operand4 -> ICONST .)


state 36

    (91) monadic_operator -> NOT .

    ICONST          reduce using rule 91 (monadic_operator -> NOT .)


state 37

    (88) operand3 -> monadic_operator . operand4
    (92) operand4 -> . ICONST

    ICONST          shift and go to state 35

    operand4                       shift and go to state 96

state 38

    (16) declaration_list -> declaration .

    SEMICOL         reduce using rule 16 (declaration_list -> declaration .)
    COMMA           reduce using rule 16 (declaration_list -> declaration .)


state 39

    (9) declaration_statement -> DCL declaration_list . SEMICOL
    (15) declaration_list -> declaration_list . COMMA declaration

    SEMICOL         shift and go to state 98
    COMMA           shift and go to state 97


state 40

    (17) declaration -> identifier_list . mode initialization
    (18) declaration -> identifier_list . mode
    (58) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 49
    REF             shift and go to state 52
    ID              shift and go to state 8
    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    CHARS           shift and go to state 57
    ARRAY           shift and go to state 50

    string_mode                    shift and go to state 48
    discrete_mode                  shift and go to state 60
    integer_mode                   shift and go to state 61
    reference_mode                 shift and go to state 51
    composite_mode                 shift and go to state 62
    array_mode                     shift and go to state 53
    identifier                     shift and go to state 63
    mode_name                      shift and go to state 65
    discrete_range_mode            shift and go to state 55
    boolean_mode                   shift and go to state 66
    mode                           shift and go to state 99
    discrete_mode_name             shift and go to state 58
    character_mode                 shift and go to state 59

state 41

    (107) exit_action -> EXIT label_id .

    SEMICOL         reduce using rule 107 (exit_action -> EXIT label_id .)


state 42

    (11) newmode_statement -> TYPE newmode_list . SEMICOL
    (25) newmode_list -> newmode_list . COMMA mode_definition

    SEMICOL         shift and go to state 101
    COMMA           shift and go to state 100


state 43

    (26) newmode_list -> mode_definition .

    SEMICOL         reduce using rule 26 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 26 (newmode_list -> mode_definition .)


state 44

    (27) mode_definition -> identifier_list . ASSIGN mode
    (58) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 102
    COMMA           shift and go to state 49


state 45

    (2) statement_list -> statement_list statement .

    END             reduce using rule 2 (statement_list -> statement_list statement .)
    DCL             reduce using rule 2 (statement_list -> statement_list statement .)
    SYN             reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 2 (statement_list -> statement_list statement .)
    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 46

    (10) synonym_statement -> SYN synonym_list SEMICOL .

    END             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    DCL             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    SYN             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    TYPE            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    ID              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    EXIT            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    IF              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    $end            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)


state 47

    (20) synonym_list -> synonym_list COMMA . synonym_definition
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (23) synonym_definition -> . identifier_list ASSIGN constant_expression
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    synonym_definition             shift and go to state 103
    identifier                     shift and go to state 23
    identifier_list                shift and go to state 24

state 48

    (47) composite_mode -> string_mode .

    RPAREN          reduce using rule 47 (composite_mode -> string_mode .)
    LOC             reduce using rule 47 (composite_mode -> string_mode .)
    ASSIGN          reduce using rule 47 (composite_mode -> string_mode .)
    SEMICOL         reduce using rule 47 (composite_mode -> string_mode .)
    COMMA           reduce using rule 47 (composite_mode -> string_mode .)


state 49

    (58) identifier_list -> identifier_list COMMA . identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 104

state 50

    (51) array_mode -> ARRAY . LBRACK index_mode_list RBRACK element_mode

    LBRACK          shift and go to state 105


state 51

    (30) mode -> reference_mode .

    SEMICOL         reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    RPAREN          reduce using rule 30 (mode -> reference_mode .)
    ASSIGN          reduce using rule 30 (mode -> reference_mode .)


state 52

    (46) reference_mode -> REF . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 52
    ID              shift and go to state 8
    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    CHARS           shift and go to state 57
    ARRAY           shift and go to state 50

    string_mode                    shift and go to state 48
    discrete_mode                  shift and go to state 60
    integer_mode                   shift and go to state 61
    reference_mode                 shift and go to state 51
    composite_mode                 shift and go to state 62
    array_mode                     shift and go to state 53
    identifier                     shift and go to state 63
    mode_name                      shift and go to state 65
    discrete_range_mode            shift and go to state 55
    boolean_mode                   shift and go to state 66
    mode                           shift and go to state 106
    discrete_mode_name             shift and go to state 58
    character_mode                 shift and go to state 59

state 53

    (48) composite_mode -> array_mode .

    RPAREN          reduce using rule 48 (composite_mode -> array_mode .)
    LOC             reduce using rule 48 (composite_mode -> array_mode .)
    ASSIGN          reduce using rule 48 (composite_mode -> array_mode .)
    SEMICOL         reduce using rule 48 (composite_mode -> array_mode .)
    COMMA           reduce using rule 48 (composite_mode -> array_mode .)


state 54

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    LOC             reduce using rule 36 (integer_mode -> INT .)
    RPAREN          reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    RBRACK          reduce using rule 36 (integer_mode -> INT .)
    SEMICOL         reduce using rule 36 (integer_mode -> INT .)
    ASSIGN          reduce using rule 36 (integer_mode -> INT .)


state 55

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACK          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMICOL         reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 56

    (23) synonym_definition -> identifier_list ASSIGN . constant_expression
    (24) constant_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    operand4                       shift and go to state 29
    operand2                       shift and go to state 30
    constant_expression            shift and go to state 107
    operand0                       shift and go to state 32
    expression                     shift and go to state 108
    monadic_operator               shift and go to state 37

state 57

    (49) string_mode -> CHARS . LBRACK string_length RBRACK

    LBRACK          shift and go to state 109


state 58

    (39) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 110


state 59

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACK          reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> character_mode .)
    SEMICOL         reduce using rule 34 (discrete_mode -> character_mode .)


state 60

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    SEMICOL         reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    ASSIGN          reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 111


state 61

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACK          reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMICOL         reduce using rule 32 (discrete_mode -> integer_mode .)


state 62

    (31) mode -> composite_mode .

    SEMICOL         reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    RPAREN          reduce using rule 31 (mode -> composite_mode .)
    ASSIGN          reduce using rule 31 (mode -> composite_mode .)


state 63

    (41) mode_name -> identifier .
    (42) discrete_mode_name -> identifier .

    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    SEMICOL         reduce using rule 41 (mode_name -> identifier .)
    COMMA           reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 64

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    RBRACK          reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 38 (character_mode -> CHAR .)
    SEMICOL         reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)


state 65

    (28) mode -> mode_name .

    SEMICOL         reduce using rule 28 (mode -> mode_name .)
    COMMA           reduce using rule 28 (mode -> mode_name .)
    LOC             reduce using rule 28 (mode -> mode_name .)
    RPAREN          reduce using rule 28 (mode -> mode_name .)
    ASSIGN          reduce using rule 28 (mode -> mode_name .)


state 66

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACK          reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMICOL         reduce using rule 33 (discrete_mode -> boolean_mode .)


state 67

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACK          reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    SEMICOL         reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)


state 68

    (22) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 112


state 69

    (12) procedure_statement -> label_id COLON procedure_definition . SEMICOL

    SEMICOL         shift and go to state 113


state 70

    (13) action_statement -> label_id COLON action . SEMICOL

    SEMICOL         shift and go to state 114


state 71

    (108) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (109) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
    (110) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
    (111) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMICOL statement_list END
    (112) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMICOL END
    (113) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMICOL END
    (114) procedure_definition -> PROC . LPAREN RPAREN SEMICOL statement_list END
    (115) procedure_definition -> PROC . LPAREN RPAREN SEMICOL END

    LPAREN          shift and go to state 115


state 72

    (80) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 80 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 80 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 80 (arithmetic_additive_operator -> PLUS .)


state 73

    (81) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 81 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 81 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 81 (arithmetic_additive_operator -> MINUS .)


state 74

    (78) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 78 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 78 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 78 (operator2 -> arithmetic_additive_operator .)


state 75

    (77) operand1 -> operand1 operator2 . operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand2                       shift and go to state 116
    monadic_operator               shift and go to state 37
    operand3                       shift and go to state 27
    operand4                       shift and go to state 29

state 76

    (79) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 79 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 79 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 79 (operator2 -> string_concatenation_operator .)


state 77

    (82) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 82 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 82 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 82 (string_concatenation_operator -> CONCAT .)


state 78

    (85) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 85 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 85 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 85 (arithmetic_multiplicative_operator -> TIMES .)


state 79

    (87) arithmetic_multiplicative_operator -> PERC .

    MINUS           reduce using rule 87 (arithmetic_multiplicative_operator -> PERC .)
    NOT             reduce using rule 87 (arithmetic_multiplicative_operator -> PERC .)
    ICONST          reduce using rule 87 (arithmetic_multiplicative_operator -> PERC .)


state 80

    (86) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 86 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 86 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 86 (arithmetic_multiplicative_operator -> DIVIDE .)


state 81

    (84) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    monadic_operator               shift and go to state 37
    operand4                       shift and go to state 29
    operand3                       shift and go to state 117

state 82

    (99) if_action -> IF boolean_expression then_clause . else_clause FI
    (100) if_action -> IF boolean_expression then_clause . FI
    (103) else_clause -> . ELSE action_statement_list
    (104) else_clause -> . ELSE empty
    (105) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (106) else_clause -> . ELSIF boolean_expression then_clause

    FI              shift and go to state 119
    ELSE            shift and go to state 121
    ELSIF           shift and go to state 120

    else_clause                    shift and go to state 118

state 83

    (101) then_clause -> THEN . action_statement_list
    (102) then_clause -> THEN . empty
    (93) action_statement_list -> . action_statement_list action_statement
    (94) action_statement_list -> . action_statement
    (125) empty -> .
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 125 (empty -> .)
    ELSE            reduce using rule 125 (empty -> .)
    ELSIF           reduce using rule 125 (empty -> .)
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 122
    label_id                       shift and go to state 123
    empty                          shift and go to state 124
    exit_action                    shift and go to state 15
    bracketed_action               shift and go to state 5
    identifier                     shift and go to state 7
    if_action                      shift and go to state 3
    action_statement_list          shift and go to state 125
    action                         shift and go to state 4

state 84

    (73) relational_operator -> LSS .

    MINUS           reduce using rule 73 (relational_operator -> LSS .)
    NOT             reduce using rule 73 (relational_operator -> LSS .)
    ICONST          reduce using rule 73 (relational_operator -> LSS .)


state 85

    (70) relational_operator -> DIF .

    MINUS           reduce using rule 70 (relational_operator -> DIF .)
    NOT             reduce using rule 70 (relational_operator -> DIF .)
    ICONST          reduce using rule 70 (relational_operator -> DIF .)


state 86

    (68) relational_operator -> OR .

    MINUS           reduce using rule 68 (relational_operator -> OR .)
    NOT             reduce using rule 68 (relational_operator -> OR .)
    ICONST          reduce using rule 68 (relational_operator -> OR .)


state 87

    (67) relational_operator -> AND .

    MINUS           reduce using rule 67 (relational_operator -> AND .)
    NOT             reduce using rule 67 (relational_operator -> AND .)
    ICONST          reduce using rule 67 (relational_operator -> AND .)


state 88

    (64) operand0 -> operand0 operator1 . operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand2                       shift and go to state 30
    operand3                       shift and go to state 27
    operand1                       shift and go to state 126
    operand4                       shift and go to state 29
    monadic_operator               shift and go to state 37

state 89

    (65) operator1 -> relational_operator .

    MINUS           reduce using rule 65 (operator1 -> relational_operator .)
    NOT             reduce using rule 65 (operator1 -> relational_operator .)
    ICONST          reduce using rule 65 (operator1 -> relational_operator .)


state 90

    (75) membership_operator -> IN .

    MINUS           reduce using rule 75 (membership_operator -> IN .)
    NOT             reduce using rule 75 (membership_operator -> IN .)
    ICONST          reduce using rule 75 (membership_operator -> IN .)


state 91

    (71) relational_operator -> GTR .

    MINUS           reduce using rule 71 (relational_operator -> GTR .)
    NOT             reduce using rule 71 (relational_operator -> GTR .)
    ICONST          reduce using rule 71 (relational_operator -> GTR .)


state 92

    (74) relational_operator -> LEQ .

    MINUS           reduce using rule 74 (relational_operator -> LEQ .)
    NOT             reduce using rule 74 (relational_operator -> LEQ .)
    ICONST          reduce using rule 74 (relational_operator -> LEQ .)


state 93

    (72) relational_operator -> GEQ .

    MINUS           reduce using rule 72 (relational_operator -> GEQ .)
    NOT             reduce using rule 72 (relational_operator -> GEQ .)
    ICONST          reduce using rule 72 (relational_operator -> GEQ .)


state 94

    (69) relational_operator -> EQUALS .

    MINUS           reduce using rule 69 (relational_operator -> EQUALS .)
    NOT             reduce using rule 69 (relational_operator -> EQUALS .)
    ICONST          reduce using rule 69 (relational_operator -> EQUALS .)


state 95

    (66) operator1 -> membership_operator .

    MINUS           reduce using rule 66 (operator1 -> membership_operator .)
    NOT             reduce using rule 66 (operator1 -> membership_operator .)
    ICONST          reduce using rule 66 (operator1 -> membership_operator .)


state 96

    (88) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    PERC            reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    EQUALS          reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    DIF             reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    GTR             reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    GEQ             reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    LSS             reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    LEQ             reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    SEMICOL         reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    RBRACK          reduce using rule 88 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 88 (operand3 -> monadic_operator operand4 .)


state 97

    (15) declaration_list -> declaration_list COMMA . declaration
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 23
    declaration                    shift and go to state 127
    identifier_list                shift and go to state 40

state 98

    (9) declaration_statement -> DCL declaration_list SEMICOL .

    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)


state 99

    (17) declaration -> identifier_list mode . initialization
    (18) declaration -> identifier_list mode .
    (19) initialization -> . ASSIGN expression

    SEMICOL         reduce using rule 18 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 18 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 128

    initialization                 shift and go to state 129

state 100

    (25) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    mode_definition                shift and go to state 130
    identifier                     shift and go to state 23
    identifier_list                shift and go to state 44

state 101

    (11) newmode_statement -> TYPE newmode_list SEMICOL .

    END             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    DCL             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    SYN             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    TYPE            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    ID              reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    EXIT            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    IF              reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    $end            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)


state 102

    (27) mode_definition -> identifier_list ASSIGN . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 52
    ID              shift and go to state 8
    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    CHARS           shift and go to state 57
    ARRAY           shift and go to state 50

    string_mode                    shift and go to state 48
    discrete_mode                  shift and go to state 60
    integer_mode                   shift and go to state 61
    reference_mode                 shift and go to state 51
    character_mode                 shift and go to state 59
    array_mode                     shift and go to state 53
    identifier                     shift and go to state 63
    mode_name                      shift and go to state 65
    discrete_range_mode            shift and go to state 55
    boolean_mode                   shift and go to state 66
    mode                           shift and go to state 131
    discrete_mode_name             shift and go to state 58
    composite_mode                 shift and go to state 62

state 103

    (20) synonym_list -> synonym_list COMMA synonym_definition .

    SEMICOL         reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)


state 104

    (58) identifier_list -> identifier_list COMMA identifier .

    ASSIGN          reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)


state 105

    (51) array_mode -> ARRAY LBRACK . index_mode_list RBRACK element_mode
    (52) index_mode_list -> . index_mode_list COMMA index_mode
    (53) index_mode_list -> . index_mode
    (54) index_mode -> . discrete_mode
    (55) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (61) expression -> . operand0
    (59) identifier -> . ID
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    ID              shift and go to state 8
    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    index_mode                     shift and go to state 132
    character_mode                 shift and go to state 59
    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    literal_range                  shift and go to state 133
    lower_bound                    shift and go to state 134
    operand2                       shift and go to state 30
    discrete_range_mode            shift and go to state 55
    expression                     shift and go to state 135
    discrete_mode_name             shift and go to state 58
    discrete_mode                  shift and go to state 136
    integer_mode                   shift and go to state 61
    index_mode_list                shift and go to state 137
    operand4                       shift and go to state 29
    identifier                     shift and go to state 138
    operand0                       shift and go to state 32
    boolean_mode                   shift and go to state 66
    monadic_operator               shift and go to state 37

state 106

    (46) reference_mode -> REF mode .

    ASSIGN          reduce using rule 46 (reference_mode -> REF mode .)
    SEMICOL         reduce using rule 46 (reference_mode -> REF mode .)
    COMMA           reduce using rule 46 (reference_mode -> REF mode .)
    LOC             reduce using rule 46 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 46 (reference_mode -> REF mode .)


state 107

    (23) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMICOL         reduce using rule 23 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    COMMA           reduce using rule 23 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 108

    (24) constant_expression -> expression .

    SEMICOL         reduce using rule 24 (constant_expression -> expression .)
    COMMA           reduce using rule 24 (constant_expression -> expression .)


state 109

    (49) string_mode -> CHARS LBRACK . string_length RBRACK
    (50) string_length -> . integer_literal
    (60) integer_literal -> . ICONST

    ICONST          shift and go to state 139

    string_length                  shift and go to state 141
    integer_literal                shift and go to state 140

state 110

    (39) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand4                       shift and go to state 29
    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    literal_range                  shift and go to state 142
    lower_bound                    shift and go to state 134
    operand2                       shift and go to state 30
    operand0                       shift and go to state 32
    expression                     shift and go to state 135
    monadic_operator               shift and go to state 37

state 111

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand4                       shift and go to state 29
    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    literal_range                  shift and go to state 143
    lower_bound                    shift and go to state 134
    operand2                       shift and go to state 30
    operand0                       shift and go to state 32
    expression                     shift and go to state 135
    monadic_operator               shift and go to state 37

state 112

    (22) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (24) constant_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    monadic_operator               shift and go to state 37
    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    operand4                       shift and go to state 29
    operand2                       shift and go to state 30
    constant_expression            shift and go to state 144
    operand0                       shift and go to state 32
    expression                     shift and go to state 108

state 113

    (12) procedure_statement -> label_id COLON procedure_definition SEMICOL .

    END             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    DCL             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    SYN             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    TYPE            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    ID              reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    EXIT            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    IF              reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    $end            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)


state 114

    (13) action_statement -> label_id COLON action SEMICOL .

    END             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    DCL             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    SYN             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    TYPE            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ID              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    EXIT            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    IF              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    FI              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    $end            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ELSE            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ELSIF           reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)


state 115

    (108) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (109) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMICOL END
    (110) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMICOL statement_list END
    (111) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMICOL statement_list END
    (112) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMICOL END
    (113) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMICOL END
    (114) procedure_definition -> PROC LPAREN . RPAREN SEMICOL statement_list END
    (115) procedure_definition -> PROC LPAREN . RPAREN SEMICOL END
    (116) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (117) formal_parameter_list -> . formal_parameter
    (118) formal_parameter -> . identifier_list parameter_spec
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    RPAREN          shift and go to state 147
    ID              shift and go to state 8

    formal_parameter_list          shift and go to state 145
    formal_parameter               shift and go to state 146
    identifier                     shift and go to state 23
    identifier_list                shift and go to state 148

state 116

    (77) operand1 -> operand1 operator2 operand2 .
    (84) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (85) arithmetic_multiplicative_operator -> . TIMES
    (86) arithmetic_multiplicative_operator -> . DIVIDE
    (87) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    EQUALS          reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    DIF             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    GTR             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    GEQ             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    LSS             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    LEQ             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    SEMICOL         reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    RBRACK          reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 80
    PERC            shift and go to state 79

    arithmetic_multiplicative_operator shift and go to state 81

state 117

    (84) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PERC            reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUALS          reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIF             reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTR             reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GEQ             reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LSS             reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LEQ             reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMICOL         reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACK          reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 84 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 118

    (99) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 149


state 119

    (100) if_action -> IF boolean_expression then_clause FI .

    SEMICOL         reduce using rule 100 (if_action -> IF boolean_expression then_clause FI .)


state 120

    (105) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (106) else_clause -> ELSIF . boolean_expression then_clause
    (62) boolean_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    operand4                       shift and go to state 29
    operand2                       shift and go to state 30
    boolean_expression             shift and go to state 150
    operand0                       shift and go to state 32
    expression                     shift and go to state 34
    monadic_operator               shift and go to state 37

state 121

    (103) else_clause -> ELSE . action_statement_list
    (104) else_clause -> ELSE . empty
    (93) action_statement_list -> . action_statement_list action_statement
    (94) action_statement_list -> . action_statement
    (125) empty -> .
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 125 (empty -> .)
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 122
    label_id                       shift and go to state 123
    empty                          shift and go to state 151
    exit_action                    shift and go to state 15
    bracketed_action               shift and go to state 5
    identifier                     shift and go to state 7
    if_action                      shift and go to state 3
    action_statement_list          shift and go to state 152
    action                         shift and go to state 4

state 122

    (94) action_statement_list -> action_statement .

    ID              reduce using rule 94 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 94 (action_statement_list -> action_statement .)
    IF              reduce using rule 94 (action_statement_list -> action_statement .)
    FI              reduce using rule 94 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 94 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 94 (action_statement_list -> action_statement .)


state 123

    (13) action_statement -> label_id . COLON action SEMICOL

    COLON           shift and go to state 153


state 124

    (102) then_clause -> THEN empty .

    ELSE            reduce using rule 102 (then_clause -> THEN empty .)
    ELSIF           reduce using rule 102 (then_clause -> THEN empty .)
    FI              reduce using rule 102 (then_clause -> THEN empty .)


state 125

    (101) then_clause -> THEN action_statement_list .
    (93) action_statement_list -> action_statement_list . action_statement
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    ELSE            reduce using rule 101 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 101 (then_clause -> THEN action_statement_list .)
    FI              reduce using rule 101 (then_clause -> THEN action_statement_list .)
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    if_action                      shift and go to state 3
    action_statement               shift and go to state 154
    label_id                       shift and go to state 123
    exit_action                    shift and go to state 15
    bracketed_action               shift and go to state 5
    identifier                     shift and go to state 7
    action                         shift and go to state 4

state 126

    (64) operand0 -> operand0 operator1 operand1 .
    (77) operand1 -> operand1 . operator2 operand2
    (78) operator2 -> . arithmetic_additive_operator
    (79) operator2 -> . string_concatenation_operator
    (80) arithmetic_additive_operator -> . PLUS
    (81) arithmetic_additive_operator -> . MINUS
    (82) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    EQUALS          reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    DIF             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    GTR             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    GEQ             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    LSS             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    LEQ             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    RBRACK          reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    SEMICOL         reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    CONCAT          shift and go to state 77

    arithmetic_additive_operator   shift and go to state 74
    operator2                      shift and go to state 75
    string_concatenation_operator  shift and go to state 76

state 127

    (15) declaration_list -> declaration_list COMMA declaration .

    SEMICOL         reduce using rule 15 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 15 (declaration_list -> declaration_list COMMA declaration .)


state 128

    (19) initialization -> ASSIGN . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand2                       shift and go to state 30
    operand0                       shift and go to state 32
    expression                     shift and go to state 155
    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    operand4                       shift and go to state 29
    monadic_operator               shift and go to state 37

state 129

    (17) declaration -> identifier_list mode initialization .

    SEMICOL         reduce using rule 17 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 17 (declaration -> identifier_list mode initialization .)


state 130

    (25) newmode_list -> newmode_list COMMA mode_definition .

    SEMICOL         reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)


state 131

    (27) mode_definition -> identifier_list ASSIGN mode .

    SEMICOL         reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 132

    (53) index_mode_list -> index_mode .

    RBRACK          reduce using rule 53 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 53 (index_mode_list -> index_mode .)


state 133

    (55) index_mode -> literal_range .

    RBRACK          reduce using rule 55 (index_mode -> literal_range .)
    COMMA           reduce using rule 55 (index_mode -> literal_range .)


state 134

    (43) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 156


state 135

    (44) lower_bound -> expression .

    COLON           reduce using rule 44 (lower_bound -> expression .)


state 136

    (54) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACK          reduce using rule 54 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 54 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 111


state 137

    (51) array_mode -> ARRAY LBRACK index_mode_list . RBRACK element_mode
    (52) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACK          shift and go to state 158
    COMMA           shift and go to state 157


state 138

    (42) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 139

    (60) integer_literal -> ICONST .

    RBRACK          reduce using rule 60 (integer_literal -> ICONST .)


state 140

    (50) string_length -> integer_literal .

    RBRACK          reduce using rule 50 (string_length -> integer_literal .)


state 141

    (49) string_mode -> CHARS LBRACK string_length . RBRACK

    RBRACK          shift and go to state 159


state 142

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 160


state 143

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 161


state 144

    (22) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMICOL         reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    COMMA           reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 145

    (108) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMICOL statement_list END
    (109) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMICOL END
    (110) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMICOL statement_list END
    (112) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMICOL END
    (116) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 163
    COMMA           shift and go to state 162


state 146

    (117) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 117 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 117 (formal_parameter_list -> formal_parameter .)


state 147

    (111) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMICOL statement_list END
    (113) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMICOL END
    (114) procedure_definition -> PROC LPAREN RPAREN . SEMICOL statement_list END
    (115) procedure_definition -> PROC LPAREN RPAREN . SEMICOL END
    (122) result_spec -> . RETURNS LPAREN mode result_attribute RPAREN
    (123) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMICOL         shift and go to state 166
    RETURNS         shift and go to state 164

    result_spec                    shift and go to state 165

state 148

    (118) formal_parameter -> identifier_list . parameter_spec
    (58) identifier_list -> identifier_list . COMMA identifier
    (119) parameter_spec -> . mode parameter_attribute
    (120) parameter_spec -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 49
    REF             shift and go to state 52
    ID              shift and go to state 8
    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    CHARS           shift and go to state 57
    ARRAY           shift and go to state 50

    string_mode                    shift and go to state 48
    discrete_mode                  shift and go to state 60
    integer_mode                   shift and go to state 61
    reference_mode                 shift and go to state 51
    composite_mode                 shift and go to state 62
    array_mode                     shift and go to state 53
    character_mode                 shift and go to state 59
    identifier                     shift and go to state 63
    mode_name                      shift and go to state 65
    discrete_range_mode            shift and go to state 55
    parameter_spec                 shift and go to state 167
    boolean_mode                   shift and go to state 66
    mode                           shift and go to state 168
    discrete_mode_name             shift and go to state 58

state 149

    (99) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMICOL         reduce using rule 99 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 150

    (105) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (106) else_clause -> ELSIF boolean_expression . then_clause
    (101) then_clause -> . THEN action_statement_list
    (102) then_clause -> . THEN empty

    THEN            shift and go to state 83

    then_clause                    shift and go to state 169

state 151

    (104) else_clause -> ELSE empty .

    FI              reduce using rule 104 (else_clause -> ELSE empty .)


state 152

    (103) else_clause -> ELSE action_statement_list .
    (93) action_statement_list -> action_statement_list . action_statement
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 103 (else_clause -> ELSE action_statement_list .)
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    if_action                      shift and go to state 3
    action_statement               shift and go to state 154
    label_id                       shift and go to state 123
    exit_action                    shift and go to state 15
    bracketed_action               shift and go to state 5
    identifier                     shift and go to state 7
    action                         shift and go to state 4

state 153

    (13) action_statement -> label_id COLON . action SEMICOL
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    EXIT            shift and go to state 13
    IF              shift and go to state 11

    if_action                      shift and go to state 3
    exit_action                    shift and go to state 15
    action                         shift and go to state 70
    bracketed_action               shift and go to state 5

state 154

    (93) action_statement_list -> action_statement_list action_statement .

    ID              reduce using rule 93 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 93 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 93 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 93 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 93 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 93 (action_statement_list -> action_statement_list action_statement .)


state 155

    (19) initialization -> ASSIGN expression .

    SEMICOL         reduce using rule 19 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 19 (initialization -> ASSIGN expression .)


state 156

    (43) literal_range -> lower_bound COLON . upper_bound
    (45) upper_bound -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    operand4                       shift and go to state 29
    operand2                       shift and go to state 30
    operand0                       shift and go to state 32
    upper_bound                    shift and go to state 170
    expression                     shift and go to state 171
    monadic_operator               shift and go to state 37

state 157

    (52) index_mode_list -> index_mode_list COMMA . index_mode
    (54) index_mode -> . discrete_mode
    (55) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (61) expression -> . operand0
    (59) identifier -> . ID
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (83) operand2 -> . operand3
    (84) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (88) operand3 -> . monadic_operator operand4
    (89) operand3 -> . operand4
    (90) monadic_operator -> . MINUS
    (91) monadic_operator -> . NOT
    (92) operand4 -> . ICONST

    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    ID              shift and go to state 8
    MINUS           shift and go to state 33
    NOT             shift and go to state 36
    ICONST          shift and go to state 35

    index_mode                     shift and go to state 172
    character_mode                 shift and go to state 59
    operand3                       shift and go to state 27
    operand1                       shift and go to state 28
    literal_range                  shift and go to state 133
    lower_bound                    shift and go to state 134
    operand2                       shift and go to state 30
    discrete_range_mode            shift and go to state 55
    expression                     shift and go to state 135
    discrete_mode_name             shift and go to state 58
    discrete_mode                  shift and go to state 136
    integer_mode                   shift and go to state 61
    operand4                       shift and go to state 29
    identifier                     shift and go to state 138
    operand0                       shift and go to state 32
    boolean_mode                   shift and go to state 66
    monadic_operator               shift and go to state 37

state 158

    (51) array_mode -> ARRAY LBRACK index_mode_list RBRACK . element_mode
    (56) element_mode -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 52
    ID              shift and go to state 8
    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    CHARS           shift and go to state 57
    ARRAY           shift and go to state 50

    string_mode                    shift and go to state 48
    discrete_mode                  shift and go to state 60
    integer_mode                   shift and go to state 61
    reference_mode                 shift and go to state 51
    character_mode                 shift and go to state 59
    array_mode                     shift and go to state 53
    identifier                     shift and go to state 63
    element_mode                   shift and go to state 173
    mode_name                      shift and go to state 65
    boolean_mode                   shift and go to state 66
    discrete_range_mode            shift and go to state 55
    mode                           shift and go to state 174
    discrete_mode_name             shift and go to state 58
    composite_mode                 shift and go to state 62

state 159

    (49) string_mode -> CHARS LBRACK string_length RBRACK .

    ASSIGN          reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    SEMICOL         reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    COMMA           reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    LOC             reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    RPAREN          reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)


state 160

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACK          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 161

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACK          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 162

    (116) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (118) formal_parameter -> . identifier_list parameter_spec
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 23
    formal_parameter               shift and go to state 175
    identifier_list                shift and go to state 148

state 163

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMICOL statement_list END
    (109) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMICOL END
    (110) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMICOL statement_list END
    (112) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMICOL END
    (122) result_spec -> . RETURNS LPAREN mode result_attribute RPAREN
    (123) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMICOL         shift and go to state 177
    RETURNS         shift and go to state 164

    result_spec                    shift and go to state 176

state 164

    (122) result_spec -> RETURNS . LPAREN mode result_attribute RPAREN
    (123) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 178


state 165

    (111) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMICOL statement_list END
    (113) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMICOL END

    SEMICOL         shift and go to state 179


state 166

    (114) procedure_definition -> PROC LPAREN RPAREN SEMICOL . statement_list END
    (115) procedure_definition -> PROC LPAREN RPAREN SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 181
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    identifier                     shift and go to state 7
    exit_action                    shift and go to state 15
    statement_list                 shift and go to state 180
    statement                      shift and go to state 20

state 167

    (118) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 118 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 118 (formal_parameter -> identifier_list parameter_spec .)


state 168

    (119) parameter_spec -> mode . parameter_attribute
    (120) parameter_spec -> mode .
    (121) parameter_attribute -> . LOC

    RPAREN          reduce using rule 120 (parameter_spec -> mode .)
    COMMA           reduce using rule 120 (parameter_spec -> mode .)
    LOC             shift and go to state 182

    parameter_attribute            shift and go to state 183

state 169

    (105) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (106) else_clause -> ELSIF boolean_expression then_clause .
    (103) else_clause -> . ELSE action_statement_list
    (104) else_clause -> . ELSE empty
    (105) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (106) else_clause -> . ELSIF boolean_expression then_clause

    FI              reduce using rule 106 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 121
    ELSIF           shift and go to state 120

    else_clause                    shift and go to state 184

state 170

    (43) literal_range -> lower_bound COLON upper_bound .

    RBRACK          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)


state 171

    (45) upper_bound -> expression .

    RBRACK          reduce using rule 45 (upper_bound -> expression .)
    COMMA           reduce using rule 45 (upper_bound -> expression .)
    RPAREN          reduce using rule 45 (upper_bound -> expression .)


state 172

    (52) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACK          reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)


state 173

    (51) array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .

    SEMICOL         reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    COMMA           reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    ASSIGN          reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    LOC             reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    RPAREN          reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)


state 174

    (56) element_mode -> mode .

    ASSIGN          reduce using rule 56 (element_mode -> mode .)
    SEMICOL         reduce using rule 56 (element_mode -> mode .)
    COMMA           reduce using rule 56 (element_mode -> mode .)
    LOC             reduce using rule 56 (element_mode -> mode .)
    RPAREN          reduce using rule 56 (element_mode -> mode .)


state 175

    (116) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 116 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 116 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 176

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMICOL statement_list END
    (109) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMICOL END

    SEMICOL         shift and go to state 185


state 177

    (110) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL . statement_list END
    (112) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 187
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    identifier                     shift and go to state 7
    exit_action                    shift and go to state 15
    statement_list                 shift and go to state 186
    statement                      shift and go to state 20

state 178

    (122) result_spec -> RETURNS LPAREN . mode result_attribute RPAREN
    (123) result_spec -> RETURNS LPAREN . mode RPAREN
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 52
    ID              shift and go to state 8
    INT             shift and go to state 54
    BOOL            shift and go to state 67
    CHAR            shift and go to state 64
    CHARS           shift and go to state 57
    ARRAY           shift and go to state 50

    string_mode                    shift and go to state 48
    discrete_mode                  shift and go to state 60
    integer_mode                   shift and go to state 61
    reference_mode                 shift and go to state 51
    composite_mode                 shift and go to state 62
    array_mode                     shift and go to state 53
    identifier                     shift and go to state 63
    mode_name                      shift and go to state 65
    discrete_range_mode            shift and go to state 55
    boolean_mode                   shift and go to state 66
    mode                           shift and go to state 188
    discrete_mode_name             shift and go to state 58
    character_mode                 shift and go to state 59

state 179

    (111) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL . statement_list END
    (113) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 190
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    statement_list                 shift and go to state 189
    synonym_statement              shift and go to state 6
    identifier                     shift and go to state 7
    exit_action                    shift and go to state 15
    statement                      shift and go to state 20

state 180

    (114) procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 191
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    identifier                     shift and go to state 7
    exit_action                    shift and go to state 15
    statement                      shift and go to state 45

state 181

    (115) procedure_definition -> PROC LPAREN RPAREN SEMICOL END .

    SEMICOL         reduce using rule 115 (procedure_definition -> PROC LPAREN RPAREN SEMICOL END .)


state 182

    (121) parameter_attribute -> LOC .

    RPAREN          reduce using rule 121 (parameter_attribute -> LOC .)
    COMMA           reduce using rule 121 (parameter_attribute -> LOC .)


state 183

    (119) parameter_spec -> mode parameter_attribute .

    RPAREN          reduce using rule 119 (parameter_spec -> mode parameter_attribute .)
    COMMA           reduce using rule 119 (parameter_spec -> mode parameter_attribute .)


state 184

    (105) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 105 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 185

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL . statement_list END
    (109) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 193
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action                         shift and go to state 4
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    if_action                      shift and go to state 3
    action_statement               shift and go to state 10
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    exit_action                    shift and go to state 15
    procedure_statement            shift and go to state 16
    identifier                     shift and go to state 7
    statement_list                 shift and go to state 192
    statement                      shift and go to state 20
    declaration_statement          shift and go to state 2

state 186

    (110) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 194
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    identifier                     shift and go to state 7
    exit_action                    shift and go to state 15
    statement                      shift and go to state 45

state 187

    (112) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END .

    SEMICOL         reduce using rule 112 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END .)


state 188

    (122) result_spec -> RETURNS LPAREN mode . result_attribute RPAREN
    (123) result_spec -> RETURNS LPAREN mode . RPAREN
    (124) result_attribute -> . LOC

    RPAREN          shift and go to state 196
    LOC             shift and go to state 195

    result_attribute               shift and go to state 197

state 189

    (111) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 198
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action_statement               shift and go to state 10
    declaration_statement          shift and go to state 2
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    if_action                      shift and go to state 3
    action                         shift and go to state 4
    procedure_statement            shift and go to state 16
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    identifier                     shift and go to state 7
    exit_action                    shift and go to state 15
    statement                      shift and go to state 45

state 190

    (113) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END .

    SEMICOL         reduce using rule 113 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END .)


state 191

    (114) procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END .

    SEMICOL         reduce using rule 114 (procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END .)


state 192

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (95) label_id -> . identifier
    (96) action -> . bracketed_action
    (97) action -> . exit_action
    (59) identifier -> . ID
    (98) bracketed_action -> . if_action
    (107) exit_action -> . EXIT label_id
    (99) if_action -> . IF boolean_expression then_clause else_clause FI
    (100) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 199
    DCL             shift and go to state 12
    SYN             shift and go to state 1
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 13
    IF              shift and go to state 11

    action                         shift and go to state 4
    bracketed_action               shift and go to state 5
    synonym_statement              shift and go to state 6
    if_action                      shift and go to state 3
    action_statement               shift and go to state 10
    label_id                       shift and go to state 9
    newmode_statement              shift and go to state 14
    exit_action                    shift and go to state 15
    procedure_statement            shift and go to state 16
    identifier                     shift and go to state 7
    statement                      shift and go to state 45
    declaration_statement          shift and go to state 2

state 193

    (109) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END .

    SEMICOL         reduce using rule 109 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END .)


state 194

    (110) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END .

    SEMICOL         reduce using rule 110 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END .)


state 195

    (124) result_attribute -> LOC .

    RPAREN          reduce using rule 124 (result_attribute -> LOC .)


state 196

    (123) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMICOL         reduce using rule 123 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 197

    (122) result_spec -> RETURNS LPAREN mode result_attribute . RPAREN

    RPAREN          shift and go to state 200


state 198

    (111) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END .

    SEMICOL         reduce using rule 111 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END .)


state 199

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END .

    SEMICOL         reduce using rule 108 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END .)


state 200

    (122) result_spec -> RETURNS LPAREN mode result_attribute RPAREN .

    SEMICOL         reduce using rule 122 (result_spec -> RETURNS LPAREN mode result_attribute RPAREN .)

