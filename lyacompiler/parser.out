Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    DBLQUO
    UPPER
    RETURN
    NUM
    CONCATASSIGN
    PERCASSIGN
    RESULT
    SCONST
    LCURL
    PLUSASSIGN
    NULL
    BY
    DO
    TRUE
    RCURL
    FOR
    CCONST
    SINGQUO
    PRED
    READ
    ARROW
    OD
    CIRCUMF
    MINUSASSIGN
    WHILE
    DOWN
    DBLSLASH
    LOWER
    FALSE
    TIMESASSIGN
    TO
    SUCC
    DIVIDEASSIGN
    LENGTH

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMICOL
Rule 10    synonym_statement -> SYN synonym_list SEMICOL
Rule 11    newmode_statement -> TYPE newmode_list SEMICOL
Rule 12    procedure_statement -> label_id COLON procedure_definition SEMICOL
Rule 13    action_statement -> label_id COLON action SEMICOL
Rule 14    action_statement -> action SEMICOL
Rule 15    declaration_list -> declaration_list COMMA declaration
Rule 16    declaration_list -> declaration
Rule 17    declaration -> identifier_list mode initialization
Rule 18    declaration -> identifier_list mode
Rule 19    initialization -> ASSIGN expression
Rule 20    synonym_list -> synonym_list COMMA synonym_definition
Rule 21    synonym_list -> synonym_definition
Rule 22    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 23    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 24    constant_expression -> expression
Rule 25    newmode_list -> newmode_list COMMA mode_definition
Rule 26    newmode_list -> mode_definition
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    mode -> mode_name
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    mode_name -> identifier
Rule 42    discrete_mode_name -> identifier
Rule 43    literal_range -> lower_bound COLON upper_bound
Rule 44    lower_bound -> expression
Rule 45    upper_bound -> expression
Rule 46    reference_mode -> REF mode
Rule 47    composite_mode -> string_mode
Rule 48    composite_mode -> array_mode
Rule 49    string_mode -> CHARS LBRACK string_length RBRACK
Rule 50    string_length -> integer_literal
Rule 51    array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode
Rule 52    index_mode_list -> index_mode_list COMMA index_mode
Rule 53    index_mode_list -> index_mode
Rule 54    index_mode -> discrete_mode
Rule 55    index_mode -> literal_range
Rule 56    element_mode -> mode
Rule 57    identifier_list -> identifier
Rule 58    identifier_list -> identifier_list COMMA identifier
Rule 59    identifier -> ID
Rule 60    integer_literal -> ICONST
Rule 61    expression -> operand0
Rule 62    expression -> conditional_expression
Rule 63    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 64    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 65    boolean_expression -> expression
Rule 66    then_expression -> THEN expression
Rule 67    else_expression -> ELSE expression
Rule 68    elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 69    elsif_expression -> ELSIF boolean_expression then_expression
Rule 70    operand0 -> operand1
Rule 71    operand0 -> operand0 operator1 operand1
Rule 72    operator1 -> relational_operator
Rule 73    operator1 -> membership_operator
Rule 74    relational_operator -> AND
Rule 75    relational_operator -> OR
Rule 76    relational_operator -> EQUALS
Rule 77    relational_operator -> DIF
Rule 78    relational_operator -> GTR
Rule 79    relational_operator -> GEQ
Rule 80    relational_operator -> LSS
Rule 81    relational_operator -> LEQ
Rule 82    membership_operator -> IN
Rule 83    operand1 -> operand2
Rule 84    operand1 -> operand1 operator2 operand2
Rule 85    operator2 -> arithmetic_additive_operator
Rule 86    operator2 -> string_concatenation_operator
Rule 87    arithmetic_additive_operator -> PLUS
Rule 88    arithmetic_additive_operator -> MINUS
Rule 89    string_concatenation_operator -> CONCAT
Rule 90    operand2 -> operand3
Rule 91    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 92    arithmetic_multiplicative_operator -> TIMES
Rule 93    arithmetic_multiplicative_operator -> DIVIDE
Rule 94    arithmetic_multiplicative_operator -> PERC
Rule 95    operand3 -> monadic_operator operand4
Rule 96    operand3 -> operand4
Rule 97    monadic_operator -> MINUS
Rule 98    monadic_operator -> NOT
Rule 99    operand4 -> ICONST
Rule 100   action_statement_list -> action_statement_list action_statement
Rule 101   action_statement_list -> action_statement
Rule 102   label_id -> identifier
Rule 103   action -> bracketed_action
Rule 104   action -> exit_action
Rule 105   bracketed_action -> if_action
Rule 106   if_action -> IF boolean_expression then_clause else_clause FI
Rule 107   if_action -> IF boolean_expression then_clause FI
Rule 108   then_clause -> THEN action_statement_list
Rule 109   then_clause -> THEN empty
Rule 110   else_clause -> ELSE action_statement_list
Rule 111   else_clause -> ELSE empty
Rule 112   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 113   else_clause -> ELSIF boolean_expression then_clause
Rule 114   exit_action -> EXIT label_id
Rule 115   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
Rule 116   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
Rule 117   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
Rule 118   procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END
Rule 119   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END
Rule 120   procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END
Rule 121   procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END
Rule 122   procedure_definition -> PROC LPAREN RPAREN SEMICOL END
Rule 123   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 124   formal_parameter_list -> formal_parameter
Rule 125   formal_parameter -> identifier_list parameter_spec
Rule 126   parameter_spec -> mode parameter_attribute
Rule 127   parameter_spec -> mode
Rule 128   parameter_attribute -> LOC
Rule 129   result_spec -> RETURNS LPAREN mode result_attribute RPAREN
Rule 130   result_spec -> RETURNS LPAREN mode RPAREN
Rule 131   result_attribute -> LOC
Rule 132   empty -> <empty>

Terminals, with rules where they appear

AND                  : 74
ARRAY                : 51
ARROW                : 
ASSIGN               : 19 22 23 27
BOOL                 : 37
BY                   : 
CCONST               : 
CHAR                 : 38
CHARS                : 49
CIRCUMF              : 
COLON                : 12 13 43
COMMA                : 15 20 25 52 58 123
CONCAT               : 89
CONCATASSIGN         : 
DBLQUO               : 
DBLSLASH             : 
DCL                  : 9
DIF                  : 77
DIVIDE               : 93
DIVIDEASSIGN         : 
DO                   : 
DOWN                 : 
ELSE                 : 67 110 111
ELSIF                : 68 69 112 113
END                  : 115 116 117 118 119 120 121 122
EQUALS               : 76
EXIT                 : 114
FALSE                : 
FI                   : 63 64 106 107
FOR                  : 
GEQ                  : 79
GTR                  : 78
ICONST               : 60 99
ID                   : 59
IF                   : 63 64 106 107
IN                   : 82
INT                  : 36
LBRACK               : 49 51
LCURL                : 
LENGTH               : 
LEQ                  : 81
LOC                  : 128 131
LOWER                : 
LPAREN               : 39 40 115 116 117 118 119 120 121 122 129 130
LSS                  : 80
MINUS                : 88 97
MINUSASSIGN          : 
NOT                  : 98
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 75
PERC                 : 94
PERCASSIGN           : 
PLUS                 : 87
PLUSASSIGN           : 
PRED                 : 
PRINT                : 
PROC                 : 115 116 117 118 119 120 121 122
RBRACK               : 49 51
RCURL                : 
READ                 : 
REF                  : 46
RESULT               : 
RETURN               : 
RETURNS              : 129 130
RPAREN               : 39 40 115 116 117 118 119 120 121 122 129 130
SCONST               : 
SEMICOL              : 9 10 11 12 13 14 115 116 117 118 119 120 121 122
SINGQUO              : 
SUCC                 : 
SYN                  : 10
THEN                 : 66 108 109
TIMES                : 92
TIMESASSIGN          : 
TO                   : 
TRUE                 : 
TYPE                 : 11
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

action               : 13 14
action_statement     : 8 100 101
action_statement_list : 100 108 110
arithmetic_additive_operator : 85
arithmetic_multiplicative_operator : 91
array_mode           : 48
boolean_expression   : 63 64 68 69 106 107 112 113
boolean_mode         : 33
bracketed_action     : 103
character_mode       : 34
composite_mode       : 31
conditional_expression : 62
constant_expression  : 22 23
declaration          : 15 16
declaration_list     : 9 15
declaration_statement : 4
discrete_mode        : 29 40 54
discrete_mode_name   : 39
discrete_range_mode  : 35
element_mode         : 51
else_clause          : 106 112
else_expression      : 63 64
elsif_expression     : 64 68
empty                : 109 111
exit_action          : 104
expression           : 19 24 44 45 65 66 67
formal_parameter     : 123 124
formal_parameter_list : 115 116 117 119 123
identifier           : 41 42 57 58 102
identifier_list      : 17 18 22 23 27 58 125
if_action            : 105
index_mode           : 52 53
index_mode_list      : 51 52
initialization       : 17
integer_literal      : 50
integer_mode         : 32
label_id             : 12 13 114
literal_range        : 39 40 55
lower_bound          : 43
membership_operator  : 73
mode                 : 17 18 22 27 46 56 126 127 129 130
mode_definition      : 25 26
mode_name            : 28
monadic_operator     : 95
newmode_list         : 11 25
newmode_statement    : 6
operand0             : 61 71
operand1             : 70 71 84
operand2             : 83 84 91
operand3             : 90 91
operand4             : 95 96
operator1            : 71
operator2            : 84
parameter_attribute  : 126
parameter_spec       : 125
procedure_definition : 12
procedure_statement  : 7
program              : 0
reference_mode       : 30
relational_operator  : 72
result_attribute     : 129
result_spec          : 115 116 118 120
statement            : 2 3
statement_list       : 1 2 115 117 118 121
string_concatenation_operator : 86
string_length        : 49
string_mode          : 47
synonym_definition   : 20 21
synonym_list         : 10 20
synonym_statement    : 5
then_clause          : 106 107 112 113
then_expression      : 63 64 68 69
upper_bound          : 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    statement_list                 shift and go to state 2
    synonym_statement              shift and go to state 14
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    program                        shift and go to state 6
    procedure_statement            shift and go to state 16
    action_statement               shift and go to state 17
    statement                      shift and go to state 9
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    label_id                       shift and go to state 15
    action                         shift and go to state 20

state 1

    (6) statement -> newmode_statement .

    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)
    END             reduce using rule 6 (statement -> newmode_statement .)


state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    synonym_statement              shift and go to state 14
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    label_id                       shift and go to state 15
    statement                      shift and go to state 21
    procedure_statement            shift and go to state 16
    action_statement               shift and go to state 17
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    action                         shift and go to state 20

state 3

    (106) if_action -> IF . boolean_expression then_clause else_clause FI
    (107) if_action -> IF . boolean_expression then_clause FI
    (65) boolean_expression -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    boolean_expression             shift and go to state 31
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand0                       shift and go to state 29
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    expression                     shift and go to state 32
    operand2                       shift and go to state 30

state 4

    (10) synonym_statement -> SYN . synonym_list SEMICOL
    (20) synonym_list -> . synonym_list COMMA synonym_definition
    (21) synonym_list -> . synonym_definition
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (23) synonym_definition -> . identifier_list ASSIGN constant_expression
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    synonym_list                   shift and go to state 35
    synonym_definition             shift and go to state 36
    identifier                     shift and go to state 37
    identifier_list                shift and go to state 38

state 5

    (103) action -> bracketed_action .

    SEMICOL         reduce using rule 103 (action -> bracketed_action .)


state 6

    (0) S' -> program .



state 7

    (114) exit_action -> EXIT . label_id
    (102) label_id -> . identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 13
    label_id                       shift and go to state 39

state 8

    (59) identifier -> ID .

    ASSIGN          reduce using rule 59 (identifier -> ID .)
    SEMICOL         reduce using rule 59 (identifier -> ID .)
    COMMA           reduce using rule 59 (identifier -> ID .)
    LOC             reduce using rule 59 (identifier -> ID .)
    RPAREN          reduce using rule 59 (identifier -> ID .)
    LPAREN          reduce using rule 59 (identifier -> ID .)
    COLON           reduce using rule 59 (identifier -> ID .)
    REF             reduce using rule 59 (identifier -> ID .)
    ID              reduce using rule 59 (identifier -> ID .)
    INT             reduce using rule 59 (identifier -> ID .)
    BOOL            reduce using rule 59 (identifier -> ID .)
    CHAR            reduce using rule 59 (identifier -> ID .)
    CHARS           reduce using rule 59 (identifier -> ID .)
    ARRAY           reduce using rule 59 (identifier -> ID .)


state 9

    (3) statement_list -> statement .

    END             reduce using rule 3 (statement_list -> statement .)
    DCL             reduce using rule 3 (statement_list -> statement .)
    SYN             reduce using rule 3 (statement_list -> statement .)
    TYPE            reduce using rule 3 (statement_list -> statement .)
    ID              reduce using rule 3 (statement_list -> statement .)
    EXIT            reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 10

    (104) action -> exit_action .

    SEMICOL         reduce using rule 104 (action -> exit_action .)


state 11

    (9) declaration_statement -> DCL . declaration_list SEMICOL
    (15) declaration_list -> . declaration_list COMMA declaration
    (16) declaration_list -> . declaration
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 37
    declaration                    shift and go to state 40
    declaration_list               shift and go to state 41
    identifier_list                shift and go to state 42

state 12

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)
    END             reduce using rule 4 (statement -> declaration_statement .)


state 13

    (102) label_id -> identifier .

    COLON           reduce using rule 102 (label_id -> identifier .)
    SEMICOL         reduce using rule 102 (label_id -> identifier .)


state 14

    (5) statement -> synonym_statement .

    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)
    END             reduce using rule 5 (statement -> synonym_statement .)


state 15

    (12) procedure_statement -> label_id . COLON procedure_definition SEMICOL
    (13) action_statement -> label_id . COLON action SEMICOL

    COLON           shift and go to state 43


state 16

    (7) statement -> procedure_statement .

    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)
    END             reduce using rule 7 (statement -> procedure_statement .)


state 17

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)


state 18

    (11) newmode_statement -> TYPE . newmode_list SEMICOL
    (25) newmode_list -> . newmode_list COMMA mode_definition
    (26) newmode_list -> . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 37
    newmode_list                   shift and go to state 45
    identifier_list                shift and go to state 46
    mode_definition                shift and go to state 44

state 19

    (105) bracketed_action -> if_action .

    SEMICOL         reduce using rule 105 (bracketed_action -> if_action .)


state 20

    (14) action_statement -> action . SEMICOL

    SEMICOL         shift and go to state 47


state 21

    (2) statement_list -> statement_list statement .

    END             reduce using rule 2 (statement_list -> statement_list statement .)
    DCL             reduce using rule 2 (statement_list -> statement_list statement .)
    SYN             reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 2 (statement_list -> statement_list statement .)
    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 22

    (99) operand4 -> ICONST .

    TIMES           reduce using rule 99 (operand4 -> ICONST .)
    DIVIDE          reduce using rule 99 (operand4 -> ICONST .)
    PERC            reduce using rule 99 (operand4 -> ICONST .)
    PLUS            reduce using rule 99 (operand4 -> ICONST .)
    MINUS           reduce using rule 99 (operand4 -> ICONST .)
    CONCAT          reduce using rule 99 (operand4 -> ICONST .)
    AND             reduce using rule 99 (operand4 -> ICONST .)
    OR              reduce using rule 99 (operand4 -> ICONST .)
    EQUALS          reduce using rule 99 (operand4 -> ICONST .)
    DIF             reduce using rule 99 (operand4 -> ICONST .)
    GTR             reduce using rule 99 (operand4 -> ICONST .)
    GEQ             reduce using rule 99 (operand4 -> ICONST .)
    LSS             reduce using rule 99 (operand4 -> ICONST .)
    LEQ             reduce using rule 99 (operand4 -> ICONST .)
    IN              reduce using rule 99 (operand4 -> ICONST .)
    SEMICOL         reduce using rule 99 (operand4 -> ICONST .)
    COMMA           reduce using rule 99 (operand4 -> ICONST .)
    THEN            reduce using rule 99 (operand4 -> ICONST .)
    ELSE            reduce using rule 99 (operand4 -> ICONST .)
    ELSIF           reduce using rule 99 (operand4 -> ICONST .)
    COLON           reduce using rule 99 (operand4 -> ICONST .)
    FI              reduce using rule 99 (operand4 -> ICONST .)
    RPAREN          reduce using rule 99 (operand4 -> ICONST .)
    RBRACK          reduce using rule 99 (operand4 -> ICONST .)


state 23

    (70) operand0 -> operand1 .
    (84) operand1 -> operand1 . operator2 operand2
    (85) operator2 -> . arithmetic_additive_operator
    (86) operator2 -> . string_concatenation_operator
    (87) arithmetic_additive_operator -> . PLUS
    (88) arithmetic_additive_operator -> . MINUS
    (89) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 70 (operand0 -> operand1 .)
    OR              reduce using rule 70 (operand0 -> operand1 .)
    EQUALS          reduce using rule 70 (operand0 -> operand1 .)
    DIF             reduce using rule 70 (operand0 -> operand1 .)
    GTR             reduce using rule 70 (operand0 -> operand1 .)
    GEQ             reduce using rule 70 (operand0 -> operand1 .)
    LSS             reduce using rule 70 (operand0 -> operand1 .)
    LEQ             reduce using rule 70 (operand0 -> operand1 .)
    IN              reduce using rule 70 (operand0 -> operand1 .)
    COLON           reduce using rule 70 (operand0 -> operand1 .)
    ELSE            reduce using rule 70 (operand0 -> operand1 .)
    ELSIF           reduce using rule 70 (operand0 -> operand1 .)
    THEN            reduce using rule 70 (operand0 -> operand1 .)
    SEMICOL         reduce using rule 70 (operand0 -> operand1 .)
    COMMA           reduce using rule 70 (operand0 -> operand1 .)
    FI              reduce using rule 70 (operand0 -> operand1 .)
    RPAREN          reduce using rule 70 (operand0 -> operand1 .)
    RBRACK          reduce using rule 70 (operand0 -> operand1 .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CONCAT          shift and go to state 50

    arithmetic_additive_operator   shift and go to state 51
    operator2                      shift and go to state 52
    string_concatenation_operator  shift and go to state 53

state 24

    (63) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (64) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (65) boolean_expression -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    boolean_expression             shift and go to state 54
    expression                     shift and go to state 32
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    operand0                       shift and go to state 29
    operand2                       shift and go to state 30

state 25

    (97) monadic_operator -> MINUS .

    ICONST          reduce using rule 97 (monadic_operator -> MINUS .)


state 26

    (98) monadic_operator -> NOT .

    ICONST          reduce using rule 98 (monadic_operator -> NOT .)


state 27

    (96) operand3 -> operand4 .

    TIMES           reduce using rule 96 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 96 (operand3 -> operand4 .)
    PERC            reduce using rule 96 (operand3 -> operand4 .)
    PLUS            reduce using rule 96 (operand3 -> operand4 .)
    MINUS           reduce using rule 96 (operand3 -> operand4 .)
    CONCAT          reduce using rule 96 (operand3 -> operand4 .)
    AND             reduce using rule 96 (operand3 -> operand4 .)
    OR              reduce using rule 96 (operand3 -> operand4 .)
    EQUALS          reduce using rule 96 (operand3 -> operand4 .)
    DIF             reduce using rule 96 (operand3 -> operand4 .)
    GTR             reduce using rule 96 (operand3 -> operand4 .)
    GEQ             reduce using rule 96 (operand3 -> operand4 .)
    LSS             reduce using rule 96 (operand3 -> operand4 .)
    LEQ             reduce using rule 96 (operand3 -> operand4 .)
    IN              reduce using rule 96 (operand3 -> operand4 .)
    COLON           reduce using rule 96 (operand3 -> operand4 .)
    THEN            reduce using rule 96 (operand3 -> operand4 .)
    SEMICOL         reduce using rule 96 (operand3 -> operand4 .)
    COMMA           reduce using rule 96 (operand3 -> operand4 .)
    ELSE            reduce using rule 96 (operand3 -> operand4 .)
    ELSIF           reduce using rule 96 (operand3 -> operand4 .)
    FI              reduce using rule 96 (operand3 -> operand4 .)
    RPAREN          reduce using rule 96 (operand3 -> operand4 .)
    RBRACK          reduce using rule 96 (operand3 -> operand4 .)


state 28

    (90) operand2 -> operand3 .

    TIMES           reduce using rule 90 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 90 (operand2 -> operand3 .)
    PERC            reduce using rule 90 (operand2 -> operand3 .)
    PLUS            reduce using rule 90 (operand2 -> operand3 .)
    MINUS           reduce using rule 90 (operand2 -> operand3 .)
    CONCAT          reduce using rule 90 (operand2 -> operand3 .)
    AND             reduce using rule 90 (operand2 -> operand3 .)
    OR              reduce using rule 90 (operand2 -> operand3 .)
    EQUALS          reduce using rule 90 (operand2 -> operand3 .)
    DIF             reduce using rule 90 (operand2 -> operand3 .)
    GTR             reduce using rule 90 (operand2 -> operand3 .)
    GEQ             reduce using rule 90 (operand2 -> operand3 .)
    LSS             reduce using rule 90 (operand2 -> operand3 .)
    LEQ             reduce using rule 90 (operand2 -> operand3 .)
    IN              reduce using rule 90 (operand2 -> operand3 .)
    THEN            reduce using rule 90 (operand2 -> operand3 .)
    SEMICOL         reduce using rule 90 (operand2 -> operand3 .)
    COMMA           reduce using rule 90 (operand2 -> operand3 .)
    ELSE            reduce using rule 90 (operand2 -> operand3 .)
    ELSIF           reduce using rule 90 (operand2 -> operand3 .)
    COLON           reduce using rule 90 (operand2 -> operand3 .)
    FI              reduce using rule 90 (operand2 -> operand3 .)
    RPAREN          reduce using rule 90 (operand2 -> operand3 .)
    RBRACK          reduce using rule 90 (operand2 -> operand3 .)


state 29

    (61) expression -> operand0 .
    (71) operand0 -> operand0 . operator1 operand1
    (72) operator1 -> . relational_operator
    (73) operator1 -> . membership_operator
    (74) relational_operator -> . AND
    (75) relational_operator -> . OR
    (76) relational_operator -> . EQUALS
    (77) relational_operator -> . DIF
    (78) relational_operator -> . GTR
    (79) relational_operator -> . GEQ
    (80) relational_operator -> . LSS
    (81) relational_operator -> . LEQ
    (82) membership_operator -> . IN

    COLON           reduce using rule 61 (expression -> operand0 .)
    THEN            reduce using rule 61 (expression -> operand0 .)
    RPAREN          reduce using rule 61 (expression -> operand0 .)
    RBRACK          reduce using rule 61 (expression -> operand0 .)
    COMMA           reduce using rule 61 (expression -> operand0 .)
    SEMICOL         reduce using rule 61 (expression -> operand0 .)
    ELSE            reduce using rule 61 (expression -> operand0 .)
    ELSIF           reduce using rule 61 (expression -> operand0 .)
    FI              reduce using rule 61 (expression -> operand0 .)
    AND             shift and go to state 60
    OR              shift and go to state 56
    EQUALS          shift and go to state 65
    DIF             shift and go to state 64
    GTR             shift and go to state 66
    GEQ             shift and go to state 61
    LSS             shift and go to state 63
    LEQ             shift and go to state 57
    IN              shift and go to state 59

    membership_operator            shift and go to state 55
    operator1                      shift and go to state 58
    relational_operator            shift and go to state 62

state 30

    (83) operand1 -> operand2 .
    (91) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (92) arithmetic_multiplicative_operator -> . TIMES
    (93) arithmetic_multiplicative_operator -> . DIVIDE
    (94) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 83 (operand1 -> operand2 .)
    MINUS           reduce using rule 83 (operand1 -> operand2 .)
    CONCAT          reduce using rule 83 (operand1 -> operand2 .)
    AND             reduce using rule 83 (operand1 -> operand2 .)
    OR              reduce using rule 83 (operand1 -> operand2 .)
    EQUALS          reduce using rule 83 (operand1 -> operand2 .)
    DIF             reduce using rule 83 (operand1 -> operand2 .)
    GTR             reduce using rule 83 (operand1 -> operand2 .)
    GEQ             reduce using rule 83 (operand1 -> operand2 .)
    LSS             reduce using rule 83 (operand1 -> operand2 .)
    LEQ             reduce using rule 83 (operand1 -> operand2 .)
    IN              reduce using rule 83 (operand1 -> operand2 .)
    SEMICOL         reduce using rule 83 (operand1 -> operand2 .)
    COMMA           reduce using rule 83 (operand1 -> operand2 .)
    THEN            reduce using rule 83 (operand1 -> operand2 .)
    ELSE            reduce using rule 83 (operand1 -> operand2 .)
    ELSIF           reduce using rule 83 (operand1 -> operand2 .)
    COLON           reduce using rule 83 (operand1 -> operand2 .)
    FI              reduce using rule 83 (operand1 -> operand2 .)
    RPAREN          reduce using rule 83 (operand1 -> operand2 .)
    RBRACK          reduce using rule 83 (operand1 -> operand2 .)
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 70
    PERC            shift and go to state 68

    arithmetic_multiplicative_operator shift and go to state 69

state 31

    (106) if_action -> IF boolean_expression . then_clause else_clause FI
    (107) if_action -> IF boolean_expression . then_clause FI
    (108) then_clause -> . THEN action_statement_list
    (109) then_clause -> . THEN empty

    THEN            shift and go to state 71

    then_clause                    shift and go to state 72

state 32

    (65) boolean_expression -> expression .

    THEN            reduce using rule 65 (boolean_expression -> expression .)


state 33

    (95) operand3 -> monadic_operator . operand4
    (99) operand4 -> . ICONST

    ICONST          shift and go to state 22

    operand4                       shift and go to state 73

state 34

    (62) expression -> conditional_expression .

    COLON           reduce using rule 62 (expression -> conditional_expression .)
    THEN            reduce using rule 62 (expression -> conditional_expression .)
    RPAREN          reduce using rule 62 (expression -> conditional_expression .)
    RBRACK          reduce using rule 62 (expression -> conditional_expression .)
    COMMA           reduce using rule 62 (expression -> conditional_expression .)
    SEMICOL         reduce using rule 62 (expression -> conditional_expression .)
    ELSE            reduce using rule 62 (expression -> conditional_expression .)
    ELSIF           reduce using rule 62 (expression -> conditional_expression .)
    FI              reduce using rule 62 (expression -> conditional_expression .)


state 35

    (10) synonym_statement -> SYN synonym_list . SEMICOL
    (20) synonym_list -> synonym_list . COMMA synonym_definition

    SEMICOL         shift and go to state 75
    COMMA           shift and go to state 74


state 36

    (21) synonym_list -> synonym_definition .

    SEMICOL         reduce using rule 21 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 21 (synonym_list -> synonym_definition .)


state 37

    (57) identifier_list -> identifier .

    ASSIGN          reduce using rule 57 (identifier_list -> identifier .)
    COMMA           reduce using rule 57 (identifier_list -> identifier .)
    REF             reduce using rule 57 (identifier_list -> identifier .)
    ID              reduce using rule 57 (identifier_list -> identifier .)
    INT             reduce using rule 57 (identifier_list -> identifier .)
    BOOL            reduce using rule 57 (identifier_list -> identifier .)
    CHAR            reduce using rule 57 (identifier_list -> identifier .)
    CHARS           reduce using rule 57 (identifier_list -> identifier .)
    ARRAY           reduce using rule 57 (identifier_list -> identifier .)


state 38

    (22) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (23) synonym_definition -> identifier_list . ASSIGN constant_expression
    (58) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 80
    COMMA           shift and go to state 83
    REF             shift and go to state 87
    ID              shift and go to state 8
    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    CHARS           shift and go to state 79
    ARRAY           shift and go to state 90

    array_mode                     shift and go to state 84
    identifier                     shift and go to state 85
    discrete_mode                  shift and go to state 76
    string_mode                    shift and go to state 86
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    composite_mode                 shift and go to state 88
    boolean_mode                   shift and go to state 89
    reference_mode                 shift and go to state 95
    mode                           shift and go to state 81
    mode_name                      shift and go to state 82
    discrete_range_mode            shift and go to state 93
    character_mode                 shift and go to state 96

state 39

    (114) exit_action -> EXIT label_id .

    SEMICOL         reduce using rule 114 (exit_action -> EXIT label_id .)


state 40

    (16) declaration_list -> declaration .

    SEMICOL         reduce using rule 16 (declaration_list -> declaration .)
    COMMA           reduce using rule 16 (declaration_list -> declaration .)


state 41

    (9) declaration_statement -> DCL declaration_list . SEMICOL
    (15) declaration_list -> declaration_list . COMMA declaration

    SEMICOL         shift and go to state 98
    COMMA           shift and go to state 97


state 42

    (17) declaration -> identifier_list . mode initialization
    (18) declaration -> identifier_list . mode
    (58) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 83
    REF             shift and go to state 87
    ID              shift and go to state 8
    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    CHARS           shift and go to state 79
    ARRAY           shift and go to state 90

    array_mode                     shift and go to state 84
    identifier                     shift and go to state 85
    discrete_mode                  shift and go to state 76
    string_mode                    shift and go to state 86
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    composite_mode                 shift and go to state 88
    boolean_mode                   shift and go to state 89
    reference_mode                 shift and go to state 95
    mode                           shift and go to state 99
    mode_name                      shift and go to state 82
    discrete_range_mode            shift and go to state 93
    character_mode                 shift and go to state 96

state 43

    (12) procedure_statement -> label_id COLON . procedure_definition SEMICOL
    (13) action_statement -> label_id COLON . action SEMICOL
    (115) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (116) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
    (117) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
    (118) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMICOL statement_list END
    (119) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMICOL END
    (120) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMICOL END
    (121) procedure_definition -> . PROC LPAREN RPAREN SEMICOL statement_list END
    (122) procedure_definition -> . PROC LPAREN RPAREN SEMICOL END
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    PROC            shift and go to state 100
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    bracketed_action               shift and go to state 5
    procedure_definition           shift and go to state 102
    exit_action                    shift and go to state 10
    action                         shift and go to state 101
    if_action                      shift and go to state 19

state 44

    (26) newmode_list -> mode_definition .

    SEMICOL         reduce using rule 26 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 26 (newmode_list -> mode_definition .)


state 45

    (11) newmode_statement -> TYPE newmode_list . SEMICOL
    (25) newmode_list -> newmode_list . COMMA mode_definition

    SEMICOL         shift and go to state 104
    COMMA           shift and go to state 103


state 46

    (27) mode_definition -> identifier_list . ASSIGN mode
    (58) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 105
    COMMA           shift and go to state 83


state 47

    (14) action_statement -> action SEMICOL .

    END             reduce using rule 14 (action_statement -> action SEMICOL .)
    DCL             reduce using rule 14 (action_statement -> action SEMICOL .)
    SYN             reduce using rule 14 (action_statement -> action SEMICOL .)
    TYPE            reduce using rule 14 (action_statement -> action SEMICOL .)
    ID              reduce using rule 14 (action_statement -> action SEMICOL .)
    EXIT            reduce using rule 14 (action_statement -> action SEMICOL .)
    IF              reduce using rule 14 (action_statement -> action SEMICOL .)
    FI              reduce using rule 14 (action_statement -> action SEMICOL .)
    ELSE            reduce using rule 14 (action_statement -> action SEMICOL .)
    ELSIF           reduce using rule 14 (action_statement -> action SEMICOL .)
    $end            reduce using rule 14 (action_statement -> action SEMICOL .)


state 48

    (87) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 87 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 87 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 87 (arithmetic_additive_operator -> PLUS .)


state 49

    (88) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 88 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 88 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 88 (arithmetic_additive_operator -> MINUS .)


state 50

    (89) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 89 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 89 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 89 (string_concatenation_operator -> CONCAT .)


state 51

    (85) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 85 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 85 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 85 (operator2 -> arithmetic_additive_operator .)


state 52

    (84) operand1 -> operand1 operator2 . operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    operand4                       shift and go to state 27
    monadic_operator               shift and go to state 33
    operand3                       shift and go to state 28
    operand2                       shift and go to state 106

state 53

    (86) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 86 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 86 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 86 (operator2 -> string_concatenation_operator .)


state 54

    (63) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (64) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (66) then_expression -> . THEN expression

    THEN            shift and go to state 108

    then_expression                shift and go to state 107

state 55

    (73) operator1 -> membership_operator .

    MINUS           reduce using rule 73 (operator1 -> membership_operator .)
    NOT             reduce using rule 73 (operator1 -> membership_operator .)
    ICONST          reduce using rule 73 (operator1 -> membership_operator .)


state 56

    (75) relational_operator -> OR .

    MINUS           reduce using rule 75 (relational_operator -> OR .)
    NOT             reduce using rule 75 (relational_operator -> OR .)
    ICONST          reduce using rule 75 (relational_operator -> OR .)


state 57

    (81) relational_operator -> LEQ .

    MINUS           reduce using rule 81 (relational_operator -> LEQ .)
    NOT             reduce using rule 81 (relational_operator -> LEQ .)
    ICONST          reduce using rule 81 (relational_operator -> LEQ .)


state 58

    (71) operand0 -> operand0 operator1 . operand1
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    operand1                       shift and go to state 109
    operand4                       shift and go to state 27
    monadic_operator               shift and go to state 33
    operand3                       shift and go to state 28
    operand2                       shift and go to state 30

state 59

    (82) membership_operator -> IN .

    MINUS           reduce using rule 82 (membership_operator -> IN .)
    NOT             reduce using rule 82 (membership_operator -> IN .)
    ICONST          reduce using rule 82 (membership_operator -> IN .)


state 60

    (74) relational_operator -> AND .

    MINUS           reduce using rule 74 (relational_operator -> AND .)
    NOT             reduce using rule 74 (relational_operator -> AND .)
    ICONST          reduce using rule 74 (relational_operator -> AND .)


state 61

    (79) relational_operator -> GEQ .

    MINUS           reduce using rule 79 (relational_operator -> GEQ .)
    NOT             reduce using rule 79 (relational_operator -> GEQ .)
    ICONST          reduce using rule 79 (relational_operator -> GEQ .)


state 62

    (72) operator1 -> relational_operator .

    MINUS           reduce using rule 72 (operator1 -> relational_operator .)
    NOT             reduce using rule 72 (operator1 -> relational_operator .)
    ICONST          reduce using rule 72 (operator1 -> relational_operator .)


state 63

    (80) relational_operator -> LSS .

    MINUS           reduce using rule 80 (relational_operator -> LSS .)
    NOT             reduce using rule 80 (relational_operator -> LSS .)
    ICONST          reduce using rule 80 (relational_operator -> LSS .)


state 64

    (77) relational_operator -> DIF .

    MINUS           reduce using rule 77 (relational_operator -> DIF .)
    NOT             reduce using rule 77 (relational_operator -> DIF .)
    ICONST          reduce using rule 77 (relational_operator -> DIF .)


state 65

    (76) relational_operator -> EQUALS .

    MINUS           reduce using rule 76 (relational_operator -> EQUALS .)
    NOT             reduce using rule 76 (relational_operator -> EQUALS .)
    ICONST          reduce using rule 76 (relational_operator -> EQUALS .)


state 66

    (78) relational_operator -> GTR .

    MINUS           reduce using rule 78 (relational_operator -> GTR .)
    NOT             reduce using rule 78 (relational_operator -> GTR .)
    ICONST          reduce using rule 78 (relational_operator -> GTR .)


state 67

    (92) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 92 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 92 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 92 (arithmetic_multiplicative_operator -> TIMES .)


state 68

    (94) arithmetic_multiplicative_operator -> PERC .

    MINUS           reduce using rule 94 (arithmetic_multiplicative_operator -> PERC .)
    NOT             reduce using rule 94 (arithmetic_multiplicative_operator -> PERC .)
    ICONST          reduce using rule 94 (arithmetic_multiplicative_operator -> PERC .)


state 69

    (91) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    monadic_operator               shift and go to state 33
    operand3                       shift and go to state 110
    operand4                       shift and go to state 27

state 70

    (93) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 93 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 93 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 93 (arithmetic_multiplicative_operator -> DIVIDE .)


state 71

    (108) then_clause -> THEN . action_statement_list
    (109) then_clause -> THEN . empty
    (100) action_statement_list -> . action_statement_list action_statement
    (101) action_statement_list -> . action_statement
    (132) empty -> .
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 132 (empty -> .)
    ELSE            reduce using rule 132 (empty -> .)
    ELSIF           reduce using rule 132 (empty -> .)
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    identifier                     shift and go to state 13
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    action_statement               shift and go to state 111
    empty                          shift and go to state 112
    exit_action                    shift and go to state 10
    action                         shift and go to state 20
    label_id                       shift and go to state 113
    action_statement_list          shift and go to state 114

state 72

    (106) if_action -> IF boolean_expression then_clause . else_clause FI
    (107) if_action -> IF boolean_expression then_clause . FI
    (110) else_clause -> . ELSE action_statement_list
    (111) else_clause -> . ELSE empty
    (112) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (113) else_clause -> . ELSIF boolean_expression then_clause

    FI              shift and go to state 118
    ELSE            shift and go to state 117
    ELSIF           shift and go to state 115

    else_clause                    shift and go to state 116

state 73

    (95) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    PERC            reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    EQUALS          reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    DIF             reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    GTR             reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    GEQ             reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    LSS             reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    LEQ             reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    SEMICOL         reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 95 (operand3 -> monadic_operator operand4 .)
    RBRACK          reduce using rule 95 (operand3 -> monadic_operator operand4 .)


state 74

    (20) synonym_list -> synonym_list COMMA . synonym_definition
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (23) synonym_definition -> . identifier_list ASSIGN constant_expression
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    synonym_definition             shift and go to state 119
    identifier                     shift and go to state 37
    identifier_list                shift and go to state 38

state 75

    (10) synonym_statement -> SYN synonym_list SEMICOL .

    DCL             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    SYN             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    TYPE            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    ID              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    EXIT            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    IF              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    $end            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    END             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)


state 76

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    ASSIGN          reduce using rule 29 (mode -> discrete_mode .)
    SEMICOL         reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 120


state 77

    (39) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 121


state 78

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACK          reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMICOL         reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)


state 79

    (49) string_mode -> CHARS . LBRACK string_length RBRACK

    LBRACK          shift and go to state 122


state 80

    (23) synonym_definition -> identifier_list ASSIGN . constant_expression
    (24) constant_expression -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    constant_expression            shift and go to state 123
    operand2                       shift and go to state 30
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand0                       shift and go to state 29
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    expression                     shift and go to state 124

state 81

    (22) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 125


state 82

    (28) mode -> mode_name .

    RPAREN          reduce using rule 28 (mode -> mode_name .)
    LOC             reduce using rule 28 (mode -> mode_name .)
    COMMA           reduce using rule 28 (mode -> mode_name .)
    ASSIGN          reduce using rule 28 (mode -> mode_name .)
    SEMICOL         reduce using rule 28 (mode -> mode_name .)


state 83

    (58) identifier_list -> identifier_list COMMA . identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 126

state 84

    (48) composite_mode -> array_mode .

    RPAREN          reduce using rule 48 (composite_mode -> array_mode .)
    LOC             reduce using rule 48 (composite_mode -> array_mode .)
    COMMA           reduce using rule 48 (composite_mode -> array_mode .)
    ASSIGN          reduce using rule 48 (composite_mode -> array_mode .)
    SEMICOL         reduce using rule 48 (composite_mode -> array_mode .)


state 85

    (41) mode_name -> identifier .
    (42) discrete_mode_name -> identifier .

    SEMICOL         reduce using rule 41 (mode_name -> identifier .)
    COMMA           reduce using rule 41 (mode_name -> identifier .)
    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 86

    (47) composite_mode -> string_mode .

    RPAREN          reduce using rule 47 (composite_mode -> string_mode .)
    LOC             reduce using rule 47 (composite_mode -> string_mode .)
    COMMA           reduce using rule 47 (composite_mode -> string_mode .)
    ASSIGN          reduce using rule 47 (composite_mode -> string_mode .)
    SEMICOL         reduce using rule 47 (composite_mode -> string_mode .)


state 87

    (46) reference_mode -> REF . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 87
    ID              shift and go to state 8
    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    CHARS           shift and go to state 79
    ARRAY           shift and go to state 90

    array_mode                     shift and go to state 84
    identifier                     shift and go to state 85
    discrete_mode                  shift and go to state 76
    string_mode                    shift and go to state 86
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    composite_mode                 shift and go to state 88
    boolean_mode                   shift and go to state 89
    reference_mode                 shift and go to state 95
    mode                           shift and go to state 127
    mode_name                      shift and go to state 82
    discrete_range_mode            shift and go to state 93
    character_mode                 shift and go to state 96

state 88

    (31) mode -> composite_mode .

    RPAREN          reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    ASSIGN          reduce using rule 31 (mode -> composite_mode .)
    SEMICOL         reduce using rule 31 (mode -> composite_mode .)


state 89

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACK          reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMICOL         reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)


state 90

    (51) array_mode -> ARRAY . LBRACK index_mode_list RBRACK element_mode

    LBRACK          shift and go to state 128


state 91

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    RBRACK          reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 38 (character_mode -> CHAR .)
    SEMICOL         reduce using rule 38 (character_mode -> CHAR .)


state 92

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    ASSIGN          reduce using rule 36 (integer_mode -> INT .)
    SEMICOL         reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    LOC             reduce using rule 36 (integer_mode -> INT .)
    RPAREN          reduce using rule 36 (integer_mode -> INT .)
    RBRACK          reduce using rule 36 (integer_mode -> INT .)


state 93

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACK          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMICOL         reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 94

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 37 (boolean_mode -> BOOL .)
    SEMICOL         reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACK          reduce using rule 37 (boolean_mode -> BOOL .)


state 95

    (30) mode -> reference_mode .

    RPAREN          reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    ASSIGN          reduce using rule 30 (mode -> reference_mode .)
    SEMICOL         reduce using rule 30 (mode -> reference_mode .)


state 96

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACK          reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> character_mode .)
    SEMICOL         reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)


state 97

    (15) declaration_list -> declaration_list COMMA . declaration
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 37
    declaration                    shift and go to state 129
    identifier_list                shift and go to state 42

state 98

    (9) declaration_statement -> DCL declaration_list SEMICOL .

    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)


state 99

    (17) declaration -> identifier_list mode . initialization
    (18) declaration -> identifier_list mode .
    (19) initialization -> . ASSIGN expression

    SEMICOL         reduce using rule 18 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 18 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 131

    initialization                 shift and go to state 130

state 100

    (115) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (116) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
    (117) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
    (118) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMICOL statement_list END
    (119) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMICOL END
    (120) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMICOL END
    (121) procedure_definition -> PROC . LPAREN RPAREN SEMICOL statement_list END
    (122) procedure_definition -> PROC . LPAREN RPAREN SEMICOL END

    LPAREN          shift and go to state 132


state 101

    (13) action_statement -> label_id COLON action . SEMICOL

    SEMICOL         shift and go to state 133


state 102

    (12) procedure_statement -> label_id COLON procedure_definition . SEMICOL

    SEMICOL         shift and go to state 134


state 103

    (25) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    identifier                     shift and go to state 37
    identifier_list                shift and go to state 46
    mode_definition                shift and go to state 135

state 104

    (11) newmode_statement -> TYPE newmode_list SEMICOL .

    END             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    DCL             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    SYN             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    TYPE            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    ID              reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    EXIT            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    IF              reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    $end            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)


state 105

    (27) mode_definition -> identifier_list ASSIGN . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 87
    ID              shift and go to state 8
    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    CHARS           shift and go to state 79
    ARRAY           shift and go to state 90

    array_mode                     shift and go to state 84
    identifier                     shift and go to state 85
    reference_mode                 shift and go to state 95
    string_mode                    shift and go to state 86
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    composite_mode                 shift and go to state 88
    boolean_mode                   shift and go to state 89
    discrete_mode                  shift and go to state 76
    mode                           shift and go to state 136
    mode_name                      shift and go to state 82
    discrete_range_mode            shift and go to state 93
    character_mode                 shift and go to state 96

state 106

    (84) operand1 -> operand1 operator2 operand2 .
    (91) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (92) arithmetic_multiplicative_operator -> . TIMES
    (93) arithmetic_multiplicative_operator -> . DIVIDE
    (94) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    EQUALS          reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    DIF             reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    GTR             reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    GEQ             reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    LSS             reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    LEQ             reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    SEMICOL         reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    RBRACK          reduce using rule 84 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 70
    PERC            shift and go to state 68

    arithmetic_multiplicative_operator shift and go to state 69

state 107

    (63) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (64) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (67) else_expression -> . ELSE expression
    (68) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression
    (69) elsif_expression -> . ELSIF boolean_expression then_expression

    ELSE            shift and go to state 140
    ELSIF           shift and go to state 137

    else_expression                shift and go to state 138
    elsif_expression               shift and go to state 139

state 108

    (66) then_expression -> THEN . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    expression                     shift and go to state 141
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    operand0                       shift and go to state 29
    operand2                       shift and go to state 30

state 109

    (71) operand0 -> operand0 operator1 operand1 .
    (84) operand1 -> operand1 . operator2 operand2
    (85) operator2 -> . arithmetic_additive_operator
    (86) operator2 -> . string_concatenation_operator
    (87) arithmetic_additive_operator -> . PLUS
    (88) arithmetic_additive_operator -> . MINUS
    (89) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    EQUALS          reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    DIF             reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    GTR             reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    GEQ             reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    LSS             reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    LEQ             reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    SEMICOL         reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    RBRACK          reduce using rule 71 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    CONCAT          shift and go to state 50

    arithmetic_additive_operator   shift and go to state 51
    operator2                      shift and go to state 52
    string_concatenation_operator  shift and go to state 53

state 110

    (91) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PERC            reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUALS          reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIF             reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTR             reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GEQ             reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LSS             reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LEQ             reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMICOL         reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACK          reduce using rule 91 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 111

    (101) action_statement_list -> action_statement .

    ID              reduce using rule 101 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 101 (action_statement_list -> action_statement .)
    IF              reduce using rule 101 (action_statement_list -> action_statement .)
    FI              reduce using rule 101 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 101 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 101 (action_statement_list -> action_statement .)


state 112

    (109) then_clause -> THEN empty .

    FI              reduce using rule 109 (then_clause -> THEN empty .)
    ELSE            reduce using rule 109 (then_clause -> THEN empty .)
    ELSIF           reduce using rule 109 (then_clause -> THEN empty .)


state 113

    (13) action_statement -> label_id . COLON action SEMICOL

    COLON           shift and go to state 142


state 114

    (108) then_clause -> THEN action_statement_list .
    (100) action_statement_list -> action_statement_list . action_statement
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 108 (then_clause -> THEN action_statement_list .)
    ELSE            reduce using rule 108 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 108 (then_clause -> THEN action_statement_list .)
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    action_statement               shift and go to state 143
    identifier                     shift and go to state 13
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    exit_action                    shift and go to state 10
    action                         shift and go to state 20
    label_id                       shift and go to state 113

state 115

    (112) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (113) else_clause -> ELSIF . boolean_expression then_clause
    (65) boolean_expression -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    boolean_expression             shift and go to state 144
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand0                       shift and go to state 29
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    expression                     shift and go to state 32
    operand2                       shift and go to state 30

state 116

    (106) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 145


state 117

    (110) else_clause -> ELSE . action_statement_list
    (111) else_clause -> ELSE . empty
    (100) action_statement_list -> . action_statement_list action_statement
    (101) action_statement_list -> . action_statement
    (132) empty -> .
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 132 (empty -> .)
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    identifier                     shift and go to state 13
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    action_statement               shift and go to state 111
    empty                          shift and go to state 146
    exit_action                    shift and go to state 10
    action                         shift and go to state 20
    label_id                       shift and go to state 113
    action_statement_list          shift and go to state 147

state 118

    (107) if_action -> IF boolean_expression then_clause FI .

    SEMICOL         reduce using rule 107 (if_action -> IF boolean_expression then_clause FI .)


state 119

    (20) synonym_list -> synonym_list COMMA synonym_definition .

    SEMICOL         reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)


state 120

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    literal_range                  shift and go to state 148
    lower_bound                    shift and go to state 149
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand0                       shift and go to state 29
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    expression                     shift and go to state 150
    operand2                       shift and go to state 30

state 121

    (39) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    literal_range                  shift and go to state 151
    lower_bound                    shift and go to state 149
    monadic_operator               shift and go to state 33
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    operand0                       shift and go to state 29
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    expression                     shift and go to state 150
    operand2                       shift and go to state 30

state 122

    (49) string_mode -> CHARS LBRACK . string_length RBRACK
    (50) string_length -> . integer_literal
    (60) integer_literal -> . ICONST

    ICONST          shift and go to state 153

    string_length                  shift and go to state 154
    integer_literal                shift and go to state 152

state 123

    (23) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMICOL         reduce using rule 23 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    COMMA           reduce using rule 23 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 124

    (24) constant_expression -> expression .

    SEMICOL         reduce using rule 24 (constant_expression -> expression .)
    COMMA           reduce using rule 24 (constant_expression -> expression .)


state 125

    (22) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (24) constant_expression -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    constant_expression            shift and go to state 155
    operand2                       shift and go to state 30
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand0                       shift and go to state 29
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    expression                     shift and go to state 124

state 126

    (58) identifier_list -> identifier_list COMMA identifier .

    ASSIGN          reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)


state 127

    (46) reference_mode -> REF mode .

    ASSIGN          reduce using rule 46 (reference_mode -> REF mode .)
    SEMICOL         reduce using rule 46 (reference_mode -> REF mode .)
    COMMA           reduce using rule 46 (reference_mode -> REF mode .)
    LOC             reduce using rule 46 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 46 (reference_mode -> REF mode .)


state 128

    (51) array_mode -> ARRAY LBRACK . index_mode_list RBRACK element_mode
    (52) index_mode_list -> . index_mode_list COMMA index_mode
    (53) index_mode_list -> . index_mode
    (54) index_mode -> . discrete_mode
    (55) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (59) identifier -> . ID
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    ID              shift and go to state 8
    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    discrete_mode                  shift and go to state 156
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    monadic_operator               shift and go to state 33
    literal_range                  shift and go to state 158
    character_mode                 shift and go to state 96
    operand4                       shift and go to state 27
    operand3                       shift and go to state 28
    operand0                       shift and go to state 29
    expression                     shift and go to state 150
    operand2                       shift and go to state 30
    index_mode_list                shift and go to state 159
    identifier                     shift and go to state 157
    index_mode                     shift and go to state 160
    lower_bound                    shift and go to state 149
    boolean_mode                   shift and go to state 89
    operand1                       shift and go to state 23
    discrete_range_mode            shift and go to state 93
    conditional_expression         shift and go to state 34

state 129

    (15) declaration_list -> declaration_list COMMA declaration .

    SEMICOL         reduce using rule 15 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 15 (declaration_list -> declaration_list COMMA declaration .)


state 130

    (17) declaration -> identifier_list mode initialization .

    SEMICOL         reduce using rule 17 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 17 (declaration -> identifier_list mode initialization .)


state 131

    (19) initialization -> ASSIGN . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    expression                     shift and go to state 161
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    operand0                       shift and go to state 29
    operand2                       shift and go to state 30

state 132

    (115) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (116) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMICOL END
    (117) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMICOL statement_list END
    (118) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMICOL statement_list END
    (119) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMICOL END
    (120) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMICOL END
    (121) procedure_definition -> PROC LPAREN . RPAREN SEMICOL statement_list END
    (122) procedure_definition -> PROC LPAREN . RPAREN SEMICOL END
    (123) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (124) formal_parameter_list -> . formal_parameter
    (125) formal_parameter -> . identifier_list parameter_spec
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    RPAREN          shift and go to state 163
    ID              shift and go to state 8

    formal_parameter_list          shift and go to state 162
    formal_parameter               shift and go to state 164
    identifier                     shift and go to state 37
    identifier_list                shift and go to state 165

state 133

    (13) action_statement -> label_id COLON action SEMICOL .

    END             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    DCL             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    SYN             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    TYPE            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ID              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    EXIT            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    IF              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    FI              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ELSE            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ELSIF           reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    $end            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)


state 134

    (12) procedure_statement -> label_id COLON procedure_definition SEMICOL .

    END             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    DCL             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    SYN             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    TYPE            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    ID              reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    EXIT            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    IF              reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    $end            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)


state 135

    (25) newmode_list -> newmode_list COMMA mode_definition .

    SEMICOL         reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)


state 136

    (27) mode_definition -> identifier_list ASSIGN mode .

    SEMICOL         reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 137

    (69) elsif_expression -> ELSIF . boolean_expression then_expression
    (65) boolean_expression -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    boolean_expression             shift and go to state 166
    expression                     shift and go to state 32
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    operand0                       shift and go to state 29
    operand2                       shift and go to state 30

state 138

    (63) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 167


state 139

    (64) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (68) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (67) else_expression -> . ELSE expression

    ELSIF           shift and go to state 168
    ELSE            shift and go to state 140

    else_expression                shift and go to state 169

state 140

    (67) else_expression -> ELSE . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    expression                     shift and go to state 170
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    operand0                       shift and go to state 29
    operand2                       shift and go to state 30

state 141

    (66) then_expression -> THEN expression .

    ELSE            reduce using rule 66 (then_expression -> THEN expression .)
    ELSIF           reduce using rule 66 (then_expression -> THEN expression .)


state 142

    (13) action_statement -> label_id COLON . action SEMICOL
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    EXIT            shift and go to state 7
    IF              shift and go to state 3

    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    exit_action                    shift and go to state 10
    action                         shift and go to state 101

state 143

    (100) action_statement_list -> action_statement_list action_statement .

    ID              reduce using rule 100 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 100 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 100 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 100 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 100 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 100 (action_statement_list -> action_statement_list action_statement .)


state 144

    (112) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (113) else_clause -> ELSIF boolean_expression . then_clause
    (108) then_clause -> . THEN action_statement_list
    (109) then_clause -> . THEN empty

    THEN            shift and go to state 71

    then_clause                    shift and go to state 171

state 145

    (106) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMICOL         reduce using rule 106 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 146

    (111) else_clause -> ELSE empty .

    FI              reduce using rule 111 (else_clause -> ELSE empty .)


state 147

    (110) else_clause -> ELSE action_statement_list .
    (100) action_statement_list -> action_statement_list . action_statement
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 110 (else_clause -> ELSE action_statement_list .)
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    action_statement               shift and go to state 143
    identifier                     shift and go to state 13
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    exit_action                    shift and go to state 10
    action                         shift and go to state 20
    label_id                       shift and go to state 113

state 148

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 172


state 149

    (43) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 173


state 150

    (44) lower_bound -> expression .

    COLON           reduce using rule 44 (lower_bound -> expression .)


state 151

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 174


state 152

    (50) string_length -> integer_literal .

    RBRACK          reduce using rule 50 (string_length -> integer_literal .)


state 153

    (60) integer_literal -> ICONST .

    RBRACK          reduce using rule 60 (integer_literal -> ICONST .)


state 154

    (49) string_mode -> CHARS LBRACK string_length . RBRACK

    RBRACK          shift and go to state 175


state 155

    (22) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMICOL         reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    COMMA           reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 156

    (54) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACK          reduce using rule 54 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 54 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 120


state 157

    (42) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 158

    (55) index_mode -> literal_range .

    RBRACK          reduce using rule 55 (index_mode -> literal_range .)
    COMMA           reduce using rule 55 (index_mode -> literal_range .)


state 159

    (51) array_mode -> ARRAY LBRACK index_mode_list . RBRACK element_mode
    (52) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACK          shift and go to state 176
    COMMA           shift and go to state 177


state 160

    (53) index_mode_list -> index_mode .

    RBRACK          reduce using rule 53 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 53 (index_mode_list -> index_mode .)


state 161

    (19) initialization -> ASSIGN expression .

    SEMICOL         reduce using rule 19 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 19 (initialization -> ASSIGN expression .)


state 162

    (115) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMICOL statement_list END
    (116) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMICOL END
    (117) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMICOL statement_list END
    (119) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMICOL END
    (123) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 178
    COMMA           shift and go to state 179


state 163

    (118) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMICOL statement_list END
    (120) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMICOL END
    (121) procedure_definition -> PROC LPAREN RPAREN . SEMICOL statement_list END
    (122) procedure_definition -> PROC LPAREN RPAREN . SEMICOL END
    (129) result_spec -> . RETURNS LPAREN mode result_attribute RPAREN
    (130) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMICOL         shift and go to state 181
    RETURNS         shift and go to state 182

    result_spec                    shift and go to state 180

state 164

    (124) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 124 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 124 (formal_parameter_list -> formal_parameter .)


state 165

    (125) formal_parameter -> identifier_list . parameter_spec
    (58) identifier_list -> identifier_list . COMMA identifier
    (126) parameter_spec -> . mode parameter_attribute
    (127) parameter_spec -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 83
    REF             shift and go to state 87
    ID              shift and go to state 8
    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    CHARS           shift and go to state 79
    ARRAY           shift and go to state 90

    array_mode                     shift and go to state 84
    identifier                     shift and go to state 85
    discrete_mode                  shift and go to state 76
    string_mode                    shift and go to state 86
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    character_mode                 shift and go to state 96
    composite_mode                 shift and go to state 88
    boolean_mode                   shift and go to state 89
    reference_mode                 shift and go to state 95
    mode                           shift and go to state 183
    parameter_spec                 shift and go to state 184
    discrete_range_mode            shift and go to state 93
    mode_name                      shift and go to state 82

state 166

    (69) elsif_expression -> ELSIF boolean_expression . then_expression
    (66) then_expression -> . THEN expression

    THEN            shift and go to state 108

    then_expression                shift and go to state 185

state 167

    (63) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    THEN            reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SEMICOL         reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACK          reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSE            reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 63 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 168

    (68) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (65) boolean_expression -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    boolean_expression             shift and go to state 186
    expression                     shift and go to state 32
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    operand0                       shift and go to state 29
    operand2                       shift and go to state 30

state 169

    (64) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 187


state 170

    (67) else_expression -> ELSE expression .

    FI              reduce using rule 67 (else_expression -> ELSE expression .)


state 171

    (112) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (113) else_clause -> ELSIF boolean_expression then_clause .
    (110) else_clause -> . ELSE action_statement_list
    (111) else_clause -> . ELSE empty
    (112) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (113) else_clause -> . ELSIF boolean_expression then_clause

    FI              reduce using rule 113 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 117
    ELSIF           shift and go to state 115

    else_clause                    shift and go to state 188

state 172

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACK          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 173

    (43) literal_range -> lower_bound COLON . upper_bound
    (45) upper_bound -> . expression
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    upper_bound                    shift and go to state 190
    operand1                       shift and go to state 23
    operand3                       shift and go to state 28
    monadic_operator               shift and go to state 33
    operand0                       shift and go to state 29
    operand4                       shift and go to state 27
    conditional_expression         shift and go to state 34
    expression                     shift and go to state 189
    operand2                       shift and go to state 30

state 174

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACK          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 175

    (49) string_mode -> CHARS LBRACK string_length RBRACK .

    ASSIGN          reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    SEMICOL         reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    COMMA           reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    RPAREN          reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    LOC             reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)


state 176

    (51) array_mode -> ARRAY LBRACK index_mode_list RBRACK . element_mode
    (56) element_mode -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 87
    ID              shift and go to state 8
    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    CHARS           shift and go to state 79
    ARRAY           shift and go to state 90

    array_mode                     shift and go to state 84
    identifier                     shift and go to state 85
    discrete_mode                  shift and go to state 76
    string_mode                    shift and go to state 86
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    composite_mode                 shift and go to state 88
    boolean_mode                   shift and go to state 89
    reference_mode                 shift and go to state 95
    mode                           shift and go to state 191
    character_mode                 shift and go to state 96
    discrete_range_mode            shift and go to state 93
    element_mode                   shift and go to state 192
    mode_name                      shift and go to state 82

state 177

    (52) index_mode_list -> index_mode_list COMMA . index_mode
    (54) index_mode -> . discrete_mode
    (55) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (61) expression -> . operand0
    (62) expression -> . conditional_expression
    (59) identifier -> . ID
    (70) operand0 -> . operand1
    (71) operand0 -> . operand0 operator1 operand1
    (63) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (64) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (83) operand1 -> . operand2
    (84) operand1 -> . operand1 operator2 operand2
    (90) operand2 -> . operand3
    (91) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (95) operand3 -> . monadic_operator operand4
    (96) operand3 -> . operand4
    (97) monadic_operator -> . MINUS
    (98) monadic_operator -> . NOT
    (99) operand4 -> . ICONST

    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    ID              shift and go to state 8
    IF              shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    ICONST          shift and go to state 22

    discrete_mode                  shift and go to state 156
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    monadic_operator               shift and go to state 33
    literal_range                  shift and go to state 158
    character_mode                 shift and go to state 96
    operand4                       shift and go to state 27
    operand3                       shift and go to state 28
    operand0                       shift and go to state 29
    expression                     shift and go to state 150
    operand2                       shift and go to state 30
    identifier                     shift and go to state 157
    index_mode                     shift and go to state 193
    lower_bound                    shift and go to state 149
    boolean_mode                   shift and go to state 89
    operand1                       shift and go to state 23
    discrete_range_mode            shift and go to state 93
    conditional_expression         shift and go to state 34

state 178

    (115) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMICOL statement_list END
    (116) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMICOL END
    (117) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMICOL statement_list END
    (119) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMICOL END
    (129) result_spec -> . RETURNS LPAREN mode result_attribute RPAREN
    (130) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMICOL         shift and go to state 195
    RETURNS         shift and go to state 182

    result_spec                    shift and go to state 194

state 179

    (123) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (125) formal_parameter -> . identifier_list parameter_spec
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 8

    formal_parameter               shift and go to state 196
    identifier                     shift and go to state 37
    identifier_list                shift and go to state 165

state 180

    (118) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMICOL statement_list END
    (120) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMICOL END

    SEMICOL         shift and go to state 197


state 181

    (121) procedure_definition -> PROC LPAREN RPAREN SEMICOL . statement_list END
    (122) procedure_definition -> PROC LPAREN RPAREN SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 199
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    statement_list                 shift and go to state 198
    synonym_statement              shift and go to state 14
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    label_id                       shift and go to state 15
    statement                      shift and go to state 9
    procedure_statement            shift and go to state 16
    action_statement               shift and go to state 17
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    action                         shift and go to state 20

state 182

    (129) result_spec -> RETURNS . LPAREN mode result_attribute RPAREN
    (130) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 200


state 183

    (126) parameter_spec -> mode . parameter_attribute
    (127) parameter_spec -> mode .
    (128) parameter_attribute -> . LOC

    RPAREN          reduce using rule 127 (parameter_spec -> mode .)
    COMMA           reduce using rule 127 (parameter_spec -> mode .)
    LOC             shift and go to state 202

    parameter_attribute            shift and go to state 201

state 184

    (125) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 125 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 125 (formal_parameter -> identifier_list parameter_spec .)


state 185

    (69) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 69 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 69 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 186

    (68) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (66) then_expression -> . THEN expression

    THEN            shift and go to state 108

    then_expression                shift and go to state 203

state 187

    (64) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    THEN            reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SEMICOL         reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACK          reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 64 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 188

    (112) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 112 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 189

    (45) upper_bound -> expression .

    RPAREN          reduce using rule 45 (upper_bound -> expression .)
    RBRACK          reduce using rule 45 (upper_bound -> expression .)
    COMMA           reduce using rule 45 (upper_bound -> expression .)


state 190

    (43) literal_range -> lower_bound COLON upper_bound .

    RBRACK          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)


state 191

    (56) element_mode -> mode .

    ASSIGN          reduce using rule 56 (element_mode -> mode .)
    SEMICOL         reduce using rule 56 (element_mode -> mode .)
    COMMA           reduce using rule 56 (element_mode -> mode .)
    LOC             reduce using rule 56 (element_mode -> mode .)
    RPAREN          reduce using rule 56 (element_mode -> mode .)


state 192

    (51) array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .

    RPAREN          reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    LOC             reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    ASSIGN          reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    SEMICOL         reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    COMMA           reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)


state 193

    (52) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACK          reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)


state 194

    (115) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMICOL statement_list END
    (116) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMICOL END

    SEMICOL         shift and go to state 204


state 195

    (117) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL . statement_list END
    (119) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 206
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    statement_list                 shift and go to state 205
    synonym_statement              shift and go to state 14
    bracketed_action               shift and go to state 5
    procedure_statement            shift and go to state 16
    statement                      shift and go to state 9
    action_statement               shift and go to state 17
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    label_id                       shift and go to state 15
    if_action                      shift and go to state 19
    action                         shift and go to state 20

state 196

    (123) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 123 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 123 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 197

    (118) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL . statement_list END
    (120) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 208
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    statement_list                 shift and go to state 207
    synonym_statement              shift and go to state 14
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    procedure_statement            shift and go to state 16
    statement                      shift and go to state 9
    action_statement               shift and go to state 17
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    label_id                       shift and go to state 15
    action                         shift and go to state 20

state 198

    (121) procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 209
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    synonym_statement              shift and go to state 14
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    label_id                       shift and go to state 15
    statement                      shift and go to state 21
    procedure_statement            shift and go to state 16
    action_statement               shift and go to state 17
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    action                         shift and go to state 20

state 199

    (122) procedure_definition -> PROC LPAREN RPAREN SEMICOL END .

    SEMICOL         reduce using rule 122 (procedure_definition -> PROC LPAREN RPAREN SEMICOL END .)


state 200

    (129) result_spec -> RETURNS LPAREN . mode result_attribute RPAREN
    (130) result_spec -> RETURNS LPAREN . mode RPAREN
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 87
    ID              shift and go to state 8
    INT             shift and go to state 92
    BOOL            shift and go to state 94
    CHAR            shift and go to state 91
    CHARS           shift and go to state 79
    ARRAY           shift and go to state 90

    array_mode                     shift and go to state 84
    identifier                     shift and go to state 85
    reference_mode                 shift and go to state 95
    string_mode                    shift and go to state 86
    discrete_mode_name             shift and go to state 77
    integer_mode                   shift and go to state 78
    composite_mode                 shift and go to state 88
    boolean_mode                   shift and go to state 89
    discrete_mode                  shift and go to state 76
    mode                           shift and go to state 210
    mode_name                      shift and go to state 82
    discrete_range_mode            shift and go to state 93
    character_mode                 shift and go to state 96

state 201

    (126) parameter_spec -> mode parameter_attribute .

    RPAREN          reduce using rule 126 (parameter_spec -> mode parameter_attribute .)
    COMMA           reduce using rule 126 (parameter_spec -> mode parameter_attribute .)


state 202

    (128) parameter_attribute -> LOC .

    RPAREN          reduce using rule 128 (parameter_attribute -> LOC .)
    COMMA           reduce using rule 128 (parameter_attribute -> LOC .)


state 203

    (68) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 68 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 68 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 204

    (115) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL . statement_list END
    (116) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 212
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    newmode_statement              shift and go to state 1
    statement_list                 shift and go to state 211
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    statement                      shift and go to state 9
    exit_action                    shift and go to state 10
    declaration_statement          shift and go to state 12
    identifier                     shift and go to state 13
    synonym_statement              shift and go to state 14
    label_id                       shift and go to state 15
    procedure_statement            shift and go to state 16
    action_statement               shift and go to state 17
    action                         shift and go to state 20

state 205

    (117) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 213
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    synonym_statement              shift and go to state 14
    bracketed_action               shift and go to state 5
    procedure_statement            shift and go to state 16
    statement                      shift and go to state 21
    action_statement               shift and go to state 17
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    label_id                       shift and go to state 15
    if_action                      shift and go to state 19
    action                         shift and go to state 20

state 206

    (119) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END .

    SEMICOL         reduce using rule 119 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END .)


state 207

    (118) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 214
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    declaration_statement          shift and go to state 12
    synonym_statement              shift and go to state 14
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    procedure_statement            shift and go to state 16
    statement                      shift and go to state 21
    action_statement               shift and go to state 17
    identifier                     shift and go to state 13
    exit_action                    shift and go to state 10
    newmode_statement              shift and go to state 1
    label_id                       shift and go to state 15
    action                         shift and go to state 20

state 208

    (120) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END .

    SEMICOL         reduce using rule 120 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END .)


state 209

    (121) procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END .

    SEMICOL         reduce using rule 121 (procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END .)


state 210

    (129) result_spec -> RETURNS LPAREN mode . result_attribute RPAREN
    (130) result_spec -> RETURNS LPAREN mode . RPAREN
    (131) result_attribute -> . LOC

    RPAREN          shift and go to state 216
    LOC             shift and go to state 217

    result_attribute               shift and go to state 215

state 211

    (115) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (102) label_id -> . identifier
    (103) action -> . bracketed_action
    (104) action -> . exit_action
    (59) identifier -> . ID
    (105) bracketed_action -> . if_action
    (114) exit_action -> . EXIT label_id
    (106) if_action -> . IF boolean_expression then_clause else_clause FI
    (107) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 218
    DCL             shift and go to state 11
    SYN             shift and go to state 4
    TYPE            shift and go to state 18
    ID              shift and go to state 8
    EXIT            shift and go to state 7
    IF              shift and go to state 3

    newmode_statement              shift and go to state 1
    if_action                      shift and go to state 19
    bracketed_action               shift and go to state 5
    statement                      shift and go to state 21
    exit_action                    shift and go to state 10
    declaration_statement          shift and go to state 12
    identifier                     shift and go to state 13
    synonym_statement              shift and go to state 14
    label_id                       shift and go to state 15
    procedure_statement            shift and go to state 16
    action_statement               shift and go to state 17
    action                         shift and go to state 20

state 212

    (116) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END .

    SEMICOL         reduce using rule 116 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END .)


state 213

    (117) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END .

    SEMICOL         reduce using rule 117 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END .)


state 214

    (118) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END .

    SEMICOL         reduce using rule 118 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END .)


state 215

    (129) result_spec -> RETURNS LPAREN mode result_attribute . RPAREN

    RPAREN          shift and go to state 219


state 216

    (130) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMICOL         reduce using rule 130 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 217

    (131) result_attribute -> LOC .

    RPAREN          reduce using rule 131 (result_attribute -> LOC .)


state 218

    (115) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END .

    SEMICOL         reduce using rule 115 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END .)


state 219

    (129) result_spec -> RETURNS LPAREN mode result_attribute RPAREN .

    SEMICOL         reduce using rule 129 (result_spec -> RETURNS LPAREN mode result_attribute RPAREN .)

