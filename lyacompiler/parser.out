Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    CONCATASSIGN
    FALSE
    DBLSLASH
    FOR
    CHARS
    LCURL
    THEN
    ARROW
    RPAREN
    LOC
    COLON
    ELSE
    RESULT
    TRUE
    CCONST
    READ
    END
    UPPER
    RETURNS
    NUM
    RCURL
    EXIT
    SCONST
    ELSIF
    DBLQUO
    BY
    PLUSASSIGN
    LPAREN
    DO
    DIVIDEASSIGN
    DOWN
    LBRACK
    OD
    PRED
    WHILE
    NULL
    REF
    LENGTH
    ARRAY
    RBRACK
    TO
    LOWER
    PROC
    MINUSASSIGN
    RETURN
    CONCAT
    SUCC
    TIMESASSIGN
    SINGQUO
    CIRCUMF
    IF
    FI
    PERCASSIGN
    PRINT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     declaration_statement -> DCL declaration_list SEMICOL
Rule 7     declaration_list -> declaration_list COMMA declaration
Rule 8     declaration_list -> declaration
Rule 9     declaration -> identifier_list mode
Rule 10    declaration -> identifier_list mode initialization
Rule 11    initialization -> ASSIGN expression
Rule 12    synonym_statement -> SYN synonym_list SEMICOL
Rule 13    synonym_list -> synonym_list COMMA synonym_definition
Rule 14    synonym_list -> synonym_definition
Rule 15    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 16    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 17    constant_expression -> expression
Rule 18    identifier_list -> identifier
Rule 19    identifier_list -> identifier_list COMMA identifier
Rule 20    identifier -> ID
Rule 21    newmode_statement -> TYPE newmode_list
Rule 22    newmode_list -> newmode_list COMMA mode_definition
Rule 23    newmode_list -> mode_definition
Rule 24    mode_definition -> identifier_list EQUALS mode
Rule 25    mode -> mode_name
Rule 26    mode -> discrete_mode
Rule 27    discrete_mode -> integer_mode
Rule 28    discrete_mode -> boolean_mode
Rule 29    discrete_mode -> character_mode
Rule 30    integer_mode -> INT
Rule 31    boolean_mode -> BOOL
Rule 32    character_mode -> CHAR
Rule 33    mode_name -> identifier
Rule 34    discrete_mode_name -> identifier
Rule 35    expression -> operand0
Rule 36    operand0 -> operand1
Rule 37    operand0 -> operand0 operator1 operand1
Rule 38    operator1 -> relational_operator
Rule 39    operator1 -> membership_operator
Rule 40    relational_operator -> AND
Rule 41    relational_operator -> OR
Rule 42    relational_operator -> EQUALS
Rule 43    relational_operator -> DIF
Rule 44    relational_operator -> GTR
Rule 45    relational_operator -> GEQ
Rule 46    relational_operator -> LSS
Rule 47    relational_operator -> LEQ
Rule 48    membership_operator -> IN
Rule 49    operand1 -> operand2
Rule 50    operand1 -> operand1 operator2 operand2
Rule 51    operator2 -> arithmetic_additive_operator
Rule 52    arithmetic_additive_operator -> PLUS
Rule 53    arithmetic_additive_operator -> MINUS
Rule 54    operand2 -> operand3
Rule 55    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 56    arithmetic_multiplicative_operator -> TIMES
Rule 57    arithmetic_multiplicative_operator -> DIVIDE
Rule 58    arithmetic_multiplicative_operator -> PERC
Rule 59    operand3 -> monadic_operator operand4
Rule 60    operand3 -> operand4
Rule 61    monadic_operator -> MINUS
Rule 62    monadic_operator -> NOT
Rule 63    operand4 -> ICONST

Terminals, with rules where they appear

AND                  : 40
ARRAY                : 
ARROW                : 
ASSIGN               : 11 15 16
BOOL                 : 31
BY                   : 
CCONST               : 
CHAR                 : 32
CHARS                : 
CIRCUMF              : 
COLON                : 
COMMA                : 7 13 19 22
CONCAT               : 
CONCATASSIGN         : 
DBLQUO               : 
DBLSLASH             : 
DCL                  : 6
DIF                  : 43
DIVIDE               : 57
DIVIDEASSIGN         : 
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUALS               : 24 42
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GEQ                  : 45
GTR                  : 44
ICONST               : 63
ID                   : 20
IF                   : 
IN                   : 48
INT                  : 30
LBRACK               : 
LCURL                : 
LENGTH               : 
LEQ                  : 47
LOC                  : 
LOWER                : 
LPAREN               : 
LSS                  : 46
MINUS                : 53 61
MINUSASSIGN          : 
NOT                  : 62
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 41
PERC                 : 58
PERCASSIGN           : 
PLUS                 : 52
PLUSASSIGN           : 
PRED                 : 
PRINT                : 
PROC                 : 
RBRACK               : 
RCURL                : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 
SCONST               : 
SEMICOL              : 6 12
SINGQUO              : 
SUCC                 : 
SYN                  : 12
THEN                 : 
TIMES                : 56
TIMESASSIGN          : 
TO                   : 
TRUE                 : 
TYPE                 : 21
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_additive_operator : 51
arithmetic_multiplicative_operator : 55
boolean_mode         : 28
character_mode       : 29
constant_expression  : 15 16
declaration          : 7 8
declaration_list     : 6 7
declaration_statement : 4
discrete_mode        : 26
discrete_mode_name   : 
expression           : 11 17
identifier           : 18 19 33 34
identifier_list      : 9 10 15 16 19 24
initialization       : 10
integer_mode         : 27
membership_operator  : 39
mode                 : 9 10 15 24
mode_definition      : 22 23
mode_name            : 25
monadic_operator     : 59
newmode_list         : 21 22
newmode_statement    : 
operand0             : 35 37
operand1             : 36 37 50
operand2             : 49 50 55
operand3             : 54 55
operand4             : 59 60
operator1            : 37
operator2            : 50
program              : 0
relational_operator  : 38
statement            : 2 3
statement_list       : 1 2
synonym_definition   : 13 14
synonym_list         : 12 13
synonym_statement    : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) declaration_statement -> . DCL declaration_list SEMICOL
    (12) synonym_statement -> . SYN synonym_list SEMICOL

    DCL             shift and go to state 7
    SYN             shift and go to state 4

    synonym_statement              shift and go to state 1
    statement_list                 shift and go to state 2
    program                        shift and go to state 3
    declaration_statement          shift and go to state 5
    statement                      shift and go to state 6

state 1

    (5) statement -> synonym_statement .

    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) declaration_statement -> . DCL declaration_list SEMICOL
    (12) synonym_statement -> . SYN synonym_list SEMICOL

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 7
    SYN             shift and go to state 4

    synonym_statement              shift and go to state 1
    declaration_statement          shift and go to state 5
    statement                      shift and go to state 8

state 3

    (0) S' -> program .



state 4

    (12) synonym_statement -> SYN . synonym_list SEMICOL
    (13) synonym_list -> . synonym_list COMMA synonym_definition
    (14) synonym_list -> . synonym_definition
    (15) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (16) synonym_definition -> . identifier_list ASSIGN constant_expression
    (18) identifier_list -> . identifier
    (19) identifier_list -> . identifier_list COMMA identifier
    (20) identifier -> . ID

    ID              shift and go to state 12

    synonym_list                   shift and go to state 9
    identifier_list                shift and go to state 10
    synonym_definition             shift and go to state 11
    identifier                     shift and go to state 13

state 5

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 6

    (3) statement_list -> statement .

    DCL             reduce using rule 3 (statement_list -> statement .)
    SYN             reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 7

    (6) declaration_statement -> DCL . declaration_list SEMICOL
    (7) declaration_list -> . declaration_list COMMA declaration
    (8) declaration_list -> . declaration
    (9) declaration -> . identifier_list mode
    (10) declaration -> . identifier_list mode initialization
    (18) identifier_list -> . identifier
    (19) identifier_list -> . identifier_list COMMA identifier
    (20) identifier -> . ID

    ID              shift and go to state 12

    declaration_list               shift and go to state 14
    identifier_list                shift and go to state 15
    declaration                    shift and go to state 16
    identifier                     shift and go to state 13

state 8

    (2) statement_list -> statement_list statement .

    DCL             reduce using rule 2 (statement_list -> statement_list statement .)
    SYN             reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 9

    (12) synonym_statement -> SYN synonym_list . SEMICOL
    (13) synonym_list -> synonym_list . COMMA synonym_definition

    SEMICOL         shift and go to state 17
    COMMA           shift and go to state 18


state 10

    (15) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (16) synonym_definition -> identifier_list . ASSIGN constant_expression
    (19) identifier_list -> identifier_list . COMMA identifier
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (33) mode_name -> . identifier
    (27) discrete_mode -> . integer_mode
    (28) discrete_mode -> . boolean_mode
    (29) discrete_mode -> . character_mode
    (20) identifier -> . ID
    (30) integer_mode -> . INT
    (31) boolean_mode -> . BOOL
    (32) character_mode -> . CHAR

    ASSIGN          shift and go to state 22
    COMMA           shift and go to state 21
    ID              shift and go to state 12
    INT             shift and go to state 19
    BOOL            shift and go to state 27
    CHAR            shift and go to state 28

    discrete_mode                  shift and go to state 25
    integer_mode                   shift and go to state 20
    boolean_mode                   shift and go to state 26
    character_mode                 shift and go to state 30
    mode_name                      shift and go to state 23
    mode                           shift and go to state 29
    identifier                     shift and go to state 24

state 11

    (14) synonym_list -> synonym_definition .

    SEMICOL         reduce using rule 14 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 14 (synonym_list -> synonym_definition .)


state 12

    (20) identifier -> ID .

    ASSIGN          reduce using rule 20 (identifier -> ID .)
    COMMA           reduce using rule 20 (identifier -> ID .)
    ID              reduce using rule 20 (identifier -> ID .)
    INT             reduce using rule 20 (identifier -> ID .)
    BOOL            reduce using rule 20 (identifier -> ID .)
    CHAR            reduce using rule 20 (identifier -> ID .)
    SEMICOL         reduce using rule 20 (identifier -> ID .)


state 13

    (18) identifier_list -> identifier .

    ASSIGN          reduce using rule 18 (identifier_list -> identifier .)
    COMMA           reduce using rule 18 (identifier_list -> identifier .)
    ID              reduce using rule 18 (identifier_list -> identifier .)
    INT             reduce using rule 18 (identifier_list -> identifier .)
    BOOL            reduce using rule 18 (identifier_list -> identifier .)
    CHAR            reduce using rule 18 (identifier_list -> identifier .)


state 14

    (6) declaration_statement -> DCL declaration_list . SEMICOL
    (7) declaration_list -> declaration_list . COMMA declaration

    SEMICOL         shift and go to state 31
    COMMA           shift and go to state 32


state 15

    (9) declaration -> identifier_list . mode
    (10) declaration -> identifier_list . mode initialization
    (19) identifier_list -> identifier_list . COMMA identifier
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (33) mode_name -> . identifier
    (27) discrete_mode -> . integer_mode
    (28) discrete_mode -> . boolean_mode
    (29) discrete_mode -> . character_mode
    (20) identifier -> . ID
    (30) integer_mode -> . INT
    (31) boolean_mode -> . BOOL
    (32) character_mode -> . CHAR

    COMMA           shift and go to state 21
    ID              shift and go to state 12
    INT             shift and go to state 19
    BOOL            shift and go to state 27
    CHAR            shift and go to state 28

    integer_mode                   shift and go to state 20
    discrete_mode                  shift and go to state 25
    boolean_mode                   shift and go to state 26
    character_mode                 shift and go to state 30
    mode_name                      shift and go to state 23
    mode                           shift and go to state 33
    identifier                     shift and go to state 24

state 16

    (8) declaration_list -> declaration .

    SEMICOL         reduce using rule 8 (declaration_list -> declaration .)
    COMMA           reduce using rule 8 (declaration_list -> declaration .)


state 17

    (12) synonym_statement -> SYN synonym_list SEMICOL .

    DCL             reduce using rule 12 (synonym_statement -> SYN synonym_list SEMICOL .)
    SYN             reduce using rule 12 (synonym_statement -> SYN synonym_list SEMICOL .)
    $end            reduce using rule 12 (synonym_statement -> SYN synonym_list SEMICOL .)


state 18

    (13) synonym_list -> synonym_list COMMA . synonym_definition
    (15) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (16) synonym_definition -> . identifier_list ASSIGN constant_expression
    (18) identifier_list -> . identifier
    (19) identifier_list -> . identifier_list COMMA identifier
    (20) identifier -> . ID

    ID              shift and go to state 12

    identifier_list                shift and go to state 10
    synonym_definition             shift and go to state 34
    identifier                     shift and go to state 13

state 19

    (30) integer_mode -> INT .

    ASSIGN          reduce using rule 30 (integer_mode -> INT .)
    SEMICOL         reduce using rule 30 (integer_mode -> INT .)
    COMMA           reduce using rule 30 (integer_mode -> INT .)


state 20

    (27) discrete_mode -> integer_mode .

    ASSIGN          reduce using rule 27 (discrete_mode -> integer_mode .)
    SEMICOL         reduce using rule 27 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 27 (discrete_mode -> integer_mode .)


state 21

    (19) identifier_list -> identifier_list COMMA . identifier
    (20) identifier -> . ID

    ID              shift and go to state 12

    identifier                     shift and go to state 35

state 22

    (16) synonym_definition -> identifier_list ASSIGN . constant_expression
    (17) constant_expression -> . expression
    (35) expression -> . operand0
    (36) operand0 -> . operand1
    (37) operand0 -> . operand0 operator1 operand1
    (49) operand1 -> . operand2
    (50) operand1 -> . operand1 operator2 operand2
    (54) operand2 -> . operand3
    (55) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (59) operand3 -> . monadic_operator operand4
    (60) operand3 -> . operand4
    (61) monadic_operator -> . MINUS
    (62) monadic_operator -> . NOT
    (63) operand4 -> . ICONST

    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    ICONST          shift and go to state 39

    operand1                       shift and go to state 36
    operand3                       shift and go to state 40
    operand4                       shift and go to state 41
    operand2                       shift and go to state 43
    monadic_operator               shift and go to state 42
    operand0                       shift and go to state 44
    constant_expression            shift and go to state 45
    expression                     shift and go to state 46

state 23

    (25) mode -> mode_name .

    ASSIGN          reduce using rule 25 (mode -> mode_name .)
    SEMICOL         reduce using rule 25 (mode -> mode_name .)
    COMMA           reduce using rule 25 (mode -> mode_name .)


state 24

    (33) mode_name -> identifier .

    ASSIGN          reduce using rule 33 (mode_name -> identifier .)
    SEMICOL         reduce using rule 33 (mode_name -> identifier .)
    COMMA           reduce using rule 33 (mode_name -> identifier .)


state 25

    (26) mode -> discrete_mode .

    ASSIGN          reduce using rule 26 (mode -> discrete_mode .)
    SEMICOL         reduce using rule 26 (mode -> discrete_mode .)
    COMMA           reduce using rule 26 (mode -> discrete_mode .)


state 26

    (28) discrete_mode -> boolean_mode .

    ASSIGN          reduce using rule 28 (discrete_mode -> boolean_mode .)
    SEMICOL         reduce using rule 28 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 28 (discrete_mode -> boolean_mode .)


state 27

    (31) boolean_mode -> BOOL .

    ASSIGN          reduce using rule 31 (boolean_mode -> BOOL .)
    SEMICOL         reduce using rule 31 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 31 (boolean_mode -> BOOL .)


state 28

    (32) character_mode -> CHAR .

    ASSIGN          reduce using rule 32 (character_mode -> CHAR .)
    SEMICOL         reduce using rule 32 (character_mode -> CHAR .)
    COMMA           reduce using rule 32 (character_mode -> CHAR .)


state 29

    (15) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 47


state 30

    (29) discrete_mode -> character_mode .

    ASSIGN          reduce using rule 29 (discrete_mode -> character_mode .)
    SEMICOL         reduce using rule 29 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 29 (discrete_mode -> character_mode .)


state 31

    (6) declaration_statement -> DCL declaration_list SEMICOL .

    DCL             reduce using rule 6 (declaration_statement -> DCL declaration_list SEMICOL .)
    SYN             reduce using rule 6 (declaration_statement -> DCL declaration_list SEMICOL .)
    $end            reduce using rule 6 (declaration_statement -> DCL declaration_list SEMICOL .)


state 32

    (7) declaration_list -> declaration_list COMMA . declaration
    (9) declaration -> . identifier_list mode
    (10) declaration -> . identifier_list mode initialization
    (18) identifier_list -> . identifier
    (19) identifier_list -> . identifier_list COMMA identifier
    (20) identifier -> . ID

    ID              shift and go to state 12

    identifier_list                shift and go to state 15
    declaration                    shift and go to state 48
    identifier                     shift and go to state 13

state 33

    (9) declaration -> identifier_list mode .
    (10) declaration -> identifier_list mode . initialization
    (11) initialization -> . ASSIGN expression

    SEMICOL         reduce using rule 9 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 9 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 50

    initialization                 shift and go to state 49

state 34

    (13) synonym_list -> synonym_list COMMA synonym_definition .

    SEMICOL         reduce using rule 13 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 13 (synonym_list -> synonym_list COMMA synonym_definition .)


state 35

    (19) identifier_list -> identifier_list COMMA identifier .

    ASSIGN          reduce using rule 19 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 19 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 19 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 19 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 19 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 19 (identifier_list -> identifier_list COMMA identifier .)


state 36

    (36) operand0 -> operand1 .
    (50) operand1 -> operand1 . operator2 operand2
    (51) operator2 -> . arithmetic_additive_operator
    (52) arithmetic_additive_operator -> . PLUS
    (53) arithmetic_additive_operator -> . MINUS

    AND             reduce using rule 36 (operand0 -> operand1 .)
    OR              reduce using rule 36 (operand0 -> operand1 .)
    EQUALS          reduce using rule 36 (operand0 -> operand1 .)
    DIF             reduce using rule 36 (operand0 -> operand1 .)
    GTR             reduce using rule 36 (operand0 -> operand1 .)
    GEQ             reduce using rule 36 (operand0 -> operand1 .)
    LSS             reduce using rule 36 (operand0 -> operand1 .)
    LEQ             reduce using rule 36 (operand0 -> operand1 .)
    IN              reduce using rule 36 (operand0 -> operand1 .)
    SEMICOL         reduce using rule 36 (operand0 -> operand1 .)
    COMMA           reduce using rule 36 (operand0 -> operand1 .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 51

    arithmetic_additive_operator   shift and go to state 54
    operator2                      shift and go to state 53

state 37

    (61) monadic_operator -> MINUS .

    ICONST          reduce using rule 61 (monadic_operator -> MINUS .)


state 38

    (62) monadic_operator -> NOT .

    ICONST          reduce using rule 62 (monadic_operator -> NOT .)


state 39

    (63) operand4 -> ICONST .

    TIMES           reduce using rule 63 (operand4 -> ICONST .)
    DIVIDE          reduce using rule 63 (operand4 -> ICONST .)
    PERC            reduce using rule 63 (operand4 -> ICONST .)
    PLUS            reduce using rule 63 (operand4 -> ICONST .)
    MINUS           reduce using rule 63 (operand4 -> ICONST .)
    AND             reduce using rule 63 (operand4 -> ICONST .)
    OR              reduce using rule 63 (operand4 -> ICONST .)
    EQUALS          reduce using rule 63 (operand4 -> ICONST .)
    DIF             reduce using rule 63 (operand4 -> ICONST .)
    GTR             reduce using rule 63 (operand4 -> ICONST .)
    GEQ             reduce using rule 63 (operand4 -> ICONST .)
    LSS             reduce using rule 63 (operand4 -> ICONST .)
    LEQ             reduce using rule 63 (operand4 -> ICONST .)
    IN              reduce using rule 63 (operand4 -> ICONST .)
    SEMICOL         reduce using rule 63 (operand4 -> ICONST .)
    COMMA           reduce using rule 63 (operand4 -> ICONST .)


state 40

    (54) operand2 -> operand3 .

    TIMES           reduce using rule 54 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 54 (operand2 -> operand3 .)
    PERC            reduce using rule 54 (operand2 -> operand3 .)
    PLUS            reduce using rule 54 (operand2 -> operand3 .)
    MINUS           reduce using rule 54 (operand2 -> operand3 .)
    AND             reduce using rule 54 (operand2 -> operand3 .)
    OR              reduce using rule 54 (operand2 -> operand3 .)
    EQUALS          reduce using rule 54 (operand2 -> operand3 .)
    DIF             reduce using rule 54 (operand2 -> operand3 .)
    GTR             reduce using rule 54 (operand2 -> operand3 .)
    GEQ             reduce using rule 54 (operand2 -> operand3 .)
    LSS             reduce using rule 54 (operand2 -> operand3 .)
    LEQ             reduce using rule 54 (operand2 -> operand3 .)
    IN              reduce using rule 54 (operand2 -> operand3 .)
    SEMICOL         reduce using rule 54 (operand2 -> operand3 .)
    COMMA           reduce using rule 54 (operand2 -> operand3 .)


state 41

    (60) operand3 -> operand4 .

    TIMES           reduce using rule 60 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 60 (operand3 -> operand4 .)
    PERC            reduce using rule 60 (operand3 -> operand4 .)
    PLUS            reduce using rule 60 (operand3 -> operand4 .)
    MINUS           reduce using rule 60 (operand3 -> operand4 .)
    AND             reduce using rule 60 (operand3 -> operand4 .)
    OR              reduce using rule 60 (operand3 -> operand4 .)
    EQUALS          reduce using rule 60 (operand3 -> operand4 .)
    DIF             reduce using rule 60 (operand3 -> operand4 .)
    GTR             reduce using rule 60 (operand3 -> operand4 .)
    GEQ             reduce using rule 60 (operand3 -> operand4 .)
    LSS             reduce using rule 60 (operand3 -> operand4 .)
    LEQ             reduce using rule 60 (operand3 -> operand4 .)
    IN              reduce using rule 60 (operand3 -> operand4 .)
    SEMICOL         reduce using rule 60 (operand3 -> operand4 .)
    COMMA           reduce using rule 60 (operand3 -> operand4 .)


state 42

    (59) operand3 -> monadic_operator . operand4
    (63) operand4 -> . ICONST

    ICONST          shift and go to state 39

    operand4                       shift and go to state 55

state 43

    (49) operand1 -> operand2 .
    (55) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (56) arithmetic_multiplicative_operator -> . TIMES
    (57) arithmetic_multiplicative_operator -> . DIVIDE
    (58) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 49 (operand1 -> operand2 .)
    MINUS           reduce using rule 49 (operand1 -> operand2 .)
    AND             reduce using rule 49 (operand1 -> operand2 .)
    OR              reduce using rule 49 (operand1 -> operand2 .)
    EQUALS          reduce using rule 49 (operand1 -> operand2 .)
    DIF             reduce using rule 49 (operand1 -> operand2 .)
    GTR             reduce using rule 49 (operand1 -> operand2 .)
    GEQ             reduce using rule 49 (operand1 -> operand2 .)
    LSS             reduce using rule 49 (operand1 -> operand2 .)
    LEQ             reduce using rule 49 (operand1 -> operand2 .)
    IN              reduce using rule 49 (operand1 -> operand2 .)
    SEMICOL         reduce using rule 49 (operand1 -> operand2 .)
    COMMA           reduce using rule 49 (operand1 -> operand2 .)
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59
    PERC            shift and go to state 57

    arithmetic_multiplicative_operator shift and go to state 56

state 44

    (35) expression -> operand0 .
    (37) operand0 -> operand0 . operator1 operand1
    (38) operator1 -> . relational_operator
    (39) operator1 -> . membership_operator
    (40) relational_operator -> . AND
    (41) relational_operator -> . OR
    (42) relational_operator -> . EQUALS
    (43) relational_operator -> . DIF
    (44) relational_operator -> . GTR
    (45) relational_operator -> . GEQ
    (46) relational_operator -> . LSS
    (47) relational_operator -> . LEQ
    (48) membership_operator -> . IN

    SEMICOL         reduce using rule 35 (expression -> operand0 .)
    COMMA           reduce using rule 35 (expression -> operand0 .)
    AND             shift and go to state 69
    OR              shift and go to state 70
    EQUALS          shift and go to state 62
    DIF             shift and go to state 60
    GTR             shift and go to state 61
    GEQ             shift and go to state 63
    LSS             shift and go to state 71
    LEQ             shift and go to state 67
    IN              shift and go to state 68

    membership_operator            shift and go to state 66
    operator1                      shift and go to state 65
    relational_operator            shift and go to state 64

state 45

    (16) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMICOL         reduce using rule 16 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    COMMA           reduce using rule 16 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 46

    (17) constant_expression -> expression .

    SEMICOL         reduce using rule 17 (constant_expression -> expression .)
    COMMA           reduce using rule 17 (constant_expression -> expression .)


state 47

    (15) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (17) constant_expression -> . expression
    (35) expression -> . operand0
    (36) operand0 -> . operand1
    (37) operand0 -> . operand0 operator1 operand1
    (49) operand1 -> . operand2
    (50) operand1 -> . operand1 operator2 operand2
    (54) operand2 -> . operand3
    (55) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (59) operand3 -> . monadic_operator operand4
    (60) operand3 -> . operand4
    (61) monadic_operator -> . MINUS
    (62) monadic_operator -> . NOT
    (63) operand4 -> . ICONST

    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    ICONST          shift and go to state 39

    operand1                       shift and go to state 36
    operand3                       shift and go to state 40
    operand4                       shift and go to state 41
    monadic_operator               shift and go to state 42
    operand2                       shift and go to state 43
    operand0                       shift and go to state 44
    constant_expression            shift and go to state 72
    expression                     shift and go to state 46

state 48

    (7) declaration_list -> declaration_list COMMA declaration .

    SEMICOL         reduce using rule 7 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 7 (declaration_list -> declaration_list COMMA declaration .)


state 49

    (10) declaration -> identifier_list mode initialization .

    SEMICOL         reduce using rule 10 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 10 (declaration -> identifier_list mode initialization .)


state 50

    (11) initialization -> ASSIGN . expression
    (35) expression -> . operand0
    (36) operand0 -> . operand1
    (37) operand0 -> . operand0 operator1 operand1
    (49) operand1 -> . operand2
    (50) operand1 -> . operand1 operator2 operand2
    (54) operand2 -> . operand3
    (55) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (59) operand3 -> . monadic_operator operand4
    (60) operand3 -> . operand4
    (61) monadic_operator -> . MINUS
    (62) monadic_operator -> . NOT
    (63) operand4 -> . ICONST

    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    ICONST          shift and go to state 39

    operand1                       shift and go to state 36
    monadic_operator               shift and go to state 42
    operand4                       shift and go to state 41
    operand3                       shift and go to state 40
    operand2                       shift and go to state 43
    operand0                       shift and go to state 44
    expression                     shift and go to state 73

state 51

    (53) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 53 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 53 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 53 (arithmetic_additive_operator -> MINUS .)


state 52

    (52) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 52 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 52 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 52 (arithmetic_additive_operator -> PLUS .)


state 53

    (50) operand1 -> operand1 operator2 . operand2
    (54) operand2 -> . operand3
    (55) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (59) operand3 -> . monadic_operator operand4
    (60) operand3 -> . operand4
    (61) monadic_operator -> . MINUS
    (62) monadic_operator -> . NOT
    (63) operand4 -> . ICONST

    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    ICONST          shift and go to state 39

    monadic_operator               shift and go to state 42
    operand4                       shift and go to state 41
    operand3                       shift and go to state 40
    operand2                       shift and go to state 74

state 54

    (51) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 51 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 51 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 51 (operator2 -> arithmetic_additive_operator .)


state 55

    (59) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    PERC            reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    EQUALS          reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    DIF             reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    GTR             reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    GEQ             reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    LSS             reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    LEQ             reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    SEMICOL         reduce using rule 59 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 59 (operand3 -> monadic_operator operand4 .)


state 56

    (55) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (59) operand3 -> . monadic_operator operand4
    (60) operand3 -> . operand4
    (61) monadic_operator -> . MINUS
    (62) monadic_operator -> . NOT
    (63) operand4 -> . ICONST

    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    ICONST          shift and go to state 39

    operand3                       shift and go to state 75
    monadic_operator               shift and go to state 42
    operand4                       shift and go to state 41

state 57

    (58) arithmetic_multiplicative_operator -> PERC .

    MINUS           reduce using rule 58 (arithmetic_multiplicative_operator -> PERC .)
    NOT             reduce using rule 58 (arithmetic_multiplicative_operator -> PERC .)
    ICONST          reduce using rule 58 (arithmetic_multiplicative_operator -> PERC .)


state 58

    (56) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 56 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 56 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 56 (arithmetic_multiplicative_operator -> TIMES .)


state 59

    (57) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 57 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 57 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 57 (arithmetic_multiplicative_operator -> DIVIDE .)


state 60

    (43) relational_operator -> DIF .

    MINUS           reduce using rule 43 (relational_operator -> DIF .)
    NOT             reduce using rule 43 (relational_operator -> DIF .)
    ICONST          reduce using rule 43 (relational_operator -> DIF .)


state 61

    (44) relational_operator -> GTR .

    MINUS           reduce using rule 44 (relational_operator -> GTR .)
    NOT             reduce using rule 44 (relational_operator -> GTR .)
    ICONST          reduce using rule 44 (relational_operator -> GTR .)


state 62

    (42) relational_operator -> EQUALS .

    MINUS           reduce using rule 42 (relational_operator -> EQUALS .)
    NOT             reduce using rule 42 (relational_operator -> EQUALS .)
    ICONST          reduce using rule 42 (relational_operator -> EQUALS .)


state 63

    (45) relational_operator -> GEQ .

    MINUS           reduce using rule 45 (relational_operator -> GEQ .)
    NOT             reduce using rule 45 (relational_operator -> GEQ .)
    ICONST          reduce using rule 45 (relational_operator -> GEQ .)


state 64

    (38) operator1 -> relational_operator .

    MINUS           reduce using rule 38 (operator1 -> relational_operator .)
    NOT             reduce using rule 38 (operator1 -> relational_operator .)
    ICONST          reduce using rule 38 (operator1 -> relational_operator .)


state 65

    (37) operand0 -> operand0 operator1 . operand1
    (49) operand1 -> . operand2
    (50) operand1 -> . operand1 operator2 operand2
    (54) operand2 -> . operand3
    (55) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (59) operand3 -> . monadic_operator operand4
    (60) operand3 -> . operand4
    (61) monadic_operator -> . MINUS
    (62) monadic_operator -> . NOT
    (63) operand4 -> . ICONST

    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    ICONST          shift and go to state 39

    operand1                       shift and go to state 76
    monadic_operator               shift and go to state 42
    operand4                       shift and go to state 41
    operand3                       shift and go to state 40
    operand2                       shift and go to state 43

state 66

    (39) operator1 -> membership_operator .

    MINUS           reduce using rule 39 (operator1 -> membership_operator .)
    NOT             reduce using rule 39 (operator1 -> membership_operator .)
    ICONST          reduce using rule 39 (operator1 -> membership_operator .)


state 67

    (47) relational_operator -> LEQ .

    MINUS           reduce using rule 47 (relational_operator -> LEQ .)
    NOT             reduce using rule 47 (relational_operator -> LEQ .)
    ICONST          reduce using rule 47 (relational_operator -> LEQ .)


state 68

    (48) membership_operator -> IN .

    MINUS           reduce using rule 48 (membership_operator -> IN .)
    NOT             reduce using rule 48 (membership_operator -> IN .)
    ICONST          reduce using rule 48 (membership_operator -> IN .)


state 69

    (40) relational_operator -> AND .

    MINUS           reduce using rule 40 (relational_operator -> AND .)
    NOT             reduce using rule 40 (relational_operator -> AND .)
    ICONST          reduce using rule 40 (relational_operator -> AND .)


state 70

    (41) relational_operator -> OR .

    MINUS           reduce using rule 41 (relational_operator -> OR .)
    NOT             reduce using rule 41 (relational_operator -> OR .)
    ICONST          reduce using rule 41 (relational_operator -> OR .)


state 71

    (46) relational_operator -> LSS .

    MINUS           reduce using rule 46 (relational_operator -> LSS .)
    NOT             reduce using rule 46 (relational_operator -> LSS .)
    ICONST          reduce using rule 46 (relational_operator -> LSS .)


state 72

    (15) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMICOL         reduce using rule 15 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    COMMA           reduce using rule 15 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 73

    (11) initialization -> ASSIGN expression .

    SEMICOL         reduce using rule 11 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 11 (initialization -> ASSIGN expression .)


state 74

    (50) operand1 -> operand1 operator2 operand2 .
    (55) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (56) arithmetic_multiplicative_operator -> . TIMES
    (57) arithmetic_multiplicative_operator -> . DIVIDE
    (58) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    EQUALS          reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    DIF             reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    GTR             reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    GEQ             reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    LSS             reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    LEQ             reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    SEMICOL         reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 50 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59
    PERC            shift and go to state 57

    arithmetic_multiplicative_operator shift and go to state 56

state 75

    (55) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PERC            reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUALS          reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIF             reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTR             reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GEQ             reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LSS             reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LEQ             reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMICOL         reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 55 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 76

    (37) operand0 -> operand0 operator1 operand1 .
    (50) operand1 -> operand1 . operator2 operand2
    (51) operator2 -> . arithmetic_additive_operator
    (52) arithmetic_additive_operator -> . PLUS
    (53) arithmetic_additive_operator -> . MINUS

    AND             reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    EQUALS          reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    DIF             reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    GTR             reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    GEQ             reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    LSS             reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    LEQ             reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    SEMICOL         reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 37 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 51

    operator2                      shift and go to state 53
    arithmetic_additive_operator   shift and go to state 54
