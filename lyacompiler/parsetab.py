
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '526F60E22CFC8930F6E8B948D2077AAC'
    
_lr_action_items = {'LSS':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,57,-36,-54,-59,-55,-37,-50,]),'COMMA':([8,9,10,11,12,14,15,16,19,20,21,24,25,26,27,28,29,31,34,35,37,38,39,40,42,43,46,47,48,50,51,68,73,74,75,76,],[18,22,-18,-20,-14,22,-9,32,-31,-28,-32,-33,-29,-25,-30,-27,-26,-11,-13,-19,-60,-63,-16,-49,-35,-17,-36,-54,-10,-8,-15,-59,-12,-55,-37,-50,]),'$end':([1,2,3,5,7,13,17,33,],[-5,-4,-3,-1,0,-2,-7,-6,]),'IN':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,60,-36,-54,-59,-55,-37,-50,]),'DIVIDE':([37,38,40,47,68,74,76,],[-60,-63,54,-54,-59,-55,54,]),'ID':([4,6,9,10,11,14,18,22,32,35,],[11,11,11,-18,-20,11,11,11,11,-19,]),'PERC':([37,38,40,47,68,74,76,],[-60,-63,53,-54,-59,-55,53,]),'SEMICOL':([8,11,12,15,16,19,20,21,24,25,26,27,28,29,31,34,37,38,39,40,42,43,46,47,48,50,51,68,73,74,75,76,],[17,-20,-14,-9,33,-31,-28,-32,-33,-29,-25,-30,-27,-26,-11,-13,-60,-63,-16,-49,-35,-17,-36,-54,-10,-8,-15,-59,-12,-55,-37,-50,]),'GEQ':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,65,-36,-54,-59,-55,-37,-50,]),'MINUS':([30,36,37,38,40,46,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,],[41,41,-60,-63,-49,69,-54,41,41,-58,-57,-56,-47,-46,-38,-41,-48,41,-42,-43,-44,-45,-39,-40,-59,-53,-52,41,-51,-55,69,-50,]),'GTR':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,64,-36,-54,-59,-55,-37,-50,]),'DCL':([0,1,2,3,5,13,17,33,],[6,-5,-4,-3,6,-2,-7,-6,]),'INT':([9,10,11,14,35,],[27,-18,-20,27,-19,]),'ASSIGN':([9,10,11,19,20,21,23,24,25,26,27,28,29,31,35,],[30,-18,-20,-31,-28,-32,36,-33,-29,-25,-30,-27,-26,49,-19,]),'LEQ':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,56,-36,-54,-59,-55,-37,-50,]),'BOOL':([9,10,11,14,35,],[19,-18,-20,19,-19,]),'CHAR':([9,10,11,14,35,],[21,-18,-20,21,-19,]),'OR':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,59,-36,-54,-59,-55,-37,-50,]),'EQUALS':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,62,-36,-54,-59,-55,-37,-50,]),'DIF':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,63,-36,-54,-59,-55,-37,-50,]),'AND':([37,38,40,42,46,47,68,74,75,76,],[-60,-63,-49,67,-36,-54,-59,-55,-37,-50,]),'SYN':([0,1,2,3,5,13,17,33,],[4,-5,-4,-3,4,-2,-7,-6,]),'ICONST':([30,36,41,44,45,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,],[38,38,-61,38,-62,38,38,-58,-57,-56,-47,-46,-38,-41,-48,38,-42,-43,-44,-45,-39,-40,-53,-52,38,-51,]),'NOT':([30,36,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,],[45,45,45,45,-58,-57,-56,-47,-46,-38,-41,-48,45,-42,-43,-44,-45,-39,-40,-53,-52,45,-51,]),'TIMES':([37,38,40,47,68,74,76,],[-60,-63,55,-54,-59,-55,55,]),'PLUS':([37,38,40,46,47,68,74,75,76,],[-60,-63,-49,70,-54,-59,-55,70,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arithmetic_multiplicative_operator':([40,76,],[52,52,]),'boolean_mode':([9,14,],[20,20,]),'relational_operator':([42,],[58,]),'mode':([9,14,],[23,31,]),'synonym_definition':([4,18,],[12,34,]),'program':([0,],[7,]),'declaration_list':([6,],[16,]),'constant_expression':([30,36,],[39,51,]),'operand4':([30,36,44,49,52,61,71,],[37,37,68,37,37,37,37,]),'identifier_list':([4,6,18,32,],[9,14,9,14,]),'expression':([30,36,49,],[43,43,73,]),'arithmetic_additive_operator':([46,75,],[72,72,]),'declaration':([6,32,],[15,50,]),'integer_mode':([9,14,],[28,28,]),'character_mode':([9,14,],[25,25,]),'operator1':([42,],[61,]),'statement_list':([0,],[5,]),'initialization':([31,],[48,]),'identifier':([4,6,9,14,18,22,32,],[10,10,24,24,10,35,10,]),'operand2':([30,36,49,61,71,],[40,40,40,40,76,]),'synonym_list':([4,],[8,]),'operand0':([30,36,49,],[42,42,42,]),'declaration_statement':([0,5,],[2,2,]),'mode_name':([9,14,],[26,26,]),'statement':([0,5,],[3,13,]),'monadic_operator':([30,36,49,52,61,71,],[44,44,44,44,44,44,]),'synonym_statement':([0,5,],[1,1,]),'membership_operator':([42,],[66,]),'operator2':([46,75,],[71,71,]),'discrete_mode':([9,14,],[29,29,]),'operand1':([30,36,49,61,],[46,46,46,75,]),'operand3':([30,36,49,52,61,71,],[47,47,47,74,47,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',51),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',57),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',58),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',67),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',68),
  ('declaration_statement -> DCL declaration_list SEMICOL','declaration_statement',3,'p_declaration_statement','parser.py',75),
  ('synonym_statement -> SYN synonym_list SEMICOL','synonym_statement',3,'p_synonym_statement','parser.py',79),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',85),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',86),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',93),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',94),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',105),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',111),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',112),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition_mode','parser.py',119),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',123),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',127),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',133),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',134),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',141),
  ('newmode_statement -> TYPE newmode_list','newmode_statement',2,'p_newmode_statement','parser.py',147),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',150),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',151),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',154),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',157),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',158),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',164),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',165),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',166),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',171),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',175),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',179),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',187),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','parser.py',191),
  ('expression -> operand0','expression',1,'p_expression','parser.py',235),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',267),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0_op1','parser.py',271),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',275),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',276),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',280),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',281),
  ('relational_operator -> EQUALS','relational_operator',1,'p_relational_operator','parser.py',282),
  ('relational_operator -> DIF','relational_operator',1,'p_relational_operator','parser.py',283),
  ('relational_operator -> GTR','relational_operator',1,'p_relational_operator','parser.py',284),
  ('relational_operator -> GEQ','relational_operator',1,'p_relational_operator','parser.py',285),
  ('relational_operator -> LSS','relational_operator',1,'p_relational_operator','parser.py',286),
  ('relational_operator -> LEQ','relational_operator',1,'p_relational_operator','parser.py',287),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',291),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',295),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1_op2','parser.py',299),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',303),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',308),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',309),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',317),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2_op3','parser.py',321),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',325),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',326),
  ('arithmetic_multiplicative_operator -> PERC','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',327),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3_monadic','parser.py',331),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',335),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',340),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',341),
  ('operand4 -> ICONST','operand4',1,'p_operand4','parser.py',345),
]
