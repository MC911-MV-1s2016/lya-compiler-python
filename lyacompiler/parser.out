Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    CONCAT
    RETURN
    TIMESASSIGN
    FOR
    RESULT
    BY
    PRINT
    SUCC
    LCURL
    DBLQUO
    SINGQUO
    SCONST
    CIRCUMF
    DIVIDEASSIGN
    DOWN
    UPPER
    CONCATASSIGN
    TO
    DO
    NULL
    PERCASSIGN
    MINUSASSIGN
    WHILE
    ARROW
    PRED
    FALSE
    RCURL
    DBLSLASH
    CCONST
    LENGTH
    OD
    LOWER
    TRUE
    NUM
    PLUSASSIGN
    READ

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMICOL
Rule 10    synonym_statement -> SYN synonym_list SEMICOL
Rule 11    newmode_statement -> TYPE newmode_list SEMICOL
Rule 12    procedure_statement -> label_id COLON procedure_definition SEMICOL
Rule 13    action_statement -> label_id COLON action SEMICOL
Rule 14    action_statement -> action SEMICOL
Rule 15    declaration_list -> declaration_list COMMA declaration
Rule 16    declaration_list -> declaration
Rule 17    declaration -> identifier_list mode initialization
Rule 18    declaration -> identifier_list mode
Rule 19    initialization -> ASSIGN expression
Rule 20    synonym_list -> synonym_list COMMA synonym_definition
Rule 21    synonym_list -> synonym_definition
Rule 22    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 23    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 24    constant_expression -> expression
Rule 25    newmode_list -> newmode_list COMMA mode_definition
Rule 26    newmode_list -> mode_definition
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    mode -> mode_name
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    mode_name -> identifier
Rule 42    discrete_mode_name -> identifier
Rule 43    literal_range -> lower_bound COLON upper_bound
Rule 44    lower_bound -> expression
Rule 45    upper_bound -> expression
Rule 46    reference_mode -> REF mode
Rule 47    composite_mode -> string_mode
Rule 48    composite_mode -> array_mode
Rule 49    string_mode -> CHARS LBRACK string_length RBRACK
Rule 50    string_length -> integer_literal
Rule 51    array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode
Rule 52    index_mode_list -> index_mode_list COMMA index_mode
Rule 53    index_mode_list -> index_mode
Rule 54    index_mode -> discrete_mode
Rule 55    index_mode -> literal_range
Rule 56    element_mode -> mode
Rule 57    identifier_list -> identifier
Rule 58    identifier_list -> identifier_list COMMA identifier
Rule 59    identifier -> ID
Rule 60    integer_literal -> ICONST
Rule 61    expression -> operand0
Rule 62    boolean_expression -> expression
Rule 63    operand0 -> operand1
Rule 64    operand0 -> operand0 operator1 operand1
Rule 65    operator1 -> relational_operator
Rule 66    operator1 -> membership_operator
Rule 67    relational_operator -> AND
Rule 68    relational_operator -> OR
Rule 69    relational_operator -> EQUALS
Rule 70    relational_operator -> DIF
Rule 71    relational_operator -> GTR
Rule 72    relational_operator -> GEQ
Rule 73    relational_operator -> LSS
Rule 74    relational_operator -> LEQ
Rule 75    membership_operator -> IN
Rule 76    operand1 -> operand2
Rule 77    operand1 -> operand1 operator2 operand2
Rule 78    operator2 -> arithmetic_additive_operator
Rule 79    arithmetic_additive_operator -> PLUS
Rule 80    arithmetic_additive_operator -> MINUS
Rule 81    operand2 -> operand3
Rule 82    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 83    arithmetic_multiplicative_operator -> TIMES
Rule 84    arithmetic_multiplicative_operator -> DIVIDE
Rule 85    arithmetic_multiplicative_operator -> PERC
Rule 86    operand3 -> monadic_operator operand4
Rule 87    operand3 -> operand4
Rule 88    monadic_operator -> MINUS
Rule 89    monadic_operator -> NOT
Rule 90    operand4 -> ICONST
Rule 91    action_statement_list -> action_statement_list action_statement
Rule 92    action_statement_list -> action_statement
Rule 93    label_id -> identifier
Rule 94    action -> bracketed_action
Rule 95    action -> exit_action
Rule 96    bracketed_action -> if_action
Rule 97    if_action -> IF boolean_expression then_clause else_clause FI
Rule 98    if_action -> IF boolean_expression then_clause FI
Rule 99    then_clause -> THEN action_statement_list
Rule 100   then_clause -> THEN empty
Rule 101   else_clause -> ELSE action_statement_list
Rule 102   else_clause -> ELSE empty
Rule 103   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 104   else_clause -> ELSIF boolean_expression then_clause
Rule 105   exit_action -> EXIT label_id
Rule 106   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
Rule 107   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
Rule 108   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
Rule 109   procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END
Rule 110   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END
Rule 111   procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END
Rule 112   procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END
Rule 113   procedure_definition -> PROC LPAREN RPAREN SEMICOL END
Rule 114   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 115   formal_parameter_list -> formal_parameter
Rule 116   formal_parameter -> identifier_list parameter_spec
Rule 117   parameter_spec -> mode parameter_attribute
Rule 118   parameter_spec -> mode
Rule 119   parameter_attribute -> LOC
Rule 120   result_spec -> RETURNS LPAREN mode result_attribute RPAREN
Rule 121   result_spec -> RETURNS LPAREN mode RPAREN
Rule 122   result_attribute -> LOC
Rule 123   empty -> <empty>

Terminals, with rules where they appear

AND                  : 67
ARRAY                : 51
ARROW                : 
ASSIGN               : 19 22 23 27
BOOL                 : 37
BY                   : 
CCONST               : 
CHAR                 : 38
CHARS                : 49
CIRCUMF              : 
COLON                : 12 13 43
COMMA                : 15 20 25 52 58 114
CONCAT               : 
CONCATASSIGN         : 
DBLQUO               : 
DBLSLASH             : 
DCL                  : 9
DIF                  : 70
DIVIDE               : 84
DIVIDEASSIGN         : 
DO                   : 
DOWN                 : 
ELSE                 : 101 102
ELSIF                : 103 104
END                  : 106 107 108 109 110 111 112 113
EQUALS               : 69
EXIT                 : 105
FALSE                : 
FI                   : 97 98
FOR                  : 
GEQ                  : 72
GTR                  : 71
ICONST               : 60 90
ID                   : 59
IF                   : 97 98
IN                   : 75
INT                  : 36
LBRACK               : 49 51
LCURL                : 
LENGTH               : 
LEQ                  : 74
LOC                  : 119 122
LOWER                : 
LPAREN               : 39 40 106 107 108 109 110 111 112 113 120 121
LSS                  : 73
MINUS                : 80 88
MINUSASSIGN          : 
NOT                  : 89
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 68
PERC                 : 85
PERCASSIGN           : 
PLUS                 : 79
PLUSASSIGN           : 
PRED                 : 
PRINT                : 
PROC                 : 106 107 108 109 110 111 112 113
RBRACK               : 49 51
RCURL                : 
READ                 : 
REF                  : 46
RESULT               : 
RETURN               : 
RETURNS              : 120 121
RPAREN               : 39 40 106 107 108 109 110 111 112 113 120 121
SCONST               : 
SEMICOL              : 9 10 11 12 13 14 106 107 108 109 110 111 112 113
SINGQUO              : 
SUCC                 : 
SYN                  : 10
THEN                 : 99 100
TIMES                : 83
TIMESASSIGN          : 
TO                   : 
TRUE                 : 
TYPE                 : 11
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

action               : 13 14
action_statement     : 8 91 92
action_statement_list : 91 99 101
arithmetic_additive_operator : 78
arithmetic_multiplicative_operator : 82
array_mode           : 48
boolean_expression   : 97 98 103 104
boolean_mode         : 33
bracketed_action     : 94
character_mode       : 34
composite_mode       : 31
constant_expression  : 22 23
declaration          : 15 16
declaration_list     : 9 15
declaration_statement : 4
discrete_mode        : 29 40 54
discrete_mode_name   : 39
discrete_range_mode  : 35
element_mode         : 51
else_clause          : 97 103
empty                : 100 102
exit_action          : 95
expression           : 19 24 44 45 62
formal_parameter     : 114 115
formal_parameter_list : 106 107 108 110 114
identifier           : 41 42 57 58 93
identifier_list      : 17 18 22 23 27 58 116
if_action            : 96
index_mode           : 52 53
index_mode_list      : 51 52
initialization       : 17
integer_literal      : 50
integer_mode         : 32
label_id             : 12 13 105
literal_range        : 39 40 55
lower_bound          : 43
membership_operator  : 66
mode                 : 17 18 22 27 46 56 117 118 120 121
mode_definition      : 25 26
mode_name            : 28
monadic_operator     : 86
newmode_list         : 11 25
newmode_statement    : 6
operand0             : 61 64
operand1             : 63 64 77
operand2             : 76 77 82
operand3             : 81 82
operand4             : 86 87
operator1            : 64
operator2            : 77
parameter_attribute  : 117
parameter_spec       : 116
procedure_definition : 12
procedure_statement  : 7
program              : 0
reference_mode       : 30
relational_operator  : 65
result_attribute     : 120
result_spec          : 106 107 109 111
statement            : 2 3
statement_list       : 1 2 106 108 109 112
string_length        : 49
string_mode          : 47
synonym_definition   : 20 21
synonym_list         : 10 20
synonym_statement    : 5
then_clause          : 97 98 103 104
upper_bound          : 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    program                        shift and go to state 6
    procedure_statement            shift and go to state 16
    statement_list                 shift and go to state 7
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 9
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 1

    (93) label_id -> identifier .

    COLON           reduce using rule 93 (label_id -> identifier .)
    SEMICOL         reduce using rule 93 (label_id -> identifier .)


state 2

    (105) exit_action -> EXIT . label_id
    (93) label_id -> . identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    identifier                     shift and go to state 1
    label_id                       shift and go to state 21

state 3

    (97) if_action -> IF . boolean_expression then_clause else_clause FI
    (98) if_action -> IF . boolean_expression then_clause FI
    (62) boolean_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    expression                     shift and go to state 22
    boolean_expression             shift and go to state 25
    operand1                       shift and go to state 26
    operand0                       shift and go to state 28
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    operand2                       shift and go to state 31
    monadic_operator               shift and go to state 32

state 4

    (4) statement -> declaration_statement .

    END             reduce using rule 4 (statement -> declaration_statement .)
    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 5

    (59) identifier -> ID .

    ASSIGN          reduce using rule 59 (identifier -> ID .)
    COMMA           reduce using rule 59 (identifier -> ID .)
    REF             reduce using rule 59 (identifier -> ID .)
    ID              reduce using rule 59 (identifier -> ID .)
    INT             reduce using rule 59 (identifier -> ID .)
    BOOL            reduce using rule 59 (identifier -> ID .)
    CHAR            reduce using rule 59 (identifier -> ID .)
    CHARS           reduce using rule 59 (identifier -> ID .)
    ARRAY           reduce using rule 59 (identifier -> ID .)
    RPAREN          reduce using rule 59 (identifier -> ID .)
    LOC             reduce using rule 59 (identifier -> ID .)
    LPAREN          reduce using rule 59 (identifier -> ID .)
    COLON           reduce using rule 59 (identifier -> ID .)
    SEMICOL         reduce using rule 59 (identifier -> ID .)


state 6

    (0) S' -> program .



state 7

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    procedure_statement            shift and go to state 16
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 33
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 8

    (10) synonym_statement -> SYN . synonym_list SEMICOL
    (20) synonym_list -> . synonym_list COMMA synonym_definition
    (21) synonym_list -> . synonym_definition
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (23) synonym_definition -> . identifier_list ASSIGN constant_expression
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    synonym_list                   shift and go to state 34
    identifier                     shift and go to state 35
    synonym_definition             shift and go to state 36
    identifier_list                shift and go to state 37

state 9

    (3) statement_list -> statement .

    END             reduce using rule 3 (statement_list -> statement .)
    DCL             reduce using rule 3 (statement_list -> statement .)
    SYN             reduce using rule 3 (statement_list -> statement .)
    TYPE            reduce using rule 3 (statement_list -> statement .)
    ID              reduce using rule 3 (statement_list -> statement .)
    EXIT            reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 10

    (14) action_statement -> action . SEMICOL

    SEMICOL         shift and go to state 38


state 11

    (94) action -> bracketed_action .

    SEMICOL         reduce using rule 94 (action -> bracketed_action .)


state 12

    (9) declaration_statement -> DCL . declaration_list SEMICOL
    (15) declaration_list -> . declaration_list COMMA declaration
    (16) declaration_list -> . declaration
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    declaration_list               shift and go to state 39
    declaration                    shift and go to state 40
    identifier                     shift and go to state 35
    identifier_list                shift and go to state 41

state 13

    (8) statement -> action_statement .

    END             reduce using rule 8 (statement -> action_statement .)
    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)


state 14

    (6) statement -> newmode_statement .

    END             reduce using rule 6 (statement -> newmode_statement .)
    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)


state 15

    (11) newmode_statement -> TYPE . newmode_list SEMICOL
    (25) newmode_list -> . newmode_list COMMA mode_definition
    (26) newmode_list -> . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    identifier                     shift and go to state 35
    mode_definition                shift and go to state 42
    identifier_list                shift and go to state 44
    newmode_list                   shift and go to state 43

state 16

    (7) statement -> procedure_statement .

    END             reduce using rule 7 (statement -> procedure_statement .)
    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)


state 17

    (95) action -> exit_action .

    SEMICOL         reduce using rule 95 (action -> exit_action .)


state 18

    (5) statement -> synonym_statement .

    END             reduce using rule 5 (statement -> synonym_statement .)
    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 19

    (12) procedure_statement -> label_id . COLON procedure_definition SEMICOL
    (13) action_statement -> label_id . COLON action SEMICOL

    COLON           shift and go to state 45


state 20

    (96) bracketed_action -> if_action .

    SEMICOL         reduce using rule 96 (bracketed_action -> if_action .)


state 21

    (105) exit_action -> EXIT label_id .

    SEMICOL         reduce using rule 105 (exit_action -> EXIT label_id .)


state 22

    (62) boolean_expression -> expression .

    THEN            reduce using rule 62 (boolean_expression -> expression .)


state 23

    (90) operand4 -> ICONST .

    TIMES           reduce using rule 90 (operand4 -> ICONST .)
    DIVIDE          reduce using rule 90 (operand4 -> ICONST .)
    PERC            reduce using rule 90 (operand4 -> ICONST .)
    PLUS            reduce using rule 90 (operand4 -> ICONST .)
    MINUS           reduce using rule 90 (operand4 -> ICONST .)
    AND             reduce using rule 90 (operand4 -> ICONST .)
    OR              reduce using rule 90 (operand4 -> ICONST .)
    EQUALS          reduce using rule 90 (operand4 -> ICONST .)
    DIF             reduce using rule 90 (operand4 -> ICONST .)
    GTR             reduce using rule 90 (operand4 -> ICONST .)
    GEQ             reduce using rule 90 (operand4 -> ICONST .)
    LSS             reduce using rule 90 (operand4 -> ICONST .)
    LEQ             reduce using rule 90 (operand4 -> ICONST .)
    IN              reduce using rule 90 (operand4 -> ICONST .)
    COLON           reduce using rule 90 (operand4 -> ICONST .)
    THEN            reduce using rule 90 (operand4 -> ICONST .)
    SEMICOL         reduce using rule 90 (operand4 -> ICONST .)
    COMMA           reduce using rule 90 (operand4 -> ICONST .)
    RPAREN          reduce using rule 90 (operand4 -> ICONST .)
    RBRACK          reduce using rule 90 (operand4 -> ICONST .)


state 24

    (88) monadic_operator -> MINUS .

    ICONST          reduce using rule 88 (monadic_operator -> MINUS .)


state 25

    (97) if_action -> IF boolean_expression . then_clause else_clause FI
    (98) if_action -> IF boolean_expression . then_clause FI
    (99) then_clause -> . THEN action_statement_list
    (100) then_clause -> . THEN empty

    THEN            shift and go to state 47

    then_clause                    shift and go to state 46

state 26

    (63) operand0 -> operand1 .
    (77) operand1 -> operand1 . operator2 operand2
    (78) operator2 -> . arithmetic_additive_operator
    (79) arithmetic_additive_operator -> . PLUS
    (80) arithmetic_additive_operator -> . MINUS

    AND             reduce using rule 63 (operand0 -> operand1 .)
    OR              reduce using rule 63 (operand0 -> operand1 .)
    EQUALS          reduce using rule 63 (operand0 -> operand1 .)
    DIF             reduce using rule 63 (operand0 -> operand1 .)
    GTR             reduce using rule 63 (operand0 -> operand1 .)
    GEQ             reduce using rule 63 (operand0 -> operand1 .)
    LSS             reduce using rule 63 (operand0 -> operand1 .)
    LEQ             reduce using rule 63 (operand0 -> operand1 .)
    IN              reduce using rule 63 (operand0 -> operand1 .)
    COLON           reduce using rule 63 (operand0 -> operand1 .)
    THEN            reduce using rule 63 (operand0 -> operand1 .)
    SEMICOL         reduce using rule 63 (operand0 -> operand1 .)
    COMMA           reduce using rule 63 (operand0 -> operand1 .)
    RPAREN          reduce using rule 63 (operand0 -> operand1 .)
    RBRACK          reduce using rule 63 (operand0 -> operand1 .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51

    arithmetic_additive_operator   shift and go to state 48
    operator2                      shift and go to state 49

state 27

    (89) monadic_operator -> NOT .

    ICONST          reduce using rule 89 (monadic_operator -> NOT .)


state 28

    (61) expression -> operand0 .
    (64) operand0 -> operand0 . operator1 operand1
    (65) operator1 -> . relational_operator
    (66) operator1 -> . membership_operator
    (67) relational_operator -> . AND
    (68) relational_operator -> . OR
    (69) relational_operator -> . EQUALS
    (70) relational_operator -> . DIF
    (71) relational_operator -> . GTR
    (72) relational_operator -> . GEQ
    (73) relational_operator -> . LSS
    (74) relational_operator -> . LEQ
    (75) membership_operator -> . IN

    COLON           reduce using rule 61 (expression -> operand0 .)
    THEN            reduce using rule 61 (expression -> operand0 .)
    RPAREN          reduce using rule 61 (expression -> operand0 .)
    RBRACK          reduce using rule 61 (expression -> operand0 .)
    COMMA           reduce using rule 61 (expression -> operand0 .)
    SEMICOL         reduce using rule 61 (expression -> operand0 .)
    AND             shift and go to state 53
    OR              shift and go to state 56
    EQUALS          shift and go to state 63
    DIF             shift and go to state 62
    GTR             shift and go to state 60
    GEQ             shift and go to state 55
    LSS             shift and go to state 54
    LEQ             shift and go to state 58
    IN              shift and go to state 57

    relational_operator            shift and go to state 59
    operator1                      shift and go to state 61
    membership_operator            shift and go to state 52

state 29

    (81) operand2 -> operand3 .

    TIMES           reduce using rule 81 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 81 (operand2 -> operand3 .)
    PERC            reduce using rule 81 (operand2 -> operand3 .)
    PLUS            reduce using rule 81 (operand2 -> operand3 .)
    MINUS           reduce using rule 81 (operand2 -> operand3 .)
    AND             reduce using rule 81 (operand2 -> operand3 .)
    OR              reduce using rule 81 (operand2 -> operand3 .)
    EQUALS          reduce using rule 81 (operand2 -> operand3 .)
    DIF             reduce using rule 81 (operand2 -> operand3 .)
    GTR             reduce using rule 81 (operand2 -> operand3 .)
    GEQ             reduce using rule 81 (operand2 -> operand3 .)
    LSS             reduce using rule 81 (operand2 -> operand3 .)
    LEQ             reduce using rule 81 (operand2 -> operand3 .)
    IN              reduce using rule 81 (operand2 -> operand3 .)
    THEN            reduce using rule 81 (operand2 -> operand3 .)
    SEMICOL         reduce using rule 81 (operand2 -> operand3 .)
    COMMA           reduce using rule 81 (operand2 -> operand3 .)
    COLON           reduce using rule 81 (operand2 -> operand3 .)
    RPAREN          reduce using rule 81 (operand2 -> operand3 .)
    RBRACK          reduce using rule 81 (operand2 -> operand3 .)


state 30

    (87) operand3 -> operand4 .

    TIMES           reduce using rule 87 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 87 (operand3 -> operand4 .)
    PERC            reduce using rule 87 (operand3 -> operand4 .)
    PLUS            reduce using rule 87 (operand3 -> operand4 .)
    MINUS           reduce using rule 87 (operand3 -> operand4 .)
    AND             reduce using rule 87 (operand3 -> operand4 .)
    OR              reduce using rule 87 (operand3 -> operand4 .)
    EQUALS          reduce using rule 87 (operand3 -> operand4 .)
    DIF             reduce using rule 87 (operand3 -> operand4 .)
    GTR             reduce using rule 87 (operand3 -> operand4 .)
    GEQ             reduce using rule 87 (operand3 -> operand4 .)
    LSS             reduce using rule 87 (operand3 -> operand4 .)
    LEQ             reduce using rule 87 (operand3 -> operand4 .)
    IN              reduce using rule 87 (operand3 -> operand4 .)
    THEN            reduce using rule 87 (operand3 -> operand4 .)
    SEMICOL         reduce using rule 87 (operand3 -> operand4 .)
    COMMA           reduce using rule 87 (operand3 -> operand4 .)
    COLON           reduce using rule 87 (operand3 -> operand4 .)
    RPAREN          reduce using rule 87 (operand3 -> operand4 .)
    RBRACK          reduce using rule 87 (operand3 -> operand4 .)


state 31

    (76) operand1 -> operand2 .
    (82) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (83) arithmetic_multiplicative_operator -> . TIMES
    (84) arithmetic_multiplicative_operator -> . DIVIDE
    (85) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 76 (operand1 -> operand2 .)
    MINUS           reduce using rule 76 (operand1 -> operand2 .)
    AND             reduce using rule 76 (operand1 -> operand2 .)
    OR              reduce using rule 76 (operand1 -> operand2 .)
    EQUALS          reduce using rule 76 (operand1 -> operand2 .)
    DIF             reduce using rule 76 (operand1 -> operand2 .)
    GTR             reduce using rule 76 (operand1 -> operand2 .)
    GEQ             reduce using rule 76 (operand1 -> operand2 .)
    LSS             reduce using rule 76 (operand1 -> operand2 .)
    LEQ             reduce using rule 76 (operand1 -> operand2 .)
    IN              reduce using rule 76 (operand1 -> operand2 .)
    THEN            reduce using rule 76 (operand1 -> operand2 .)
    SEMICOL         reduce using rule 76 (operand1 -> operand2 .)
    COMMA           reduce using rule 76 (operand1 -> operand2 .)
    COLON           reduce using rule 76 (operand1 -> operand2 .)
    RPAREN          reduce using rule 76 (operand1 -> operand2 .)
    RBRACK          reduce using rule 76 (operand1 -> operand2 .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65
    PERC            shift and go to state 67

    arithmetic_multiplicative_operator shift and go to state 66

state 32

    (86) operand3 -> monadic_operator . operand4
    (90) operand4 -> . ICONST

    ICONST          shift and go to state 23

    operand4                       shift and go to state 68

state 33

    (2) statement_list -> statement_list statement .

    END             reduce using rule 2 (statement_list -> statement_list statement .)
    DCL             reduce using rule 2 (statement_list -> statement_list statement .)
    SYN             reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 2 (statement_list -> statement_list statement .)
    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 34

    (10) synonym_statement -> SYN synonym_list . SEMICOL
    (20) synonym_list -> synonym_list . COMMA synonym_definition

    SEMICOL         shift and go to state 70
    COMMA           shift and go to state 69


state 35

    (57) identifier_list -> identifier .

    COMMA           reduce using rule 57 (identifier_list -> identifier .)
    REF             reduce using rule 57 (identifier_list -> identifier .)
    ID              reduce using rule 57 (identifier_list -> identifier .)
    INT             reduce using rule 57 (identifier_list -> identifier .)
    BOOL            reduce using rule 57 (identifier_list -> identifier .)
    CHAR            reduce using rule 57 (identifier_list -> identifier .)
    CHARS           reduce using rule 57 (identifier_list -> identifier .)
    ARRAY           reduce using rule 57 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 57 (identifier_list -> identifier .)


state 36

    (21) synonym_list -> synonym_definition .

    SEMICOL         reduce using rule 21 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 21 (synonym_list -> synonym_definition .)


state 37

    (22) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (23) synonym_definition -> identifier_list . ASSIGN constant_expression
    (58) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 83
    COMMA           shift and go to state 84
    REF             shift and go to state 76
    ID              shift and go to state 5
    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    CHARS           shift and go to state 75
    ARRAY           shift and go to state 82

    identifier                     shift and go to state 78
    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    string_mode                    shift and go to state 77
    discrete_mode_name             shift and go to state 81
    integer_mode                   shift and go to state 73
    mode                           shift and go to state 90
    mode_name                      shift and go to state 86
    reference_mode                 shift and go to state 87
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 89
    composite_mode                 shift and go to state 85
    array_mode                     shift and go to state 74

state 38

    (14) action_statement -> action SEMICOL .

    END             reduce using rule 14 (action_statement -> action SEMICOL .)
    DCL             reduce using rule 14 (action_statement -> action SEMICOL .)
    SYN             reduce using rule 14 (action_statement -> action SEMICOL .)
    TYPE            reduce using rule 14 (action_statement -> action SEMICOL .)
    ID              reduce using rule 14 (action_statement -> action SEMICOL .)
    EXIT            reduce using rule 14 (action_statement -> action SEMICOL .)
    IF              reduce using rule 14 (action_statement -> action SEMICOL .)
    FI              reduce using rule 14 (action_statement -> action SEMICOL .)
    ELSE            reduce using rule 14 (action_statement -> action SEMICOL .)
    ELSIF           reduce using rule 14 (action_statement -> action SEMICOL .)
    $end            reduce using rule 14 (action_statement -> action SEMICOL .)


state 39

    (9) declaration_statement -> DCL declaration_list . SEMICOL
    (15) declaration_list -> declaration_list . COMMA declaration

    SEMICOL         shift and go to state 93
    COMMA           shift and go to state 92


state 40

    (16) declaration_list -> declaration .

    SEMICOL         reduce using rule 16 (declaration_list -> declaration .)
    COMMA           reduce using rule 16 (declaration_list -> declaration .)


state 41

    (17) declaration -> identifier_list . mode initialization
    (18) declaration -> identifier_list . mode
    (58) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 84
    REF             shift and go to state 76
    ID              shift and go to state 5
    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    CHARS           shift and go to state 75
    ARRAY           shift and go to state 82

    identifier                     shift and go to state 78
    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    string_mode                    shift and go to state 77
    discrete_mode_name             shift and go to state 81
    integer_mode                   shift and go to state 73
    mode                           shift and go to state 94
    mode_name                      shift and go to state 86
    reference_mode                 shift and go to state 87
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 89
    composite_mode                 shift and go to state 85
    array_mode                     shift and go to state 74

state 42

    (26) newmode_list -> mode_definition .

    SEMICOL         reduce using rule 26 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 26 (newmode_list -> mode_definition .)


state 43

    (11) newmode_statement -> TYPE newmode_list . SEMICOL
    (25) newmode_list -> newmode_list . COMMA mode_definition

    SEMICOL         shift and go to state 96
    COMMA           shift and go to state 95


state 44

    (27) mode_definition -> identifier_list . ASSIGN mode
    (58) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 97
    COMMA           shift and go to state 84


state 45

    (12) procedure_statement -> label_id COLON . procedure_definition SEMICOL
    (13) action_statement -> label_id COLON . action SEMICOL
    (106) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (107) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
    (108) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
    (109) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMICOL statement_list END
    (110) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMICOL END
    (111) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMICOL END
    (112) procedure_definition -> . PROC LPAREN RPAREN SEMICOL statement_list END
    (113) procedure_definition -> . PROC LPAREN RPAREN SEMICOL END
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    PROC            shift and go to state 100
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    bracketed_action               shift and go to state 11
    action                         shift and go to state 98
    procedure_definition           shift and go to state 99
    exit_action                    shift and go to state 17
    if_action                      shift and go to state 20

state 46

    (97) if_action -> IF boolean_expression then_clause . else_clause FI
    (98) if_action -> IF boolean_expression then_clause . FI
    (101) else_clause -> . ELSE action_statement_list
    (102) else_clause -> . ELSE empty
    (103) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (104) else_clause -> . ELSIF boolean_expression then_clause

    FI              shift and go to state 103
    ELSE            shift and go to state 102
    ELSIF           shift and go to state 104

    else_clause                    shift and go to state 101

state 47

    (99) then_clause -> THEN . action_statement_list
    (100) then_clause -> THEN . empty
    (91) action_statement_list -> . action_statement_list action_statement
    (92) action_statement_list -> . action_statement
    (123) empty -> .
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSIF           reduce using rule 123 (empty -> .)
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    action_statement               shift and go to state 106
    empty                          shift and go to state 107
    action                         shift and go to state 10
    exit_action                    shift and go to state 17
    bracketed_action               shift and go to state 11
    action_statement_list          shift and go to state 108
    label_id                       shift and go to state 105
    if_action                      shift and go to state 20

state 48

    (78) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 78 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 78 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 78 (operator2 -> arithmetic_additive_operator .)


state 49

    (77) operand1 -> operand1 operator2 . operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    operand2                       shift and go to state 109
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    monadic_operator               shift and go to state 32

state 50

    (79) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 79 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 79 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 79 (arithmetic_additive_operator -> PLUS .)


state 51

    (80) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 80 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 80 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 80 (arithmetic_additive_operator -> MINUS .)


state 52

    (66) operator1 -> membership_operator .

    MINUS           reduce using rule 66 (operator1 -> membership_operator .)
    NOT             reduce using rule 66 (operator1 -> membership_operator .)
    ICONST          reduce using rule 66 (operator1 -> membership_operator .)


state 53

    (67) relational_operator -> AND .

    MINUS           reduce using rule 67 (relational_operator -> AND .)
    NOT             reduce using rule 67 (relational_operator -> AND .)
    ICONST          reduce using rule 67 (relational_operator -> AND .)


state 54

    (73) relational_operator -> LSS .

    MINUS           reduce using rule 73 (relational_operator -> LSS .)
    NOT             reduce using rule 73 (relational_operator -> LSS .)
    ICONST          reduce using rule 73 (relational_operator -> LSS .)


state 55

    (72) relational_operator -> GEQ .

    MINUS           reduce using rule 72 (relational_operator -> GEQ .)
    NOT             reduce using rule 72 (relational_operator -> GEQ .)
    ICONST          reduce using rule 72 (relational_operator -> GEQ .)


state 56

    (68) relational_operator -> OR .

    MINUS           reduce using rule 68 (relational_operator -> OR .)
    NOT             reduce using rule 68 (relational_operator -> OR .)
    ICONST          reduce using rule 68 (relational_operator -> OR .)


state 57

    (75) membership_operator -> IN .

    MINUS           reduce using rule 75 (membership_operator -> IN .)
    NOT             reduce using rule 75 (membership_operator -> IN .)
    ICONST          reduce using rule 75 (membership_operator -> IN .)


state 58

    (74) relational_operator -> LEQ .

    MINUS           reduce using rule 74 (relational_operator -> LEQ .)
    NOT             reduce using rule 74 (relational_operator -> LEQ .)
    ICONST          reduce using rule 74 (relational_operator -> LEQ .)


state 59

    (65) operator1 -> relational_operator .

    MINUS           reduce using rule 65 (operator1 -> relational_operator .)
    NOT             reduce using rule 65 (operator1 -> relational_operator .)
    ICONST          reduce using rule 65 (operator1 -> relational_operator .)


state 60

    (71) relational_operator -> GTR .

    MINUS           reduce using rule 71 (relational_operator -> GTR .)
    NOT             reduce using rule 71 (relational_operator -> GTR .)
    ICONST          reduce using rule 71 (relational_operator -> GTR .)


state 61

    (64) operand0 -> operand0 operator1 . operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    operand1                       shift and go to state 110
    operand2                       shift and go to state 31
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    monadic_operator               shift and go to state 32

state 62

    (70) relational_operator -> DIF .

    MINUS           reduce using rule 70 (relational_operator -> DIF .)
    NOT             reduce using rule 70 (relational_operator -> DIF .)
    ICONST          reduce using rule 70 (relational_operator -> DIF .)


state 63

    (69) relational_operator -> EQUALS .

    MINUS           reduce using rule 69 (relational_operator -> EQUALS .)
    NOT             reduce using rule 69 (relational_operator -> EQUALS .)
    ICONST          reduce using rule 69 (relational_operator -> EQUALS .)


state 64

    (83) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)


state 65

    (84) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)


state 66

    (82) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    monadic_operator               shift and go to state 32
    operand3                       shift and go to state 111
    operand4                       shift and go to state 30

state 67

    (85) arithmetic_multiplicative_operator -> PERC .

    MINUS           reduce using rule 85 (arithmetic_multiplicative_operator -> PERC .)
    NOT             reduce using rule 85 (arithmetic_multiplicative_operator -> PERC .)
    ICONST          reduce using rule 85 (arithmetic_multiplicative_operator -> PERC .)


state 68

    (86) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    PERC            reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    EQUALS          reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    DIF             reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    GTR             reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    GEQ             reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    LSS             reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    LEQ             reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    SEMICOL         reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 86 (operand3 -> monadic_operator operand4 .)
    RBRACK          reduce using rule 86 (operand3 -> monadic_operator operand4 .)


state 69

    (20) synonym_list -> synonym_list COMMA . synonym_definition
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (23) synonym_definition -> . identifier_list ASSIGN constant_expression
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    identifier                     shift and go to state 35
    synonym_definition             shift and go to state 112
    identifier_list                shift and go to state 37

state 70

    (10) synonym_statement -> SYN synonym_list SEMICOL .

    END             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    DCL             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    SYN             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    TYPE            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    ID              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    EXIT            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    IF              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)
    $end            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMICOL .)


state 71

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACK          reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> character_mode .)
    SEMICOL         reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)


state 72

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACK          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMICOL         reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 73

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACK          reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMICOL         reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)


state 74

    (48) composite_mode -> array_mode .

    ASSIGN          reduce using rule 48 (composite_mode -> array_mode .)
    SEMICOL         reduce using rule 48 (composite_mode -> array_mode .)
    COMMA           reduce using rule 48 (composite_mode -> array_mode .)
    LOC             reduce using rule 48 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 48 (composite_mode -> array_mode .)


state 75

    (49) string_mode -> CHARS . LBRACK string_length RBRACK

    LBRACK          shift and go to state 113


state 76

    (46) reference_mode -> REF . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 76
    ID              shift and go to state 5
    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    CHARS           shift and go to state 75
    ARRAY           shift and go to state 82

    identifier                     shift and go to state 78
    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    discrete_mode_name             shift and go to state 81
    integer_mode                   shift and go to state 73
    composite_mode                 shift and go to state 85
    mode_name                      shift and go to state 86
    reference_mode                 shift and go to state 87
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 89
    string_mode                    shift and go to state 77
    mode                           shift and go to state 114
    array_mode                     shift and go to state 74

state 77

    (47) composite_mode -> string_mode .

    ASSIGN          reduce using rule 47 (composite_mode -> string_mode .)
    SEMICOL         reduce using rule 47 (composite_mode -> string_mode .)
    COMMA           reduce using rule 47 (composite_mode -> string_mode .)
    LOC             reduce using rule 47 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 47 (composite_mode -> string_mode .)


state 78

    (41) mode_name -> identifier .
    (42) discrete_mode_name -> identifier .

    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    SEMICOL         reduce using rule 41 (mode_name -> identifier .)
    COMMA           reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 79

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 37 (boolean_mode -> BOOL .)
    SEMICOL         reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACK          reduce using rule 37 (boolean_mode -> BOOL .)


state 80

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACK          reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMICOL         reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)


state 81

    (39) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 115


state 82

    (51) array_mode -> ARRAY . LBRACK index_mode_list RBRACK element_mode

    LBRACK          shift and go to state 116


state 83

    (23) synonym_definition -> identifier_list ASSIGN . constant_expression
    (24) constant_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    expression                     shift and go to state 117
    constant_expression            shift and go to state 118
    operand1                       shift and go to state 26
    operand0                       shift and go to state 28
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    operand2                       shift and go to state 31
    monadic_operator               shift and go to state 32

state 84

    (58) identifier_list -> identifier_list COMMA . identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    identifier                     shift and go to state 119

state 85

    (31) mode -> composite_mode .

    ASSIGN          reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    RPAREN          reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    SEMICOL         reduce using rule 31 (mode -> composite_mode .)


state 86

    (28) mode -> mode_name .

    ASSIGN          reduce using rule 28 (mode -> mode_name .)
    LOC             reduce using rule 28 (mode -> mode_name .)
    RPAREN          reduce using rule 28 (mode -> mode_name .)
    COMMA           reduce using rule 28 (mode -> mode_name .)
    SEMICOL         reduce using rule 28 (mode -> mode_name .)


state 87

    (30) mode -> reference_mode .

    ASSIGN          reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    RPAREN          reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    SEMICOL         reduce using rule 30 (mode -> reference_mode .)


state 88

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    ASSIGN          reduce using rule 36 (integer_mode -> INT .)
    SEMICOL         reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    LOC             reduce using rule 36 (integer_mode -> INT .)
    RPAREN          reduce using rule 36 (integer_mode -> INT .)
    RBRACK          reduce using rule 36 (integer_mode -> INT .)


state 89

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    SEMICOL         reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 120


state 90

    (22) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 121


state 91

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    RBRACK          reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    SEMICOL         reduce using rule 38 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 38 (character_mode -> CHAR .)


state 92

    (15) declaration_list -> declaration_list COMMA . declaration
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    declaration                    shift and go to state 122
    identifier                     shift and go to state 35
    identifier_list                shift and go to state 41

state 93

    (9) declaration_statement -> DCL declaration_list SEMICOL .

    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMICOL .)


state 94

    (17) declaration -> identifier_list mode . initialization
    (18) declaration -> identifier_list mode .
    (19) initialization -> . ASSIGN expression

    SEMICOL         reduce using rule 18 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 18 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 123

    initialization                 shift and go to state 124

state 95

    (25) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    identifier                     shift and go to state 35
    mode_definition                shift and go to state 125
    identifier_list                shift and go to state 44

state 96

    (11) newmode_statement -> TYPE newmode_list SEMICOL .

    END             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    DCL             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    SYN             reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    TYPE            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    ID              reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    EXIT            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    IF              reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)
    $end            reduce using rule 11 (newmode_statement -> TYPE newmode_list SEMICOL .)


state 97

    (27) mode_definition -> identifier_list ASSIGN . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 76
    ID              shift and go to state 5
    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    CHARS           shift and go to state 75
    ARRAY           shift and go to state 82

    identifier                     shift and go to state 78
    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    string_mode                    shift and go to state 77
    discrete_mode_name             shift and go to state 81
    integer_mode                   shift and go to state 73
    mode                           shift and go to state 126
    mode_name                      shift and go to state 86
    reference_mode                 shift and go to state 87
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 89
    composite_mode                 shift and go to state 85
    array_mode                     shift and go to state 74

state 98

    (13) action_statement -> label_id COLON action . SEMICOL

    SEMICOL         shift and go to state 127


state 99

    (12) procedure_statement -> label_id COLON procedure_definition . SEMICOL

    SEMICOL         shift and go to state 128


state 100

    (106) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (107) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMICOL END
    (108) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMICOL statement_list END
    (109) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMICOL statement_list END
    (110) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMICOL END
    (111) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMICOL END
    (112) procedure_definition -> PROC . LPAREN RPAREN SEMICOL statement_list END
    (113) procedure_definition -> PROC . LPAREN RPAREN SEMICOL END

    LPAREN          shift and go to state 129


state 101

    (97) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 130


state 102

    (101) else_clause -> ELSE . action_statement_list
    (102) else_clause -> ELSE . empty
    (91) action_statement_list -> . action_statement_list action_statement
    (92) action_statement_list -> . action_statement
    (123) empty -> .
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 123 (empty -> .)
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    action_statement               shift and go to state 106
    empty                          shift and go to state 131
    action                         shift and go to state 10
    exit_action                    shift and go to state 17
    bracketed_action               shift and go to state 11
    action_statement_list          shift and go to state 132
    label_id                       shift and go to state 105
    if_action                      shift and go to state 20

state 103

    (98) if_action -> IF boolean_expression then_clause FI .

    SEMICOL         reduce using rule 98 (if_action -> IF boolean_expression then_clause FI .)


state 104

    (103) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (104) else_clause -> ELSIF . boolean_expression then_clause
    (62) boolean_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    expression                     shift and go to state 22
    boolean_expression             shift and go to state 133
    operand1                       shift and go to state 26
    operand0                       shift and go to state 28
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    operand2                       shift and go to state 31
    monadic_operator               shift and go to state 32

state 105

    (13) action_statement -> label_id . COLON action SEMICOL

    COLON           shift and go to state 134


state 106

    (92) action_statement_list -> action_statement .

    ID              reduce using rule 92 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 92 (action_statement_list -> action_statement .)
    IF              reduce using rule 92 (action_statement_list -> action_statement .)
    FI              reduce using rule 92 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 92 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 92 (action_statement_list -> action_statement .)


state 107

    (100) then_clause -> THEN empty .

    ELSE            reduce using rule 100 (then_clause -> THEN empty .)
    ELSIF           reduce using rule 100 (then_clause -> THEN empty .)
    FI              reduce using rule 100 (then_clause -> THEN empty .)


state 108

    (99) then_clause -> THEN action_statement_list .
    (91) action_statement_list -> action_statement_list . action_statement
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    ELSE            reduce using rule 99 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 99 (then_clause -> THEN action_statement_list .)
    FI              reduce using rule 99 (then_clause -> THEN action_statement_list .)
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    exit_action                    shift and go to state 17
    if_action                      shift and go to state 20
    action_statement               shift and go to state 135
    action                         shift and go to state 10
    bracketed_action               shift and go to state 11
    label_id                       shift and go to state 105

state 109

    (77) operand1 -> operand1 operator2 operand2 .
    (82) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (83) arithmetic_multiplicative_operator -> . TIMES
    (84) arithmetic_multiplicative_operator -> . DIVIDE
    (85) arithmetic_multiplicative_operator -> . PERC

    PLUS            reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    EQUALS          reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    DIF             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    GTR             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    GEQ             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    LSS             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    LEQ             reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    SEMICOL         reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    RBRACK          reduce using rule 77 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65
    PERC            shift and go to state 67

    arithmetic_multiplicative_operator shift and go to state 66

state 110

    (64) operand0 -> operand0 operator1 operand1 .
    (77) operand1 -> operand1 . operator2 operand2
    (78) operator2 -> . arithmetic_additive_operator
    (79) arithmetic_additive_operator -> . PLUS
    (80) arithmetic_additive_operator -> . MINUS

    AND             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    EQUALS          reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    DIF             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    GTR             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    GEQ             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    LSS             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    LEQ             reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    SEMICOL         reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    RBRACK          reduce using rule 64 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51

    arithmetic_additive_operator   shift and go to state 48
    operator2                      shift and go to state 49

state 111

    (82) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PERC            reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUALS          reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIF             reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTR             reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GEQ             reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LSS             reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LEQ             reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMICOL         reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACK          reduce using rule 82 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 112

    (20) synonym_list -> synonym_list COMMA synonym_definition .

    SEMICOL         reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)


state 113

    (49) string_mode -> CHARS LBRACK . string_length RBRACK
    (50) string_length -> . integer_literal
    (60) integer_literal -> . ICONST

    ICONST          shift and go to state 138

    integer_literal                shift and go to state 136
    string_length                  shift and go to state 137

state 114

    (46) reference_mode -> REF mode .

    ASSIGN          reduce using rule 46 (reference_mode -> REF mode .)
    SEMICOL         reduce using rule 46 (reference_mode -> REF mode .)
    COMMA           reduce using rule 46 (reference_mode -> REF mode .)
    LOC             reduce using rule 46 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 46 (reference_mode -> REF mode .)


state 115

    (39) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    literal_range                  shift and go to state 139
    expression                     shift and go to state 140
    lower_bound                    shift and go to state 141
    operand4                       shift and go to state 30
    monadic_operator               shift and go to state 32
    operand1                       shift and go to state 26
    operand0                       shift and go to state 28
    operand3                       shift and go to state 29
    operand2                       shift and go to state 31

state 116

    (51) array_mode -> ARRAY LBRACK . index_mode_list RBRACK element_mode
    (52) index_mode_list -> . index_mode_list COMMA index_mode
    (53) index_mode_list -> . index_mode
    (54) index_mode -> . discrete_mode
    (55) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (61) expression -> . operand0
    (59) identifier -> . ID
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    ID              shift and go to state 5
    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    index_mode                     shift and go to state 142
    expression                     shift and go to state 140
    index_mode_list                shift and go to state 143
    integer_mode                   shift and go to state 73
    operand1                       shift and go to state 26
    operand3                       shift and go to state 29
    identifier                     shift and go to state 144
    literal_range                  shift and go to state 145
    discrete_mode_name             shift and go to state 81
    lower_bound                    shift and go to state 141
    operand4                       shift and go to state 30
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 146
    operand2                       shift and go to state 31
    monadic_operator               shift and go to state 32
    operand0                       shift and go to state 28

state 117

    (24) constant_expression -> expression .

    SEMICOL         reduce using rule 24 (constant_expression -> expression .)
    COMMA           reduce using rule 24 (constant_expression -> expression .)


state 118

    (23) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMICOL         reduce using rule 23 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    COMMA           reduce using rule 23 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 119

    (58) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)
    ASSIGN          reduce using rule 58 (identifier_list -> identifier_list COMMA identifier .)


state 120

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    literal_range                  shift and go to state 147
    expression                     shift and go to state 140
    lower_bound                    shift and go to state 141
    monadic_operator               shift and go to state 32
    operand1                       shift and go to state 26
    operand0                       shift and go to state 28
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    operand2                       shift and go to state 31

state 121

    (22) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (24) constant_expression -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    expression                     shift and go to state 117
    constant_expression            shift and go to state 148
    monadic_operator               shift and go to state 32
    operand1                       shift and go to state 26
    operand0                       shift and go to state 28
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    operand2                       shift and go to state 31

state 122

    (15) declaration_list -> declaration_list COMMA declaration .

    SEMICOL         reduce using rule 15 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 15 (declaration_list -> declaration_list COMMA declaration .)


state 123

    (19) initialization -> ASSIGN . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    operand1                       shift and go to state 26
    operand2                       shift and go to state 31
    operand0                       shift and go to state 28
    expression                     shift and go to state 149
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    monadic_operator               shift and go to state 32

state 124

    (17) declaration -> identifier_list mode initialization .

    SEMICOL         reduce using rule 17 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 17 (declaration -> identifier_list mode initialization .)


state 125

    (25) newmode_list -> newmode_list COMMA mode_definition .

    SEMICOL         reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)


state 126

    (27) mode_definition -> identifier_list ASSIGN mode .

    SEMICOL         reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 127

    (13) action_statement -> label_id COLON action SEMICOL .

    END             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    DCL             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    SYN             reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    TYPE            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ID              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    EXIT            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    IF              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    FI              reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ELSE            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    ELSIF           reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)
    $end            reduce using rule 13 (action_statement -> label_id COLON action SEMICOL .)


state 128

    (12) procedure_statement -> label_id COLON procedure_definition SEMICOL .

    END             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    DCL             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    SYN             reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    TYPE            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    ID              reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    EXIT            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    IF              reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)
    $end            reduce using rule 12 (procedure_statement -> label_id COLON procedure_definition SEMICOL .)


state 129

    (106) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMICOL statement_list END
    (107) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMICOL END
    (108) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMICOL statement_list END
    (109) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMICOL statement_list END
    (110) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMICOL END
    (111) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMICOL END
    (112) procedure_definition -> PROC LPAREN . RPAREN SEMICOL statement_list END
    (113) procedure_definition -> PROC LPAREN . RPAREN SEMICOL END
    (114) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (115) formal_parameter_list -> . formal_parameter
    (116) formal_parameter -> . identifier_list parameter_spec
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    RPAREN          shift and go to state 150
    ID              shift and go to state 5

    formal_parameter_list          shift and go to state 152
    identifier                     shift and go to state 35
    identifier_list                shift and go to state 153
    formal_parameter               shift and go to state 151

state 130

    (97) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMICOL         reduce using rule 97 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 131

    (102) else_clause -> ELSE empty .

    FI              reduce using rule 102 (else_clause -> ELSE empty .)


state 132

    (101) else_clause -> ELSE action_statement_list .
    (91) action_statement_list -> action_statement_list . action_statement
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    FI              reduce using rule 101 (else_clause -> ELSE action_statement_list .)
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    exit_action                    shift and go to state 17
    if_action                      shift and go to state 20
    action_statement               shift and go to state 135
    action                         shift and go to state 10
    bracketed_action               shift and go to state 11
    label_id                       shift and go to state 105

state 133

    (103) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (104) else_clause -> ELSIF boolean_expression . then_clause
    (99) then_clause -> . THEN action_statement_list
    (100) then_clause -> . THEN empty

    THEN            shift and go to state 47

    then_clause                    shift and go to state 154

state 134

    (13) action_statement -> label_id COLON . action SEMICOL
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    EXIT            shift and go to state 2
    IF              shift and go to state 3

    exit_action                    shift and go to state 17
    bracketed_action               shift and go to state 11
    if_action                      shift and go to state 20
    action                         shift and go to state 98

state 135

    (91) action_statement_list -> action_statement_list action_statement .

    ID              reduce using rule 91 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 91 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 91 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 91 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 91 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 91 (action_statement_list -> action_statement_list action_statement .)


state 136

    (50) string_length -> integer_literal .

    RBRACK          reduce using rule 50 (string_length -> integer_literal .)


state 137

    (49) string_mode -> CHARS LBRACK string_length . RBRACK

    RBRACK          shift and go to state 155


state 138

    (60) integer_literal -> ICONST .

    RBRACK          reduce using rule 60 (integer_literal -> ICONST .)


state 139

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 156


state 140

    (44) lower_bound -> expression .

    COLON           reduce using rule 44 (lower_bound -> expression .)


state 141

    (43) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 157


state 142

    (53) index_mode_list -> index_mode .

    RBRACK          reduce using rule 53 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 53 (index_mode_list -> index_mode .)


state 143

    (51) array_mode -> ARRAY LBRACK index_mode_list . RBRACK element_mode
    (52) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACK          shift and go to state 159
    COMMA           shift and go to state 158


state 144

    (42) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 145

    (55) index_mode -> literal_range .

    RBRACK          reduce using rule 55 (index_mode -> literal_range .)
    COMMA           reduce using rule 55 (index_mode -> literal_range .)


state 146

    (54) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACK          reduce using rule 54 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 54 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 120


state 147

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 160


state 148

    (22) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMICOL         reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    COMMA           reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 149

    (19) initialization -> ASSIGN expression .

    SEMICOL         reduce using rule 19 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 19 (initialization -> ASSIGN expression .)


state 150

    (109) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMICOL statement_list END
    (111) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMICOL END
    (112) procedure_definition -> PROC LPAREN RPAREN . SEMICOL statement_list END
    (113) procedure_definition -> PROC LPAREN RPAREN . SEMICOL END
    (120) result_spec -> . RETURNS LPAREN mode result_attribute RPAREN
    (121) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMICOL         shift and go to state 163
    RETURNS         shift and go to state 162

    result_spec                    shift and go to state 161

state 151

    (115) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 115 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 115 (formal_parameter_list -> formal_parameter .)


state 152

    (106) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMICOL statement_list END
    (107) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMICOL END
    (108) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMICOL statement_list END
    (110) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMICOL END
    (114) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 165
    COMMA           shift and go to state 164


state 153

    (116) formal_parameter -> identifier_list . parameter_spec
    (58) identifier_list -> identifier_list . COMMA identifier
    (117) parameter_spec -> . mode parameter_attribute
    (118) parameter_spec -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 84
    REF             shift and go to state 76
    ID              shift and go to state 5
    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    CHARS           shift and go to state 75
    ARRAY           shift and go to state 82

    identifier                     shift and go to state 78
    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    parameter_spec                 shift and go to state 166
    string_mode                    shift and go to state 77
    discrete_mode_name             shift and go to state 81
    integer_mode                   shift and go to state 73
    composite_mode                 shift and go to state 85
    mode_name                      shift and go to state 86
    reference_mode                 shift and go to state 87
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 89
    mode                           shift and go to state 167
    array_mode                     shift and go to state 74

state 154

    (103) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (104) else_clause -> ELSIF boolean_expression then_clause .
    (101) else_clause -> . ELSE action_statement_list
    (102) else_clause -> . ELSE empty
    (103) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (104) else_clause -> . ELSIF boolean_expression then_clause

    FI              reduce using rule 104 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 102
    ELSIF           shift and go to state 104

    else_clause                    shift and go to state 168

state 155

    (49) string_mode -> CHARS LBRACK string_length RBRACK .

    SEMICOL         reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    COMMA           reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    ASSIGN          reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    LOC             reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)
    RPAREN          reduce using rule 49 (string_mode -> CHARS LBRACK string_length RBRACK .)


state 156

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACK          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 157

    (43) literal_range -> lower_bound COLON . upper_bound
    (45) upper_bound -> . expression
    (61) expression -> . operand0
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    expression                     shift and go to state 169
    monadic_operator               shift and go to state 32
    operand1                       shift and go to state 26
    operand0                       shift and go to state 28
    operand3                       shift and go to state 29
    operand4                       shift and go to state 30
    operand2                       shift and go to state 31
    upper_bound                    shift and go to state 170

state 158

    (52) index_mode_list -> index_mode_list COMMA . index_mode
    (54) index_mode -> . discrete_mode
    (55) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (61) expression -> . operand0
    (59) identifier -> . ID
    (63) operand0 -> . operand1
    (64) operand0 -> . operand0 operator1 operand1
    (76) operand1 -> . operand2
    (77) operand1 -> . operand1 operator2 operand2
    (81) operand2 -> . operand3
    (82) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (86) operand3 -> . monadic_operator operand4
    (87) operand3 -> . operand4
    (88) monadic_operator -> . MINUS
    (89) monadic_operator -> . NOT
    (90) operand4 -> . ICONST

    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    ID              shift and go to state 5
    MINUS           shift and go to state 24
    NOT             shift and go to state 27
    ICONST          shift and go to state 23

    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    index_mode                     shift and go to state 171
    expression                     shift and go to state 140
    operand1                       shift and go to state 26
    operand3                       shift and go to state 29
    identifier                     shift and go to state 144
    literal_range                  shift and go to state 145
    boolean_mode                   shift and go to state 80
    discrete_mode_name             shift and go to state 81
    lower_bound                    shift and go to state 141
    operand0                       shift and go to state 28
    operand4                       shift and go to state 30
    integer_mode                   shift and go to state 73
    discrete_mode                  shift and go to state 146
    operand2                       shift and go to state 31
    monadic_operator               shift and go to state 32

state 159

    (51) array_mode -> ARRAY LBRACK index_mode_list RBRACK . element_mode
    (56) element_mode -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 76
    ID              shift and go to state 5
    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    CHARS           shift and go to state 75
    ARRAY           shift and go to state 82

    identifier                     shift and go to state 78
    character_mode                 shift and go to state 71
    discrete_range_mode            shift and go to state 72
    mode                           shift and go to state 173
    discrete_mode_name             shift and go to state 81
    integer_mode                   shift and go to state 73
    element_mode                   shift and go to state 172
    mode_name                      shift and go to state 86
    reference_mode                 shift and go to state 87
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 89
    string_mode                    shift and go to state 77
    composite_mode                 shift and go to state 85
    array_mode                     shift and go to state 74

state 160

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACK          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMICOL         reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 161

    (109) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMICOL statement_list END
    (111) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMICOL END

    SEMICOL         shift and go to state 174


state 162

    (120) result_spec -> RETURNS . LPAREN mode result_attribute RPAREN
    (121) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 175


state 163

    (112) procedure_definition -> PROC LPAREN RPAREN SEMICOL . statement_list END
    (113) procedure_definition -> PROC LPAREN RPAREN SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 177
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    procedure_statement            shift and go to state 16
    statement_list                 shift and go to state 176
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 9
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 164

    (114) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (116) formal_parameter -> . identifier_list parameter_spec
    (57) identifier_list -> . identifier
    (58) identifier_list -> . identifier_list COMMA identifier
    (59) identifier -> . ID

    ID              shift and go to state 5

    identifier                     shift and go to state 35
    identifier_list                shift and go to state 153
    formal_parameter               shift and go to state 178

state 165

    (106) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMICOL statement_list END
    (107) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMICOL END
    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMICOL statement_list END
    (110) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMICOL END
    (120) result_spec -> . RETURNS LPAREN mode result_attribute RPAREN
    (121) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMICOL         shift and go to state 180
    RETURNS         shift and go to state 162

    result_spec                    shift and go to state 179

state 166

    (116) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 116 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 116 (formal_parameter -> identifier_list parameter_spec .)


state 167

    (117) parameter_spec -> mode . parameter_attribute
    (118) parameter_spec -> mode .
    (119) parameter_attribute -> . LOC

    RPAREN          reduce using rule 118 (parameter_spec -> mode .)
    COMMA           reduce using rule 118 (parameter_spec -> mode .)
    LOC             shift and go to state 182

    parameter_attribute            shift and go to state 181

state 168

    (103) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 103 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 169

    (45) upper_bound -> expression .

    RPAREN          reduce using rule 45 (upper_bound -> expression .)
    RBRACK          reduce using rule 45 (upper_bound -> expression .)
    COMMA           reduce using rule 45 (upper_bound -> expression .)


state 170

    (43) literal_range -> lower_bound COLON upper_bound .

    RBRACK          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)


state 171

    (52) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACK          reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)


state 172

    (51) array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .

    ASSIGN          reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    LOC             reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    RPAREN          reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    COMMA           reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)
    SEMICOL         reduce using rule 51 (array_mode -> ARRAY LBRACK index_mode_list RBRACK element_mode .)


state 173

    (56) element_mode -> mode .

    ASSIGN          reduce using rule 56 (element_mode -> mode .)
    SEMICOL         reduce using rule 56 (element_mode -> mode .)
    COMMA           reduce using rule 56 (element_mode -> mode .)
    LOC             reduce using rule 56 (element_mode -> mode .)
    RPAREN          reduce using rule 56 (element_mode -> mode .)


state 174

    (109) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL . statement_list END
    (111) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 184
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    procedure_statement            shift and go to state 16
    statement_list                 shift and go to state 183
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 9
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 175

    (120) result_spec -> RETURNS LPAREN . mode result_attribute RPAREN
    (121) result_spec -> RETURNS LPAREN . mode RPAREN
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (59) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACK string_length RBRACK
    (51) array_mode -> . ARRAY LBRACK index_mode_list RBRACK element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 76
    ID              shift and go to state 5
    INT             shift and go to state 88
    BOOL            shift and go to state 79
    CHAR            shift and go to state 91
    CHARS           shift and go to state 75
    ARRAY           shift and go to state 82

    identifier                     shift and go to state 78
    character_mode                 shift and go to state 71
    discrete_mode_name             shift and go to state 81
    discrete_range_mode            shift and go to state 72
    integer_mode                   shift and go to state 73
    mode                           shift and go to state 185
    mode_name                      shift and go to state 86
    reference_mode                 shift and go to state 87
    boolean_mode                   shift and go to state 80
    discrete_mode                  shift and go to state 89
    string_mode                    shift and go to state 77
    composite_mode                 shift and go to state 85
    array_mode                     shift and go to state 74

state 176

    (112) procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 186
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    procedure_statement            shift and go to state 16
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 33
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 177

    (113) procedure_definition -> PROC LPAREN RPAREN SEMICOL END .

    SEMICOL         reduce using rule 113 (procedure_definition -> PROC LPAREN RPAREN SEMICOL END .)


state 178

    (114) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 114 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 114 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 179

    (106) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMICOL statement_list END
    (107) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMICOL END

    SEMICOL         shift and go to state 187


state 180

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL . statement_list END
    (110) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 189
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    procedure_statement            shift and go to state 16
    statement_list                 shift and go to state 188
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 9
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 181

    (117) parameter_spec -> mode parameter_attribute .

    RPAREN          reduce using rule 117 (parameter_spec -> mode parameter_attribute .)
    COMMA           reduce using rule 117 (parameter_spec -> mode parameter_attribute .)


state 182

    (119) parameter_attribute -> LOC .

    RPAREN          reduce using rule 119 (parameter_attribute -> LOC .)
    COMMA           reduce using rule 119 (parameter_attribute -> LOC .)


state 183

    (109) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 190
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    procedure_statement            shift and go to state 16
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 33
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 184

    (111) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END .

    SEMICOL         reduce using rule 111 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL END .)


state 185

    (120) result_spec -> RETURNS LPAREN mode . result_attribute RPAREN
    (121) result_spec -> RETURNS LPAREN mode . RPAREN
    (122) result_attribute -> . LOC

    RPAREN          shift and go to state 193
    LOC             shift and go to state 192

    result_attribute               shift and go to state 191

state 186

    (112) procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END .

    SEMICOL         reduce using rule 112 (procedure_definition -> PROC LPAREN RPAREN SEMICOL statement_list END .)


state 187

    (106) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL . statement_list END
    (107) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL . END
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 195
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    declaration_statement          shift and go to state 4
    statement_list                 shift and go to state 194
    statement                      shift and go to state 9
    action                         shift and go to state 10
    bracketed_action               shift and go to state 11
    action_statement               shift and go to state 13
    newmode_statement              shift and go to state 14
    procedure_statement            shift and go to state 16
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    label_id                       shift and go to state 19
    if_action                      shift and go to state 20

state 188

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 196
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    if_action                      shift and go to state 20
    action_statement               shift and go to state 13
    declaration_statement          shift and go to state 4
    newmode_statement              shift and go to state 14
    action                         shift and go to state 10
    procedure_statement            shift and go to state 16
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    statement                      shift and go to state 33
    label_id                       shift and go to state 19
    bracketed_action               shift and go to state 11

state 189

    (110) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END .

    SEMICOL         reduce using rule 110 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL END .)


state 190

    (109) procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END .

    SEMICOL         reduce using rule 109 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMICOL statement_list END .)


state 191

    (120) result_spec -> RETURNS LPAREN mode result_attribute . RPAREN

    RPAREN          shift and go to state 197


state 192

    (122) result_attribute -> LOC .

    RPAREN          reduce using rule 122 (result_attribute -> LOC .)


state 193

    (121) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMICOL         reduce using rule 121 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 194

    (106) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list . END
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMICOL
    (10) synonym_statement -> . SYN synonym_list SEMICOL
    (11) newmode_statement -> . TYPE newmode_list SEMICOL
    (12) procedure_statement -> . label_id COLON procedure_definition SEMICOL
    (13) action_statement -> . label_id COLON action SEMICOL
    (14) action_statement -> . action SEMICOL
    (93) label_id -> . identifier
    (94) action -> . bracketed_action
    (95) action -> . exit_action
    (59) identifier -> . ID
    (96) bracketed_action -> . if_action
    (105) exit_action -> . EXIT label_id
    (97) if_action -> . IF boolean_expression then_clause else_clause FI
    (98) if_action -> . IF boolean_expression then_clause FI

    END             shift and go to state 198
    DCL             shift and go to state 12
    SYN             shift and go to state 8
    TYPE            shift and go to state 15
    ID              shift and go to state 5
    EXIT            shift and go to state 2
    IF              shift and go to state 3

    identifier                     shift and go to state 1
    declaration_statement          shift and go to state 4
    statement                      shift and go to state 33
    action                         shift and go to state 10
    bracketed_action               shift and go to state 11
    action_statement               shift and go to state 13
    newmode_statement              shift and go to state 14
    procedure_statement            shift and go to state 16
    exit_action                    shift and go to state 17
    synonym_statement              shift and go to state 18
    label_id                       shift and go to state 19
    if_action                      shift and go to state 20

state 195

    (107) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END .

    SEMICOL         reduce using rule 107 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL END .)


state 196

    (108) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END .

    SEMICOL         reduce using rule 108 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMICOL statement_list END .)


state 197

    (120) result_spec -> RETURNS LPAREN mode result_attribute RPAREN .

    SEMICOL         reduce using rule 120 (result_spec -> RETURNS LPAREN mode result_attribute RPAREN .)


state 198

    (106) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END .

    SEMICOL         reduce using rule 106 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMICOL statement_list END .)

